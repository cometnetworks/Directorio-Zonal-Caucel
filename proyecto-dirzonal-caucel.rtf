{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 .SFNS-Regular;\f2\fnil\fcharset0 HelveticaNeue-Bold;
\f3\fnil\fcharset0 LucidaGrande-Bold;\f4\fnil\fcharset0 .SFNS-Semibold;\f5\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;
\f6\froman\fcharset0 TimesNewRomanPSMT;\f7\fnil\fcharset0 AppleColorEmoji;\f8\fnil\fcharset128 HiraginoSans-W5;
\f9\fswiss\fcharset0 Helvetica-Bold;\f10\fnil\fcharset128 HiraginoSans-W3;\f11\fnil\fcharset0 .SFNS-RegularItalic;
\f12\fnil\fcharset0 .AppleSystemUIFontMonospaced-RegularItalic;\f13\froman\fcharset0 Times-Bold;\f14\froman\fcharset0 Times-Roman;
\f15\fnil\fcharset77 ZapfDingbatsITC;}
{\colortbl;\red255\green255\blue255;\red14\green14\blue14;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c6700\c6700\c6700;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Proyecto Directorio Zonal Caucel\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 Quiero crear una app de un directorio de negocios zonal estilo p\'e1ginas amarillas de antes donde se puedan promocionar negocios peque\'f1os como peluquer\'edas, pasteler\'edas, talleres mec\'e1nicos, salones de belleza, ferreter\'edas, dentistas, cl\'ednicas m\'e9dicas, farmacias etc, basando me en los negocios que aparecen en Google maps por ejemplo de la zona de Caucel en M\'e9rida Yucat\'e1n M\'e9xico, que pueda buscar por tipo de negocio, por distancia de el usuario y ver un mapa interactivo, el prop\'f3sito es darle visibilidad a negocios peque\'f1os que no invierten en publicidad online, crea la app funcional, primero ay\'fadame a crear la mejor estructura para esta app para despu\'e9s replicar este directorio zonal en otras zonas de M\'e9rida Yucat\'e1n \
\
Perfecto \'97 buen proyecto. Me gusta la idea: un directorio zonal tipo \'93P\'e1ginas Amarillas\'94 moderno que le d\'e9 visibilidad a micro y peque\'f1os negocios de Caucel y luego se replique por otras zonas de M\'e9rida. Abajo te propongo 
\f2\b \cf2 la mejor estructura funcional (MVP 
\f3 \uc0\u8594 
\f2  escala)
\f1\b0 \cf2 : arquitectura t\'e9cnica, modelos de datos, endpoints, UX/UI principales, flujo de onboarding y una hoja de ruta para replicar la zona. Tambi\'e9n incluyo recomendaciones pr\'e1cticas para obtener y sincronizar datos desde Google Maps y alternativas (OpenStreetMap). Donde es cr\'edtico, cito la documentaci\'f3n oficial o art\'edculos \'fatiles.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 1) Resumen del producto (MVP)
\f1\b0\fs28 \cf2 \
\
MVP objetivo: app m\'f3vil (iOS/Android) + panel web admin que permita:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Buscar negocios por categor\'eda (peluquer\'eda, pasteler\'eda, taller, farmacia, etc).\
	\'95	Buscar por distancia (desde la ubicaci\'f3n del usuario) y ordenar por cercan\'eda o por relevancia.\
	\'95	Ver mapa interactivo con pins y detalle de cada negocio (tel\'e9fono, horario, fotos, direcci\'f3n, rese\'f1as).\
	\'95	Ficha de negocio editable por el propio comerciante (registro manual) + opci\'f3n de reclamar/a\'f1adir negocios detectados autom\'e1ticamente.\
	\'95	Chat/llamada directa y bot\'f3n para obtener direcciones (abrir en la app de mapas).\
	\'95	Panel simple de pagos para anuncios destacados (visibilidad local).\
\
Beneficio clave: visibilidad para negocios que no invierten en publicidad online; usuarios descubren servicios locales con pocas fricciones.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 2) Fuentes de datos y sincronizaci\'f3n
\f1\b0\fs28 \cf2 \
\
Opciones y recomendaciones:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Google Places / Places Nearby Search
\f1\b0 : ideal para poblar inicialmente la zona con POIs, datos de contacto, coordenadas y rese\'f1as. Usa Nearby Search + Place Details para enriquecer fichas. (Docs: Nearby Search).  \
	\'95	
\f2\b OpenStreetMap / Overpass API
\f1\b0 : buena alternativa gratuita para POIs (cafeter\'edas, ferreter\'edas, cl\'ednicas). \'datil si quieres evitar costos de Google o cubrir huecos. Requiere transformar etiquetas OSM a tus categor\'edas.  \
	\'95	
\f2\b Ingreso manual / CSV / WhatsApp / formulario local
\f1\b0 : permite que los comercios que no aparecen en Google se registren; esencial para tu objetivo.\
	\'95	
\f2\b Sincronizaci\'f3n y cadencia
\f1\b0 : estrategia h\'edbrida \'97 una importaci\'f3n inicial (Google/OSM) y luego jobs peri\'f3dicos para actualizar (cada 7\'9630 d\'edas). Permite a los propietarios \'93reclamar\'94 y mantener la ficha.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 3) Tecnolog\'eda recomendada (stack)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Frontend m\'f3vil: 
\f2\b React Native
\f1\b0  o 
\f2\b Flutter
\f1\b0  (compilaci\'f3n para iOS+Android).\
	\'95	Backend: 
\f2\b Node.js + Express
\f1\b0  (o Python FastAPI) para APIs.\
	\'95	Base de datos: 
\f2\b PostgreSQL + PostGIS
\f1\b0  (geospatial queries, \'edndice GiST para b\'fasquedas por distancia).\
	\'95	Map SDK: 
\f2\b Mapbox
\f1\b0  (m\'e1s econ\'f3mico con personalizaci\'f3n) o 
\f2\b Google Maps SDK
\f1\b0  (mejor cobertura de POIs y direcciones). Comp\'e1ralo: Mapbox suele ser m\'e1s barato en altos vol\'famenes; Google tiene $200/mes gratuito pero puede encarecerse.   \
	\'95	Autenticaci\'f3n: JWT + Social Login (Google/Facebook/Apple).\
	\'95	Hosting: AWS / Google Cloud / Vercel (frontend web) + managed Postgres (Neon, Supabase, RDS).\
	\'95	Panel admin/CMS: Next.js (web) o direct dashboard (Metabase para analytics).\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 4) Modelo de datos (esquema esencial)
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Tabla: businesses
\f1\b0 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	id (uuid)\
	\'95	name (string)\
	\'95	category_id (FK)\
	\'95	latitude, longitude (decimal)\
	\'95	address (string)\
	\'95	phone (string)\
	\'95	website (string)\
	\'95	opening_hours (json)\
	\'95	photos (array / url list)\
	\'95	description (text)\
	\'95	source (enum: google, osm, manual)\
	\'95	source_place_id (string) \'97 para Google Place ID o OSM id\
	\'95	claimed_by_user_id (uuid | null)\
	\'95	is_featured (bool)\
	\'95	created_at, updated_at, last_synced_at (timestamps)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Tabla: categories
\f1\b0 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	id, name (peluquer\'eda, pasteler\'eda, taller, etc), icon\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Tabla: reviews
\f1\b0 \cf2  (opcional inicialmente)\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	id, business_id, user_id, rating, text, created_at\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Indices recomendados
\f1\b0 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	GiST index en (geography(latitude, longitude)) para consultas por radio/distancia.\
	\'95	Index por category_id y is_featured.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 5) Endpoints API clave (REST)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 GET /api/v1/businesses?lat=\{\}&lng=\{\}&radius_m=\{\}&category=\{\}&q=\{\}
\f1  \'97 b\'fasqueda por distancia y filtro.\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Implementa paginaci\'f3n y orden por distancia (PostGIS ST_Distance).\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 GET /api/v1/businesses/\{id\}
\f1  \'97 detalle completo.\
	\'95	
\f5 POST /api/v1/businesses
\f1  \'97 a\'f1adir negocio (registro manual).\
	\'95	
\f5 POST /api/v1/businesses/\{id\}/claim
\f1  \'97 reclamar ficha (flujo de verificaci\'f3n: SMS o correo).\
	\'95	
\f5 POST /api/v1/businesses/\{id\}/feature
\f1  \'97 pago para destacar.\
	\'95	
\f5 GET /api/v1/nearby-places/google-sync?lat=&lng=&radius=
\f1  \'97 endpoint interno para disparar sincronizaci\'f3n con Google Places (protegido).\
	\'95	
\f5 POST /auth/login
\f1 , 
\f5 /auth/signup
\f1  \'97 para comerciantes y usuarios.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 6) UX / pantallas principales
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Pantalla de inicio: b\'fasqueda + categor\'edas r\'e1pidas (chips) + mapa peque\'f1o.\
	2.	Resultados listados: tarjetas con distancia, rating y \'93destacado\'94.\
	3.	Mapa interactivo: pins agrupados (cluster) y bot\'f3n \'93centrar en mi ubicaci\'f3n\'94.\
	4.	Ficha del negocio: fotos, contacto (click-to-call), horario, bot\'f3n \'93c\'f3mo llegar\'94 y bot\'f3n \'93reclamar\'94.\
	5.	Registro/Onboarding de comercios: formulario sencillo + verificaci\'f3n por SMS.\
	6.	Panel admin (web): gestionar fichas, pagos, reports y m\'e9tricas (visitas, clics llamar/directions).\
	7.	\'c1rea de comerciante: editar ficha, ver estad\'edsticas, contratar destacada.\
\
UI note: dise\'f1o simple y mobile-first. Icons y etiquetas claras para segmentos de p\'fablico general.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 7) B\'fasqueda por distancia / l\'f3gica t\'e9cnica
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Usa PostGIS 
\f5 ST_DWithin
\f1  y 
\f5 ST_DistanceSphere
\f1  para filtrar y ordenar por distancia eficientemente.\
	\'95	En frontend, pide permiso de ubicaci\'f3n y env\'eda lat/lng al backend para la consulta.\
	\'95	Agrega caching (Redis) para queries frecuentes por zona (ej. max/min radius) para reducir costes de requests a mapas/APIs.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 8) Integraci\'f3n con Google Places (pr\'e1ctica)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Usa 
\f2\b Nearby Search
\f1\b0  para obtener POIs por tipo alrededor de coordenadas (p. ej. 
\f5 type=barber
\f1 ). Luego usa Place Details para obtener tel\'e9fono, fotos, horarios. La doc lo explica.  \
	\'95	Ten en cuenta l\'edmites y costo: Google cobra por requests (revisa consola y cuotas). Considera combinar con OSM para reducir costos.   \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 9) Alternativa gratuita: OpenStreetMap + Overpass
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Overpass te deja extraer POIs por etiquetas (amenity=clinic, shop=bakery, etc). Es ideal para poblaciones peque\'f1as o como respaldo. Requiere normalizar categor\'edas.   \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 10) Monetizaci\'f3n y modelo de negocio
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Listado b\'e1sico gratuito.\
	\'95	Planes de suscripci\'f3n para comerciantes: ficha verificada + mejores horarios + estad\'edsticas.\
	\'95	Anuncios locales: \'93destacar en la zona\'94 por d\'edas.\
	\'95	Lead generation: cobrar por clientes potenciales calificados.\
	\'95	Servicios adicionales: fotos profesionales, creaci\'f3n de ficha (onboarding pago).\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 11) Privacidad y legal (breve)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Pide s\'f3lo datos necesarios y ofrece pol\'edtica de privacidad clara (tel\'e9fono, email).\
	\'95	Para verificaci\'f3n por SMS, usa proveedores (Twilio, Nexmo).\
	\'95	Si vas a almacenar rese\'f1as, modera el contenido para evitar problemas legales.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 12) Roadmap y prioridades (MVP \uc0\u8594  3 meses)
\f1\b0\fs28 \cf2 \
\
Fase 0 \'97 Plan y prototipado (1\'962 semanas)\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Definir categor\'edas, dise\'f1ar flow y mockups (Figma).\
	\'95	Crear cuenta en Google Cloud (API key) y elegir Map SDK.\
\
Fase 1 \'97 MVP (4\'966 semanas)\
	\'95	Backend + Postgres+PostGIS + endpoints b\'e1sicos.\
	\'95	Mobile app con b\'fasqueda, mapa y fichas.\
	\'95	Ingesta inicial de POIs de Caucel (Google + manual).\
	\'95	Panel admin b\'e1sico + reclamo de fichas.\
\
Fase 2 \'97 Growth / replicaci\'f3n (4\'968 semanas)\
	\'95	A\'f1adir pagos/featured listings.\
	\'95	Mejorar onboarding de comercios (formulario offline / WhatsApp).\
	\'95	Scripts para \'93crear zona\'94 \'97 parametrizar lat/lng boundaries para replicar otras colonias.\
	\'95	M\'e9tricas y dashboard.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 13) C\'f3mo replicar por otras zonas de M\'e9rida (proceso)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Definir polygon/center+radius de la nueva zona.\
	2.	Ejecutar job de extracci\'f3n: Overpass (OSM) + Google Nearby Search para ese bounding box.\
	3.	Normalizar categor\'edas y limpiar duplicados (match por coordenadas + nombre).\
	4.	Lanzar campa\'f1a local: WhatsApp/volante/visita para que comercios reclamen ficha.\
	5.	Monitorear y ajustar precios/feature spots por demanda local.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 14) Costos y decisiones econ\'f3micas
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Comienzas barato si solo usas OSM + Mapbox (free tiers) y hosting peque\'f1o.\
	\'95	Si usas Google Places intensivamente, monitoriza requests \'97 puede incrementar costos. Revisa comparativas Mapbox vs Google para tu volumen.   \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 15) Tareas inmediatas (qu\'e9 hago yo ahora si quieres que lo dise\'f1emos juntos)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Definimos alcance de MVP exacto (\'bfs\'f3lo Caucel? \'bfiOS+Android? \'bfpanel web?).\
	\'95	Te preparo: 1) Diagrama de arquitectura, 2) tablas SQL listas para deploy, 3) endpoints con ejemplos de payload, 4) un mockup de 3 pantallas (inicio, lista, ficha).\
Dime cu\'e1l de esos 4 items quieres primero y lo genero ahora.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, empiezo por 
\f2\b \cf2 (A)
\f1\b0 \cf2  las tablas SQL + queries PostGIS para b\'fasqueda por radio y un ejemplo de 
\f5 \cf2 GET /api/v1/businesses
\f1 \cf2  con paginaci\'f3n y orden por distancia, o 
\f2\b \cf2 (B)
\f1\b0 \cf2  el flujo de importaci\'f3n de Google Places + script ejemplo (pseudo-c\'f3digo). \'bfCu\'e1l prefieres que haga ahora?\
\
1. Define el alcance d MVP exacto en este caso solo Caucel iOS + Android + web 2. Empieza por la opci\'f3n a que me diste, mantengamos la opci\'f3n a utilizar herramientas sin costo o costo m\'ednimo sin perder funcionalidad efectiva, utiliza las mejores pr\'e1cticas del mercado en la actualidad y piensa paso a paso como experto en dise\'f1o de apps \
\
Perfecto \'97 vamos paso a paso como experto y optimizando 
\f2\b \cf2 costos m\'ednimos
\f1\b0 \cf2  sin sacrificar funcionalidad. Primero defino el 
\f2\b \cf2 alcance exacto
\f1\b0 \cf2  del MVP (Caucel, iOS + Android + web) y despu\'e9s te entrego 
\f2\b \cf2 el SQL (PostGIS)
\f1\b0 \cf2  listo, la consulta eficiente para b\'fasqueda por radio + orden por distancia y un ejemplo de endpoint 
\f5 \cf2 GET /api/v1/businesses
\f1 \cf2  con paginaci\'f3n. Tambi\'e9n incluyo \'edndices, optimizaciones y un plan de trabajo.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 Alcance exacto del MVP (Caucel \'97 iOS + Android + Web)
\f1\b0\fs28 \cf2 \
\
Incluido en el MVP (prioridad alta):\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	\'c1rea: \'fanicamente zona de 
\f2\b Caucel (M\'e9rida, Yucat\'e1n)
\f1\b0  \'97 seed inicial con POIs de OSM/Overpass y limpieza manual.\
	\'95	Plataformas: app m\'f3vil (iOS + Android) usando 
\f2\b React Native (Expo)
\f1\b0  o 
\f2\b Flutter
\f1\b0  para acelerar. Web: PWA/Next.js para panel p\'fablico y admin.\
	\'95	Funcionalidad p\'fablica:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Buscar por categor\'eda y texto (p. ej. \'93peluquer\'eda\'94, \'93pasteler\'eda\'94).\
	\'95	Buscar por 
\f2\b \cf2 distancia desde la ubicaci\'f3n del usuario
\f1\b0 \cf2  (radio configurable en metros).\
	\'95	Ver resultados en lista y en 
\f2\b \cf2 mapa interactivo
\f1\b0 \cf2  (pins, clusters).\
	\'95	Ficha de negocio con tel\'e9fono (click-to-call), direcci\'f3n, fotos, horario y bot\'f3n \'abC\'f3mo llegar\'bb.\
	\'95	Bot\'f3n para que el negocio 
\f2\b \cf2 reclame/edite
\f1\b0 \cf2  su ficha (flujo con verificaci\'f3n SMS o email).\
	\'95	Filtro \'93destacados\'94 (negocios que pagan por visibilidad).\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Admin / Comerciantes:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Panel web para aprobar/editar fichas, ver m\'e9tricas b\'e1sicas (clics/llamadas/direcciones).\
	\'95	Suscripci\'f3n simple / pago para destacar un negocio (Stripe o MercadoPago).\
\
No incluido en MVP (posponer):\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Rese\'f1as/valoraciones complejas, geocodificador propio, routing en la app (usar \'93abrir en Google Maps/Mapbox\'94 primero).\
	\'95	Motor de recomendaciones complejo o perfiles avanzados.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 Stack de bajo costo recomendado (m\'ednimo viable)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Base de datos: 
\f2\b PostgreSQL + PostGIS
\f1\b0  (ej. Supabase: Postgres administrado con soporte PostGIS).  \
	\'95	Mapas: 
\f2\b Mapbox
\f1\b0  (generoso free tier; personalizable) \'97 o usar tiles OSM si quieres 100% costo 0.  \
	\'95	Seed / POIs iniciales: 
\f2\b Overpass API (OpenStreetMap)
\f1\b0  para extraer peluquer\'edas, panader\'edas, farmacias en Caucel.   \
	\'95	Backend: Node.js + Express o Fastify (API REST) \'97 despliegue en Vercel / Render / Fly para baja fricci\'f3n.\
	\'95	M\'f3vil: React Native (Expo) para builds r\'e1pidas (iOS/Android).\
	\'95	Autenticaci\'f3n: Supabase Auth o Auth0 (JWT).\
	\'95	Almacenamiento de im\'e1genes: Supabase Storage o S3 (bajo costo).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 1) SQL / DDL (PostGIS) \'97 listo para ejecutar (plantilla)
\f1\b0\fs28 \cf2 \
\
Primero habilitar extensi\'f3n PostGIS (en Supabase o en tu Postgres):\
\
-- Habilitar PostGIS (requiere permisos de superuser / o desde panel Supabase)\
CREATE EXTENSION IF NOT EXISTS postgis;\
CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; -- para gen_random_uuid() o us\'e1 gen_random_uuid() en Supabase\
CREATE EXTENSION IF NOT EXISTS pg_trgm; -- para b\'fasquedas r\'e1pidas ILIKE / trigram\
\
Esquema principal (simplificado, pr\'e1ctico para MVP):\
\
-- Categories\
CREATE TABLE categories (\
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\
  slug text UNIQUE NOT NULL,\
  name text NOT NULL,\
  icon text,\
  created_at timestamptz DEFAULT now()\
);\
\
-- Businesses\
CREATE TABLE businesses (\
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\
  name text NOT NULL,\
  category_id uuid REFERENCES categories(id),\
  location geography(Point,4326) NOT NULL, -- uso de geography para distancias en metros\
  address text,\
  phone text,\
  website text,\
  opening_hours jsonb,\
  photos jsonb, -- array de URLs\
  description text,\
  source text,           -- 'overpass' | 'google' | 'manual'\
  source_place_id text,\
  claimed_by uuid,       -- merchant user id\
  is_featured boolean DEFAULT false,\
  created_at timestamptz DEFAULT now(),\
  updated_at timestamptz DEFAULT now(),\
  last_synced_at timestamptz\
);\
\
-- Optional: users (comerciantes/admin)\
CREATE TABLE users (\
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\
  email text UNIQUE,\
  phone text,\
  name text,\
  role text DEFAULT 'merchant', -- merchant | admin\
  created_at timestamptz DEFAULT now()\
);\
\
-- Claims / verifications\
CREATE TABLE business_claims (\
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\
  business_id uuid REFERENCES businesses(id) ON DELETE CASCADE,\
  user_id uuid REFERENCES users(id),\
  status text DEFAULT 'pending', -- pending | approved | rejected\
  token text,\
  created_at timestamptz DEFAULT now()\
);\
\
\'cdndices recomendados:\
\
-- \'cdndice geoespacial (GiST) para b\'fasquedas por radio (muy importante)\
CREATE INDEX idx_businesses_location ON businesses USING GIST (location);\
\
-- \'cdndice por categor\'eda y por destacado\
CREATE INDEX idx_businesses_category ON businesses (category_id);\
CREATE INDEX idx_businesses_featured ON businesses (is_featured);\
\
-- Full-text / b\'fasqueda por texto (spanish)\
ALTER TABLE businesses ADD COLUMN search_vector tsvector;\
UPDATE businesses SET search_vector = to_tsvector('spanish', coalesce(name,'') || ' ' || coalesce(description,''));\
CREATE INDEX idx_businesses_search_vector ON businesses USING GIN (search_vector);\
\
-- Trigger para mantener search_vector actualizado\
CREATE FUNCTION businesses_search_tsvector() RETURNS trigger AS $$\
begin\
  new.search_vector := to_tsvector('spanish', coalesce(new.name,'') || ' ' || coalesce(new.description,''));\
  return new;\
end\
$$ LANGUAGE plpgsql;\
\
CREATE TRIGGER trg_businesses_search_vector\
BEFORE INSERT OR UPDATE ON businesses\
FOR EACH ROW EXECUTE PROCEDURE businesses_search_tsvector();\
\
\pard\tx860\tx1420\tx1980\tx2540\tx3100\tx3660\tx4220\tx4780\tx5340\tx5900\tx6460\tx7020\li300\sl324\slmult1\partightenfactor0
\cf2 Nota: usamos 
\f5 geography(Point,4326)
\f1  para que las funciones de distancia devuelvan metros y manejen curvatura de la tierra correctamente (m\'e1s preciso para distancias en metros que 
\f5 geometry
\f1 ).\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 2) Consulta PostGIS eficiente: filtro por radio (ST_DWithin) + orden por distancia
\f1\b0\fs28 \cf2 \
\
Patr\'f3n recomendado: 
\f2\b \cf2 usar ST_DWithin para filtrar (usa \'edndices)
\f1\b0 \cf2  y luego 
\f5 \cf2 ST_Distance
\f1 \cf2  para calcular/ordenar distancias exactas. Esto es la pr\'e1ctica recomendada en PostGIS.  \
\
SQL (par\'e1metros: 
\f5 \cf2 :lat
\f1 \cf2 , 
\f5 \cf2 :lng
\f1 \cf2 , 
\f5 \cf2 :radius_m
\f1 \cf2 , 
\f5 \cf2 :category_id
\f1 \cf2 , 
\f5 \cf2 :q
\f1 \cf2 , 
\f5 \cf2 :limit
\f1 \cf2 , 
\f5 \cf2 :offset
\f1 \cf2 ):\
\
WITH params AS (\
  SELECT ST_SetSRID(ST_MakePoint(:lng::double precision, :lat::double precision), 4326)::geography AS user_location\
)\
SELECT\
  b.id,\
  b.name,\
  b.address,\
  b.phone,\
  b.website,\
  b.photos,\
  b.is_featured,\
  ST_Distance(b.location, params.user_location)::numeric(10,2) AS distance_m\
FROM businesses b, params\
WHERE ST_DWithin(b.location, params.user_location, :radius_m::double precision) -- usa \'edndice GiST\
  AND (:category_id IS NULL OR b.category_id = :category_id)\
  AND (\
        :q IS NULL OR\
        b.search_vector @@ plainto_tsquery('spanish', :q)  -- b\'fasqueda full-text r\'e1pida\
      )\
ORDER BY b.is_featured DESC, distance_m ASC\
LIMIT :limit OFFSET :offset;\
\
Explicaci\'f3n r\'e1pida:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 ST_DWithin
\f1  limita los candidatos usando \'edndice espacial (r\'e1pido).  \
	\'95	
\f5 ST_Distance
\f1  calcula la distancia exacta (en metros con 
\f5 geography
\f1 ) y permite ordenar.\
	\'95	Se prioriza 
\f5 is_featured
\f1  para mostrar anuncios pagados primero.\
	\'95	Para texto usamos 
\f5 search_vector @@ plainto_tsquery()
\f1  (m\'e1s eficiente que un ILIKE en tablas grandes).\
\
Alternativa para orden aproximado muy r\'e1pida: operador 
\f5 <#>
\f1  (distance box) para nearest-neighbor ordering en \'edndices; \'fatil si tienes millones de puntos.  \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 3) Ejemplo de endpoint GET /api/v1/businesses
\f1\b0\fs28 \cf2 \
\
Descripci\'f3n:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Query params: 
\f5 lat
\f1  (required), 
\f5 lng
\f1  (required), 
\f5 radius
\f1  (meters, default 3000), 
\f5 category
\f1  (uuid), 
\f5 q
\f1  (search text), 
\f5 page
\f1  (default 1), 
\f5 per_page
\f1  (default 20)\
	\'95	Auth: no requerida para lectura; rate-limit por IP.\
\
Ejemplo de contract (OpenAPI-like summary):\
\
GET /api/v1/businesses?lat=20.95&lng=-89.66&radius=3000&category=...&q=peluqueria&page=1&per_page=20\
\
Response 200:\
\{\
  "total": 123,\
  "page": 1,\
  "per_page": 20,\
  "results": [\
    \{\
      "id": "uuid",\
      "name": "Peluquer\'eda X",\
      "address": "...",\
      "phone": "+52...",\
      "photos": ["https://..."],\
      "is_featured": false,\
      "distance_m": 412.35\
    \},\
    ...\
  ]\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Ejemplo de implementaci\'f3n (pseudoc\'f3digo Node.js + pg):\
\
const params = \{\
  lat: parseFloat(req.query.lat),\
  lng: parseFloat(req.query.lng),\
  radius_m: parseInt(req.query.radius || '3000'),\
  category_id: req.query.category || null,\
  q: req.query.q || null,\
  limit: Math.min(parseInt(req.query.per_page || '20'), 100),\
  offset: (parseInt(req.query.page || '1') - 1) * Math.min(parseInt(req.query.per_page || '20'), 100)\
\};\
\
const sql = `-- (usa el SQL mostrado anteriormente con placeholders $1..$n)`;\
const rows = await db.query(sql, [params.lng, params.lat, params.radius_m, params.category_id, params.q, params.limit, params.offset]);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 4) Seed inicial de Caucel (Overpass template)
\f1\b0\fs28 \cf2 \
\
Usa Overpass para extraer nodes/ways/relations por tags (ejemplo gen\'e9rico \'97 reemplaza 
\f5 \cf2 BBOX
\f1 \cf2  por el bounding box o pol\'edgon de Caucel):\
\
[out:json][timeout:25];\
(\
  node["shop"="bakery"](BBOX);\
  node["shop"="hairdresser"](BBOX);\
  node["amenity"="dentist"](BBOX);\
  node["amenity"="pharmacy"](BBOX);\
  node["shop"="hardware"](BBOX);\
);\
out center;\
\
Luego transforma el JSON a inserts en la tabla 
\f5 \cf2 businesses
\f1 \cf2  (mapea tags a tus 
\f5 \cf2 categories
\f1 \cf2 ). Overpass/Overpass Turbo docs.   \
\

\f4\b\fs44 \cf2 5) Buenas pr\'e1cticas & optimizaciones (resumen pr\'e1ctico)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Filtro primero, c\'e1lculo despu\'e9s:
\f1\b0  siempre 
\f5 ST_DWithin
\f1  \uc0\u8594  
\f5 ST_Distance
\f1  para ordenar.  \
	\'95	
\f2\b Usar geography(Point,4326)
\f1\b0  para distancias en metros (precisi\'f3n global).\
	\'95	
\f2\b \'cdndices:
\f1\b0  GiST sobre 
\f5 location
\f1 , GIN en 
\f5 search_vector
\f1 , trigram para autocompletado si lo necesitas.\
	\'95	
\f2\b Paginaci\'f3n:
\f1\b0  comienzo con 
\f5 LIMIT/OFFSET
\f1  (MVP). Cuando escale, pasar a 
\f2\b keyset pagination
\f1\b0  o cachear queries por tile.\
	\'95	
\f2\b Cache:
\f1\b0  Redis para queries id\'e9nticos (por lat/lng tile, categor\'eda y radio) \'97 evita repetir procesamiento.\
	\'95	
\f2\b Cost control:
\f1\b0  extraer POIs iniciales con Overpass (costo 0). Map tiles: Mapbox free tier es suficiente para pruebas; si necesitas 0 costo, usar tiles OSM + hosting minimal.  \
	\'95	
\f2\b Supabase
\f1\b0  te da DB+Auth+Storage con PostGIS soportado y es ideal para MVP con coste controlado.  \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 6) Plan de trabajo paso a paso (Sprints \'97 MVP = 6 semanas estimado m\'ednimo)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Semana 1 \'97 Dise\'f1o + Preparaci\'f3n\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Definir categor\'edas y UX flow (3 pantallas: inicio, lista, ficha).\
	\'95	Crear proyecto Supabase (activar PostGIS) e instalar extensiones.  
\f1 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	2.	Semana 2 \'97 DB + API b\'e1sica\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Crear tablas, \'edndices y triggers (SQL de arriba).\
	\'95	Endpoints: b\'fasqueda, detalle, creaci\'f3n manual.\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0
\cf2 	3.	Semana 3 \'97 Seed Caucel + limpieza\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Ejecutar Overpass, mapear y subir ~400\'962000 POIs a DB.  
\f1 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	4.	Semana 4 \'97 Frontend web + PWA\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Mockups \uc0\u8594  Next.js PWA con mapa (Mapbox) y listados.\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0
\cf2 	5.	Semana 5 \'97 App m\'f3vil (Expo)\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Implementar b\'fasqueda, mapa y ficha; integraci\'f3n con backend.\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0
\cf2 	6.	Semana 6 \'97 Onboarding comerciantes + pagos\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Flujo de reclamar ficha, verificaci\'f3n por SMS (Twilio / Nexmo) y Stripe para destacar.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 7) Seguimiento / m\'e9tricas m\'ednimas
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	KPIs: clic a llamar, click a direcciones, visitas ficha, n\'famero de fichas reclamadas, ingresos por destacados.\
	\'95	Instrumenta con eventos (Google Analytics / Supabase events).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 Referencias r\'e1pidas (que cit\'e9 arriba)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	ST_DWithin / patr\'f3n filtro+orden en PostGIS.  \
	\'95	Uso de PostGIS en Supabase (extensiones y gu\'eda).  \
	\'95	Mapbox pricing / free-tier (opci\'f3n de mapas con buen free tier).  \
	\'95	Overpass API / Overpass Turbo para extraer POIs de OSM.   \
	\'95	Optimizaci\'f3n/operadores de distancia y ordenamiento (distance box / nearest neighbors).   \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que haga ahora 
\f2\b \cf2 (A)
\f1\b0 \cf2  el SQL listo para copiar/pegar en Supabase (archivo .sql) + triggers y ejemplos de \'edndices (completo), 
\f2\b \cf2 o
\f1\b0 \cf2  
\f2\b \cf2 (B)
\f1\b0 \cf2  te regalo el snippet Node.js + consulta parametrizada lista para usar en Express (con ejemplos de response JSON)?\
Dime cu\'e1l de los dos quieres primero y lo genero inmediatamente (lo dejo listo para pegar).\
\
Iniciemos con la opci\'f3n A y despu\'e9s B\
\
Perfecto, vamos con la 
\f2\b \cf2 Opci\'f3n A
\f1\b0 \cf2 : el 
\f2\b \cf2 archivo .sql completo
\f1\b0 \cf2  para Supabase/Postgres con 
\f2\b \cf2 PostGIS
\f1\b0 \cf2  habilitado, tablas, \'edndices, triggers y b\'fasqueda optimizada.\
Lo dejaremos listo para que lo pegues directamente en el editor SQL de Supabase o en cualquier Postgres con PostGIS habilitado.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 Archivo caucel_directory.sql \'97 Listo para importar\
\
-- ==============================\
-- Directorio Zonal \'97 Caucel, M\'e9rida, Yucat\'e1n\
-- MVP Database Schema (PostGIS + Full Text Search)\
-- ==============================\
\
-- 1. Extensiones necesarias\
CREATE EXTENSION IF NOT EXISTS postgis;\
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";\
CREATE EXTENSION IF NOT EXISTS pg_trgm;\
\
-- ==============================\
-- 2. Categor\'edas\
-- ==============================\
CREATE TABLE categories (\
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\
  slug text UNIQUE NOT NULL,\
  name text NOT NULL,\
  icon text,\
  created_at timestamptz DEFAULT now()\
);\
\
-- \'cdndice para b\'fasqueda r\'e1pida por nombre de categor\'eda\
CREATE INDEX idx_categories_name ON categories (name);\
\
-- ==============================\
-- 3. Negocios\
-- ==============================\
CREATE TABLE businesses (\
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\
  name text NOT NULL,\
  category_id uuid REFERENCES categories(id) ON DELETE SET NULL,\
  location geography(Point,4326) NOT NULL, -- geograf\'eda en 4326 para distancias en metros\
  address text,\
  phone text,\
  website text,\
  opening_hours jsonb,\
  photos jsonb, -- array de URLs\
  description text,\
  source text,           -- 'overpass' | 'google' | 'manual'\
  source_place_id text,  -- ID original en Google/OSM\
  claimed_by uuid,       -- FK a users.id (comerciante)\
  is_featured boolean DEFAULT false,\
  created_at timestamptz DEFAULT now(),\
  updated_at timestamptz DEFAULT now(),\
  last_synced_at timestamptz\
);\
\
-- \'cdndices clave\
CREATE INDEX idx_businesses_location ON businesses USING GIST (location);\
CREATE INDEX idx_businesses_category ON businesses (category_id);\
CREATE INDEX idx_businesses_featured ON businesses (is_featured);\
\
-- ==============================\
-- 4. Usuarios\
-- ==============================\
CREATE TABLE users (\
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\
  email text UNIQUE,\
  phone text,\
  name text,\
  role text DEFAULT 'merchant', -- merchant | admin\
  created_at timestamptz DEFAULT now()\
);\
\
-- ==============================\
-- 5. Reclamos de negocio\
-- ==============================\
CREATE TABLE business_claims (\
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\
  business_id uuid REFERENCES businesses(id) ON DELETE CASCADE,\
  user_id uuid REFERENCES users(id),\
  status text DEFAULT 'pending', -- pending | approved | rejected\
  token text,\
  created_at timestamptz DEFAULT now()\
);\
\
-- ==============================\
-- 6. Full Text Search\
-- ==============================\
ALTER TABLE businesses ADD COLUMN search_vector tsvector;\
\
-- Trigger function para mantener el search_vector\
CREATE OR REPLACE FUNCTION businesses_search_tsvector() RETURNS trigger AS $$\
BEGIN\
  NEW.search_vector :=\
    to_tsvector('spanish',\
      coalesce(NEW.name,'') || ' ' || coalesce(NEW.description,'') || ' ' || coalesce(NEW.address,'')\
    );\
  RETURN NEW;\
END\
$$ LANGUAGE plpgsql;\
\
-- Crear trigger para insertar/actualizar\
CREATE TRIGGER trg_businesses_search_vector\
BEFORE INSERT OR UPDATE ON businesses\
FOR EACH ROW EXECUTE PROCEDURE businesses_search_tsvector();\
\
-- \'cdndice GIN para b\'fasquedas full-text r\'e1pidas\
CREATE INDEX idx_businesses_search_vector ON businesses USING GIN (search_vector);\
\
-- ==============================\
-- 7. Datos iniciales de categor\'edas\
-- ==============================\
INSERT INTO categories (slug, name, icon) VALUES\
('peluqueria', 'Peluquer\'eda', '
\f7\b0 \uc0\u55357 \u56456 
\f4\b '),\
('pasteleria', 'Pasteler\'eda', '
\f7\b0 \uc0\u55356 \u57218 
\f4\b '),\
('taller-mecanico', 'Taller mec\'e1nico', '
\f7\b0 \uc0\u55357 \u56615 
\f4\b '),\
('salon-belleza', 'Sal\'f3n de belleza', '
\f7\b0 \uc0\u55357 \u56455 \u8205 \u9792 \u65039 
\f4\b '),\
('ferreteria', 'Ferreter\'eda', '
\f7\b0 \uc0\u55357 \u57056 \u65039 
\f4\b '),\
('dentista', 'Dentista', '
\f7\b0 \uc0\u55358 \u56759 
\f4\b '),\
('clinica-medica', 'Cl\'ednica m\'e9dica', '
\f7\b0 \uc0\u55356 \u57317 
\f4\b '),\
('farmacia', 'Farmacia', '
\f7\b0 \uc0\u55357 \u56458 
\f4\b ');\
\
-- ==============================\
-- 8. Ejemplo de inserci\'f3n de negocio manual\
-- ==============================\
INSERT INTO businesses\
(name, category_id, location, address, phone, website, description, source)\
VALUES\
(\
  'Peluquer\'eda Ejemplo',\
  (SELECT id FROM categories WHERE slug = 'peluqueria'),\
  ST_GeogFromText('SRID=4326;POINT(-89.661234 20.956789)'),\
  'Calle 10 #123, Caucel, M\'e9rida, Yucat\'e1n',\
  '+529991234567',\
  'https://peluqueria-ejemplo.com',\
  'Cortes y peinados para toda la familia.',\
  'manual'\
);\
\
-- ==============================\
-- 9. Consulta tipo para b\'fasqueda por radio\
-- ==============================\
-- Ejemplo: buscar en 3000m alrededor de un punto\
-- SELECT b.*, ST_Distance(b.location, user_location)::numeric(10,2) AS distance_m\
-- FROM businesses b,\
--      (SELECT ST_SetSRID(ST_MakePoint(-89.66, 20.95), 4326)::geography AS user_location) AS u\
-- WHERE ST_DWithin(b.location, u.user_location, 3000)\
-- ORDER BY b.is_featured DESC, distance_m ASC\
-- LIMIT 20 OFFSET 0;\
\
-- ==============================\
-- FIN DEL ESQUEMA\
-- ==============================\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs28 \cf2 \uc0\u9989 
\f1  
\f2\b \cf2 Qu\'e9 hace este .sql:
\f1\b0 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Habilita 
\f2\b PostGIS
\f1\b0 , 
\f2\b uuid-ossp
\f1\b0  y 
\f2\b pg_trgm
\f1\b0  (para b\'fasquedas m\'e1s r\'e1pidas).\
	\'95	Crea las tablas 
\f5 categories
\f1 , 
\f5 businesses
\f1 , 
\f5 users
\f1 , 
\f5 business_claims
\f1 .\
	\'95	A\'f1ade \'edndices geoespaciales (
\f5 GIST
\f1 ) y de texto (
\f5 GIN
\f1 ).\
	\'95	Configura trigger para 
\f2\b b\'fasqueda full-text en espa\'f1ol
\f1\b0 .\
	\'95	Inserta categor\'edas base (peluquer\'eda, pasteler\'eda, etc.).\
	\'95	Da un ejemplo de negocio de prueba.\
	\'95	Incluye una 
\f2\b consulta comentada
\f1\b0  para b\'fasqueda por radio.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, en la 
\f2\b \cf2 Opci\'f3n B
\f1\b0 \cf2  te preparo 
\f2\b \cf2 el endpoint en Node.js/Express
\f1\b0 \cf2  con:\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Par\'e1metros de entrada.\
	2.	Consulta parametrizada segura (evitando SQL injection).\
	3.	Respuesta en formato JSON lista para consumir en tu app m\'f3vil.\
\
\'bfQuieres que pase de inmediato a esa parte B para que ya tengas API + SQL enlazados?\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1 \cf2 Perfecto \'97 vamos con la 
\f2\b \cf2 Opci\'f3n B
\f1\b0 \cf2 : un endpoint listo para usar en 
\f2\b \cf2 Node.js + Express
\f1\b0 \cf2  que ejecuta la consulta PostGIS segura, parametrizada y optimizada para b\'fasqueda por radio + orden por distancia + paginaci\'f3n.\
Incluyo:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	C\'f3digo completo del endpoint (
\f5 GET /api/v1/businesses
\f1 )\
	\'95	Validaci\'f3n, l\'edmites y protecci\'f3n contra inyecci\'f3n\
	\'95	Ejemplo de request 
\f5 curl
\f1  y ejemplo de respuesta JSON\
	\'95	Opciones de caching y recomendaciones de despliegue (Supabase / Heroku / Vercel)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 1) Instalaci\'f3n m\'ednima (dependencias)\
\
npm init -y\
npm install express pg helmet express-rate-limit express-validator dotenv\
# opcional (cache): npm install ioredis\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs28 \cf2 Crea un 
\f5 \cf2 .env
\f1 \cf2  con:\
\
DATABASE_URL=postgres://user:password@host:5432/dbname\
PORT=3000\
MAX_PER_PAGE=50\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 2) C\'f3digo completo (archivo server.js)
\f1\b0\fs28 \cf2 \
\
Pega esto tal cual y ajusta variables de entorno.\
\
require('dotenv').config();\
const express = require('express');\
const helmet = require('helmet');\
const rateLimit = require('express-rate-limit');\
const \{ Pool \} = require('pg');\
const \{ query, validationResult \} = require('express-validator');\
\
const app = express();\
app.use(helmet());\
app.use(express.json());\
\
// Rate limit b\'e1sico (ajusta seg\'fan necesidad)\
const limiter = rateLimit(\{\
  windowMs: 15 * 60 * 1000, // 15 minutos\
  max: 200, // max requests por IP por window\
  standardHeaders: true,\
  legacyHeaders: false,\
\});\
app.use(limiter);\
\
// Pool de Postgres (usa DATABASE_URL en .env)\
const pool = new Pool(\{\
  connectionString: process.env.DATABASE_URL,\
  // ssl: \{ rejectUnauthorized: false \} // si tu proveedor lo requiere\
\});\
\
const MAX_PER_PAGE = parseInt(process.env.MAX_PER_PAGE || '50', 10);\
\
// Endpoint: GET /api/v1/businesses\
// Query params:\
// lat (required), lng (required), radius (meters, default 3000), category (uuid|null), q (text|null),\
// page (default 1), per_page (default 20)\
app.get(\
  '/api/v1/businesses',\
  // Validaciones b\'e1sicas\
  [\
    query('lat').exists().isFloat(\{ min: -90, max: 90 \}).withMessage('lat inv\'e1lida'),\
    query('lng').exists().isFloat(\{ min: -180, max: 180 \}).withMessage('lng inv\'e1lida'),\
    query('radius').optional().isInt(\{ min: 50, max: 50000 \}).toInt(),\
    query('category').optional().isUUID(),\
    query('q').optional().isString().trim().escape(),\
    query('page').optional().isInt(\{ min: 1 \}).toInt(),\
    query('per_page').optional().isInt(\{ min: 1, max: MAX_PER_PAGE \}).toInt()\
  ],\
  async (req, res) => \{\
    // Validaci\'f3n\
    const errors = validationResult(req);\
    if (!errors.isEmpty()) \{\
      return res.status(400).json(\{ errors: errors.array() \});\
    \}\
\
    try \{\
      const lat = parseFloat(req.query.lat);\
      const lng = parseFloat(req.query.lng);\
      const radius = req.query.radius ? parseInt(req.query.radius, 10) : 3000;\
      const category = req.query.category || null;\
      const q = req.query.q || null;\
      const page = req.query.page ? parseInt(req.query.page, 10) : 1;\
      const per_page = Math.min(req.query.per_page ? parseInt(req.query.per_page, 10) : 20, MAX_PER_PAGE);\
      const offset = (page - 1) * per_page;\
\
      // SQL parametrizado (evita inyecci\'f3n)\
      const sql = `\
      WITH params AS (\
        SELECT ST_SetSRID(ST_MakePoint($2::double precision, $1::double precision), 4326)::geography AS user_location\
      )\
      SELECT\
        b.id,\
        b.name,\
        b.address,\
        b.phone,\
        b.website,\
        b.photos,\
        b.is_featured,\
        ST_Distance(b.location, params.user_location)::numeric(10,2) AS distance_m\
      FROM businesses b, params\
      WHERE ST_DWithin(b.location, params.user_location, $3::double precision)\
        AND ($4::uuid IS NULL OR b.category_id = $4::uuid)\
        AND ($5::text IS NULL OR b.search_vector @@ plainto_tsquery('spanish', $5::text))\
      ORDER BY b.is_featured DESC, distance_m ASC\
      LIMIT $6 OFFSET $7;\
      `;\
\
      const params = [lat, lng, radius, category, q, per_page, offset];\
\
      const client = await pool.connect();\
      try \{\
        const result = await client.query(sql, params);\
\
        // Obtener total (opcional, a\'f1ade costo; alternativa: devolver s\'f3lo hasMore)\
        const countSql = `\
        WITH params AS (\
          SELECT ST_SetSRID(ST_MakePoint($2::double precision, $1::double precision), 4326)::geography AS user_location\
        )\
        SELECT COUNT(*) AS total\
        FROM businesses b, params\
        WHERE ST_DWithin(b.location, params.user_location, $3::double precision)\
          AND ($4::uuid IS NULL OR b.category_id = $4::uuid)\
          AND ($5::text IS NULL OR b.search_vector @@ plainto_tsquery('spanish', $5::text));\
        `;\
        const countRes = await client.query(countSql, [lat, lng, radius, category, q]);\
        const total = parseInt(countRes.rows[0].total, 10);\
\
        // Construir respuesta\
        const response = \{\
          total,\
          page,\
          per_page,\
          results: result.rows.map(r => (\{\
            id: r.id,\
            name: r.name,\
            address: r.address,\
            phone: r.phone,\
            website: r.website,\
            photos: r.photos,\
            is_featured: r.is_featured,\
            distance_m: Number(r.distance_m)\
          \}))\
        \};\
\
        res.json(response);\
      \} finally \{\
        client.release();\
      \}\
    \} catch (err) \{\
      console.error('Error en /api/v1/businesses', err);\
      res.status(500).json(\{ error: 'Error interno del servidor' \});\
    \}\
  \}\
);\
\
const port = process.env.PORT || 3000;\
app.listen(port, () => \{\
  console.log(`API escuchando en http://localhost:$\{port\}`);\
\});\
\

\f4\b\fs34 \cf2 3) Ejemplo curl\
\
curl 'http://localhost:3000/api/v1/businesses?lat=20.955&lng=-89.665&radius=3000&page=1&per_page=10&q=peluqueria'\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\fs30 \cf2 Ejemplo de respuesta (JSON)\
\
\{\
  "total": 42,\
  "page": 1,\
  "per_page": 10,\
  "results": [\
    \{\
      "id": "3f8e5c9a-...-abcd",\
      "name": "Peluquer\'eda Ejemplo",\
      "address": "Calle 10 #123, Caucel, M\'e9rida, Yucat\'e1n",\
      "phone": "+529991234567",\
      "website": "https://peluqueria-ejemplo.com",\
      "photos": ["https://.../1.jpg"],\
      "is_featured": true,\
      "distance_m": 412.35\
    \},\
    ...\
  ]\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\fs34 \cf2 4) Notas, optimizaciones y buenas pr\'e1cticas
\f1\b0\fs28 \cf2 \
\pard\tqr\tx440\tx600\li600\fi-600\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b Par\'e1metros y orden
\f1\b0 : cuidado con 
\f5 ST_MakePoint(lng, lat)
\f1  \'97 orden 
\f2\b longitud, latitud
\f1\b0 . En el SQL de arriba usamos 
\f5 $2
\f1  para lng y 
\f5 $1
\f1  para lat (por eso enviamos 
\f5 [lat, lng, ...]
\f1  en 
\f5 params
\f1 ).\

\f6 	2.	
\f2\b Limit m\'e1ximo
\f1\b0 : impostamos 
\f5 MAX_PER_PAGE
\f1  para evitar consultas pesadas.\

\f6 	3.	
\f2\b Contar total
\f1\b0 : la consulta 
\f5 COUNT(*)
\f1  agrega costo. Para alta escala puedes devolver 
\f5 has_more
\f1  en vez de 
\f5 total
\f1  (m\'e1s barato).\

\f6 	4.	
\f2\b Cache
\f1\b0 :\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Cachear queries por tile/centro+radio en Redis por 30\'96300s reduce carga.\
	\'95	Ejemplo (breve): generar key 
\f5 \cf2 businesses:lat:lng:radius:cat:q:page:per_page
\f1 \cf2 .\
\pard\tqr\tx440\tx600\li600\fi-600\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	5.	
\f2\b Rate-limit y abuse
\f1\b0 : ya incluimos 
\f5 express-rate-limit
\f1 ; a\'f1ade tambi\'e9n API key para partners/consumo intensivo.\

\f6 	6.	
\f2\b Protecci\'f3n de API keys
\f1\b0 : la clave de Mapbox/Google debe mantenerse en frontend con restricciones (dominios / apps) y en backend si usas rutas server-side.\

\f6 	7.	
\f2\b Supabase
\f1\b0 : si usas Supabase (Postgres administrado) puedes ejecutar estas queries con su 
\f5 pg
\f1  connectionString (DATABASE_URL). Supabase ya tiene Auth/Storage integrados.\

\f6 	8.	
\f2\b Geography vs Geometry
\f1\b0 : usamos 
\f5 geography(Point,4326)
\f1  para distancias en metros y precisi\'f3n global.\

\f6 	9.	
\f2\b Index usage
\f1\b0 : 
\f5 ST_DWithin
\f1  es index-friendly (GiST) \'97 aseg\'farate de crear 
\f5 CREATE INDEX ... USING GIST (location)
\f1  (ya lo hicimos en SQL A).\

\f6 	10.	
\f2\b Escalado
\f1\b0 : para millones de puntos considera nearest-neighbor GiST operators (
\f5 <->
\f1 ) o usar tiles + precomputed caches.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 5) Variante con cache (ejemplo corto con Redis)
\f1\b0\fs28 \cf2 \
\
Si quieres, te doy tambi\'e9n el snippet con 
\f5 \cf2 ioredis
\f1 \cf2  para cachear la respuesta (TTL 60s) \'97 lo a\'f1ado si lo deseas.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que:\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Genere tambi\'e9n el endpoint de 
\f5 \cf2 GET /api/v1/businesses/:id
\f1  (detalle completo con fotos y link a reclamar),\

\f6 \cf2 	2.	Te proporcione el snippet para cachear con Redis, o\
	3.	Prepare un peque\'f1o proyecto 
\f5 \cf2 git
\f1  con este 
\f5 server.js
\f1  + 
\f5 caucel_directory.sql
\f1  listo para subir a Supabase + Vercel?\
\
Dime cu\'e1l quieres primero y lo pongo listo.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Avanza opciones 1\
\
Perfecto \'97 vamos con el 
\f2\b \cf2 endpoint GET /api/v1/businesses/:id
\f1\b0 \cf2 . Te doy:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	la 
\f2\b consulta SQL
\f1\b0  optimizada,\
	\'95	el 
\f2\b handler
\f1\b0  listo para pegar en tu 
\f5 server.js
\f1  (mismo estilo que el endpoint anterior),\
	\'95	ejemplo 
\f5 curl
\f1  y respuesta JSON,\
	\'95	y notas r\'e1pidas sobre el flujo de \'93reclamar ficha\'94 (link) y seguridad.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 SQL (consulta optimizada)
\f1\b0\fs28 \cf2 \
\
Esta consulta devuelve la ficha completa, categor\'eda, lat/lng extra\'eddos de 
\f5 \cf2 location
\f1 \cf2 , si la ficha est\'e1 reclamada y la fecha de la \'faltima sincronizaci\'f3n.\
\
-- Par\'e1metro: $1 = business_id (uuid)\
SELECT\
  b.id,\
  b.name,\
  b.address,\
  b.phone,\
  b.website,\
  b.photos,\
  b.opening_hours,\
  b.description,\
  b.is_featured,\
  b.source,\
  b.source_place_id,\
  b.claimed_by IS NOT NULL AS is_claimed,\
  b.last_synced_at,\
  c.id AS category_id,\
  c.name AS category_name,\
  ST_Y(b.location::geometry) AS lat,\
  ST_X(b.location::geometry) AS lng\
FROM businesses b\
LEFT JOIN categories c ON b.category_id = c.id\
WHERE b.id = $1\
LIMIT 1;\
\

\f4\b\fs34 \cf2 Handler Node.js / Express \'97 agrega esto a server.js\
\
const \{ param \} = require('express-validator');\
\
// GET /api/v1/businesses/:id  -> detalle completo + link para reclamar\
app.get(\
  '/api/v1/businesses/:id',\
  [\
    param('id').exists().isUUID().withMessage('id inv\'e1lido')\
  ],\
  async (req, res) => \{\
    const errors = validationResult(req);\
    if (!errors.isEmpty()) return res.status(400).json(\{ errors: errors.array() \});\
\
    const id = req.params.id;\
\
    const sql = `\
      SELECT\
        b.id,\
        b.name,\
        b.address,\
        b.phone,\
        b.website,\
        b.photos,\
        b.opening_hours,\
        b.description,\
        b.is_featured,\
        b.source,\
        b.source_place_id,\
        b.claimed_by IS NOT NULL AS is_claimed,\
        b.last_synced_at,\
        c.id AS category_id,\
        c.name AS category_name,\
        ST_Y(b.location::geometry) AS lat,\
        ST_X(b.location::geometry) AS lng\
      FROM businesses b\
      LEFT JOIN categories c ON b.category_id = c.id\
      WHERE b.id = $1\
      LIMIT 1;\
    `;\
\
    let client;\
    try \{\
      client = await pool.connect();\
      const result = await client.query(sql, [id]);\
\
      if (result.rowCount === 0) \{\
        return res.status(404).json(\{ error: 'Negocio no encontrado' \});\
      \}\
\
      const r = result.rows[0];\
\
      // Construir URLs \'fatiles (direcciones y reclamo)\
      const directions_url = `https://www.google.com/maps/dir/?api=1&destination=$\{r.lat\},$\{r.lng\}`;\
      // Link para reclamar (POST) \'97 front-end puede redirigir a formulario / verificaci\'f3n\
      const claim_url = `$\{req.protocol\}://$\{req.get('host')\}/api/v1/businesses/$\{r.id\}/claim`;\
\
      const response = \{\
        id: r.id,\
        name: r.name,\
        category: r.category_name ? \{ id: r.category_id, name: r.category_name \} : null,\
        address: r.address,\
        phone: r.phone,\
        website: r.website,\
        photos: r.photos || [],\
        opening_hours: r.opening_hours || null,\
        description: r.description,\
        is_featured: r.is_featured,\
        source: r.source,\
        source_place_id: r.source_place_id,\
        is_claimed: r.is_claimed,\
        last_synced_at: r.last_synced_at,\
        location: \{ lat: Number(r.lat), lng: Number(r.lng) \},\
        directions_url,\
        claim_url\
      \};\
\
      return res.json(response);\
    \} catch (err) \{\
      console.error('Error en GET /api/v1/businesses/:id', err);\
      return res.status(500).json(\{ error: 'Error interno del servidor' \});\
    \} finally \{\
      if (client) client.release();\
    \}\
  \}\
);\
\
Ejemplo curl\
\
curl -i "http://localhost:3000/api/v1/businesses/3f8e5c9a-xxxx-xxxx-xxxx-abcdef123456"\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\fs30 \cf2 Ejemplo de respuesta (JSON)\
\
\{\
  "id": "3f8e5c9a-xxxx-xxxx-xxxx-abcdef123456",\
  "name": "Peluquer\'eda Ejemplo",\
  "category": \{ "id": "uuid-cat-1111", "name": "Peluquer\'eda" \},\
  "address": "Calle 10 #123, Caucel, M\'e9rida, Yucat\'e1n",\
  "phone": "+529991234567",\
  "website": "https://peluqueria-ejemplo.com",\
  "photos": ["https://cdn.example.com/1.jpg", "https://cdn.example.com/2.jpg"],\
  "opening_hours": \{ "mon-fri": "09:00-19:00", "sat": "09:00-15:00" \},\
  "description": "Cortes y peinados para toda la familia.",\
  "is_featured": true,\
  "source": "overpass",\
  "source_place_id": "node/123456789",\
  "is_claimed": false,\
  "last_synced_at": "2025-08-01T12:34:56Z",\
  "location": \{ "lat": 20.956789, "lng": -89.661234 \},\
  "directions_url": "https://www.google.com/maps/dir/?api=1&destination=20.956789,-89.661234",\
  "claim_url": "http://localhost:3000/api/v1/businesses/3f8e5c9a-.../claim"\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\fs34 \cf2 Flujo recomendado para \'93Reclamar ficha\'94 (breve)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	El bot\'f3n 
\f2\b \cf2 Reclamar
\f1\b0 \cf2  en la app/web lleva al comerciante a un formulario donde ingresa: nombre, email/phone y prueba (foto, documento).\

\f6 \cf2 	2.	Al enviar, crea un registro en 
\f5 \cf2 business_claims
\f1  con 
\f5 status = 'pending'
\f1  y 
\f5 token
\f1  aleatorio.\

\f6 \cf2 	3.	Env\'eda c\'f3digo de verificaci\'f3n por SMS/WhatsApp (Twilio / MessageBird / 2FA local) o correo con enlace que contiene el 
\f5 \cf2 token
\f1 .\

\f6 \cf2 	4.	Al verificar, administrador puede aprobar autom\'e1ticamente si coinciden datos o revisarlo manualmente (cambiar 
\f5 \cf2 businesses.claimed_by
\f1  y 
\f5 business_claims.status = 'approved'
\f1 ).\

\f6 \cf2 	5.	Opcional: si quieres certificaci\'f3n r\'e1pida, verifica v\'eda llamada autom\'e1tica o enviar OTP a tel\'e9fono en ficha (si existe).\
\
Endpoints \'fatiles a crear luego:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 \cf2 POST /api/v1/businesses/:id/claim
\f1  \'97 crear reclamo (genera token, env\'eda SMS/email).\
	\'95	
\f5 POST /api/v1/business_claims/verify
\f1  \'97 recibir token y completar verificaci\'f3n.\
	\'95	
\f5 GET /api/v1/businesses/:id/claim-status
\f1  \'97 ver estado.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 Notas de seguridad y UX
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Limita intentos de reclamo por IP/phone para evitar abuso. Usa 
\f5 express-rate-limit
\f1 .\
	\'95	Si la ficha tiene un 
\f5 phone
\f1  p\'fablico, el OTP por SMS es la forma m\'e1s simple de comprobar la posesi\'f3n.\
	\'95	Guarda pruebas (fotos/documentos) en Storage (Supabase Storage / S3) y enlaza al claim record.\
	\'95	Env\'eda notificaciones al admin cuando llegan reclamos (email / Slack).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que ahora:\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Te genere el 
\f5 \cf2 POST /api/v1/businesses/:id/claim
\f1  listo para enviar OTP por SMS (incluyendo SQL para 
\f5 business_claims
\f1  insert + token gen + env\'edo con Twilio pseudo-c\'f3digo),\
o 2) Te entregue un peque\'f1o mockup de la pantalla de ficha (mobile) con UX para el bot\'f3n reclamar y flujo de verificaci\'f3n?\
\
Elige 1 o 2 y lo hago ahora.\
1.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Perfecto, vamos a desarrollar 
\f2\b \cf2 Opci\'f3n A - MVP para directorio zonal de negocios en Caucel
\f1\b0 \cf2  usando herramientas sin costo o con costo m\'ednimo, multiplataforma (iOS + Android + Web), siguiendo buenas pr\'e1cticas y pensando en escalabilidad para luego replicarlo en otras zonas de M\'e9rida.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 Fase 1 \'96 Definici\'f3n del alcance y estructura del MVP (Caucel)
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Objetivo principal:
\f1\b0 \cf2  Crear un directorio funcional que permita buscar y ubicar negocios peque\'f1os de Caucel, M\'e9rida, con filtros por categor\'eda y cercan\'eda, y mostrar ubicaci\'f3n en mapa interactivo.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs30 \cf2 1. M\'f3dulos del MVP
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Pantalla de inicio (Home)
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Mapa interactivo centrado en Caucel.\
	\'95	Bot\'f3n para filtrar por categor\'eda.\
	\'95	Bot\'f3n \'93cerca de m\'ed\'94 para mostrar negocios cercanos.\
	\'95	Opci\'f3n de ver lista en formato tarjetas.\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	2.	
\f2\b \cf2 B\'fasqueda y filtros
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Campo de b\'fasqueda por palabra clave.\
	\'95	Filtros por categor\'eda (ejemplo: peluquer\'eda, taller mec\'e1nico, farmacia\'85).\
	\'95	Filtro por distancia (1 km, 3 km, 5 km).\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	3.	
\f2\b \cf2 Ficha de negocio
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Nombre y categor\'eda.\
	\'95	Direcci\'f3n.\
	\'95	Horarios.\
	\'95	Tel\'e9fono (con bot\'f3n de llamada).\
	\'95	WhatsApp (bot\'f3n abrir chat).\
	\'95	Enlace a Google Maps.\
	\'95	Imagen representativa.\
	\'95	Breve descripci\'f3n.\
	\'95	Bot\'f3n \'93Guardar como favorito\'94.\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	4.	
\f2\b \cf2 Mapa interactivo
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Integraci\'f3n con Google Maps API (modo gratuito).\
	\'95	Pines con \'edconos seg\'fan categor\'eda.\
	\'95	Funci\'f3n de geolocalizaci\'f3n para mostrar ubicaci\'f3n actual del usuario.\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	5.	
\f2\b \cf2 Panel de administraci\'f3n (Web)
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Acceso solo para administrador.\
	\'95	CRUD de negocios (crear, leer, actualizar, eliminar).\
	\'95	Subida de fotos.\
	\'95	Asignaci\'f3n de categor\'edas.\
	\'95	Exportaci\'f3n de datos.\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	6.	
\f2\b \cf2 Modo de monetizaci\'f3n inicial
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Publicidad destacada (posici\'f3n preferente en resultados).\
	\'95	Publicidad en banners internos.\
	\'95	Posibilidad de \'93plan premium\'94 para negocios (m\'e1s fotos, video, etc.).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs30 \cf2 2. Stack recomendado (costo m\'ednimo / sin costo)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Frontend m\'f3vil y web:
\f1\b0 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b \cf2 FlutterFlow
\f1\b0 \cf2  (gratis con opci\'f3n de pago si escalamos, permite exportar a iOS, Android y Web).\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Backend y base de datos:
\f1\b0 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b \cf2 Firebase
\f1\b0 \cf2  (Firestore gratis hasta cierto volumen, Auth, Storage para fotos).\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Mapas:
\f1\b0 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b \cf2 Google Maps API
\f1\b0 \cf2  (gratis hasta 28k cargas de mapa/mes).\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Geolocalizaci\'f3n:
\f1\b0 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Integraci\'f3n directa con GPS del m\'f3vil v\'eda FlutterFlow.\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Hosting web:
\f1\b0 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Firebase Hosting (gratis en MVP).\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Panel admin:
\f1\b0 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Tambi\'e9n creado en FlutterFlow, versi\'f3n web protegida con login de administrador.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs30 \cf2 3. Flujo funcional
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Usuario entra a la app
\f1\b0 \cf2  \uc0\u8594  ve mapa de Caucel con pines de negocios.\

\f6 \cf2 	2.	Puede 
\f2\b \cf2 buscar
\f1\b0 \cf2  o 
\f2\b \cf2 filtrar por categor\'eda
\f1\b0 \cf2 .\

\f6 \cf2 	3.	Puede 
\f2\b \cf2 ver lista
\f1\b0 \cf2  o 
\f2\b \cf2 ver en mapa
\f1\b0 \cf2 .\

\f6 \cf2 	4.	Toca un negocio \uc0\u8594  abre ficha con info y botones de contacto.\
	5.	Negocios destacados aparecen primero (monetizaci\'f3n inicial).\
	6.	Panel admin permite agregar o modificar negocios.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs30 \cf2 4. Plan de trabajo paso a paso
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Semana 1 \'96 Configuraci\'f3n inicial
\f1\b0 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Crear proyecto en FlutterFlow.\
	\'95	Configurar Firebase y Firestore.\
	\'95	Activar Google Maps API.\
	\'95	Definir categor\'edas y estructura de base de datos.\
	\'95	Dise\'f1ar prototipo UI en Figma o directamente en FlutterFlow.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Semana 2 \'96 Funcionalidades clave
\f1\b0 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Implementar mapa con pines y geolocalizaci\'f3n.\
	\'95	Crear b\'fasqueda y filtros.\
	\'95	Implementar ficha de negocio.\
	\'95	Crear panel admin web.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Semana 3 \'96 Optimizaci\'f3n y pruebas
\f1\b0 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Integrar favoritos.\
	\'95	Pulir interfaz.\
	\'95	Pruebas en iOS, Android y web.\
	\'95	Ajustar rendimiento.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Semana 4 \'96 Lanzamiento
\f1\b0 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Publicar en web (Firebase Hosting).\
	\'95	Subir a Google Play y App Store.\
	\'95	Activar monetizaci\'f3n (publicidad destacada).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Si quieres, lo siguiente que puedo hacer es 
\f2\b \cf2 dibujarte el esquema visual de la base de datos en Firestore y el diagrama de flujo de navegaci\'f3n de la app
\f1\b0 \cf2 , para que podamos pasar a construcci\'f3n sin confusiones.\
As\'ed definimos qu\'e9 colecciones, campos y relaciones tendr\'e1 desde el d\'eda 1.\
\
\'bfQuieres que te arme ese esquema ya?\
\
Te genere el POST /api/v1/businesses/:id/claim listo para enviar OTP por SMS (incluyendo SQL para business_claims insert + token gen + env\'edo con Twilio pseudo-c\'f3digo),\
\
Perfecto, aqu\'ed tienes un ejemplo 
\f2\b \cf2 listo para usar
\f1\b0 \cf2  de un endpoint 
\f5 \cf2 POST /api/v1/businesses/:id/claim
\f1 \cf2  que:\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Recibe el 
\f2\b \cf2 ID del negocio
\f1\b0 \cf2  a reclamar.\

\f6 \cf2 	2.	Inserta un registro en 
\f5 \cf2 business_claims
\f1 .\

\f6 \cf2 	3.	Genera un token OTP de verificaci\'f3n.\
	4.	Env\'eda el OTP por SMS usando 
\f2\b \cf2 Twilio
\f1\b0 \cf2 .\
\
Voy a dejarlo 
\f2\b \cf2 modular y seguro
\f1\b0 \cf2 , usando Node.js + Express + PostgreSQL (puede adaptarse a MySQL), con pseudoc\'f3digo para Twilio.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 Estructura de la tabla business_claims\
\
CREATE TABLE business_claims (\
    id SERIAL PRIMARY KEY,\
    business_id INT NOT NULL REFERENCES businesses(id),\
    phone_number VARCHAR(20) NOT NULL,\
    otp_code VARCHAR(6) NOT NULL,\
    status VARCHAR(20) DEFAULT 'pending', -- pending, verified, rejected\
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\
);\
\
C\'f3digo del endpoint\
\
// routes/businesses.js\
const express = require('express');\
const router = express.Router();\
const \{ pool \} = require('../db'); // Configuraci\'f3n de PostgreSQL\
const twilio = require('twilio');\
\
// Variables de entorno (Twilio)\
const accountSid = process.env.TWILIO_SID;\
const authToken = process.env.TWILIO_AUTH;\
const twilioClient = twilio(accountSid, authToken);\
const twilioFrom = process.env.TWILIO_FROM; // N\'famero remitente de Twilio\
\
// Funci\'f3n para generar OTP\
function generateOTP(length = 6) \{\
  return Math.floor(100000 + Math.random() * 900000).toString();\
\}\
\
// POST /api/v1/businesses/:id/claim\
router.post('/:id/claim', async (req, res) => \{\
  const businessId = parseInt(req.params.id, 10);\
  const \{ phone_number \} = req.body;\
\
  if (!phone_number) \{\
    return res.status(400).json(\{ error: 'Phone number is required' \});\
  \}\
\
  try \{\
    // 
\f7\b0 1\uc0\u65039 \u8419 
\f4\b  Generar OTP\
    const otpCode = generateOTP();\
\
    // 
\f7\b0 2\uc0\u65039 \u8419 
\f4\b  Insertar registro en base de datos\
    const insertQuery = `\
      INSERT INTO business_claims (business_id, phone_number, otp_code)\
      VALUES ($1, $2, $3)\
      RETURNING id;\
    `;\
    const result = await pool.query(insertQuery, [businessId, phone_number, otpCode]);\
\
    const claimId = result.rows[0].id;\
\
    // 
\f7\b0 3\uc0\u65039 \u8419 
\f4\b  Enviar OTP por SMS usando Twilio\
    await twilioClient.messages.create(\{\
      body: `Tu c\'f3digo de verificaci\'f3n para reclamar el negocio #$\{businessId\} es: $\{otpCode\}`,\
      from: twilioFrom,\
      to: phone_number\
    \});\
\
    // 
\f7\b0 4\uc0\u65039 \u8419 
\f4\b  Respuesta\
    res.status(201).json(\{\
      message: 'Claim request created, OTP sent',\
      claim_id: claimId\
    \});\
\
  \} catch (error) \{\
    console.error('Error creating claim:', error);\
    res.status(500).json(\{ error: 'Internal server error' \});\
  \}\
\});\
\
module.exports = router;\
\
Flujo del endpoint
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Cliente env\'eda 
\f5 \cf2 POST /api/v1/businesses/:id/claim
\f1  con:\
\{\
  "phone_number": "+529991234567"\
\}\

\f6 \cf2 2.	API:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Genera OTP.\
	\'95	Guarda en 
\f5 \cf2 business_claims
\f1 \cf2 .\
	\'95	Env\'eda SMS con Twilio.\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	3.	Respuesta:\
\{\
  "message": "Claim request created, OTP sent",\
  "claim_id": 42\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 Notas importantes
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	El OTP debe tener 
\f2\b tiempo de expiraci\'f3n
\f1\b0  (ej. 5 minutos) \'97 puedes agregar un campo 
\f5 expires_at
\f1  en la tabla.\
	\'95	La validaci\'f3n del OTP ser\'eda otro endpoint 
\f5 POST /api/v1/businesses/claim/:claimId/verify
\f1 .\
	\'95	En producci\'f3n, enmascara parcialmente el n\'famero de tel\'e9fono en las respuestas para seguridad.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, puedo crearte 
\f2\b \cf2 el endpoint de verificaci\'f3n OTP y la l\'f3gica para marcar el negocio como reclamado
\f1\b0 \cf2  en un solo paso, para que tu flujo quede completo de \'93solicitar \uc0\u8594  verificar \u8594  asignar negocio\'94.\
\'bfQuieres que lo arme ahora?\
\
Armalo\
\
Perfecto, vamos a cerrar el flujo completo para que tu app pueda:\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Solicitar el reclamo de un negocio
\f1\b0 \cf2  \uc0\u8594  ya lo tenemos (
\f5 POST /api/v1/businesses/:id/claim
\f1 ).\

\f6 \cf2 	2.	
\f2\b \cf2 Verificar el OTP
\f1\b0 \cf2  \uc0\u8594  lo armamos ahora.\

\f6 \cf2 	3.	
\f2\b \cf2 Marcar el negocio como reclamado
\f1\b0 \cf2  en la tabla 
\f5 businesses
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 1. Ajustar las tablas
\f1\b0\fs28 \cf2 \
\
Agregamos un campo para saber si un negocio est\'e1 reclamado y por qui\'e9n.\
\
ALTER TABLE businesses\
ADD COLUMN claimed_by_phone VARCHAR(20),\
ADD COLUMN claimed_at TIMESTAMP;\
\
ALTER TABLE business_claims\
ADD COLUMN expires_at TIMESTAMP DEFAULT (CURRENT_TIMESTAMP + interval '5 minutes');\
\

\f4\b\fs34 \cf2 2. Endpoint de verificaci\'f3n OTP
\f1\b0\fs28 \cf2 \
\
Archivo: 
\f5 \cf2 routes/businesses.js
\f1 \cf2  (agregamos despu\'e9s del endpoint anterior)\
\
// POST /api/v1/businesses/claim/:claimId/verify\
router.post('/claim/:claimId/verify', async (req, res) => \{\
  const claimId = parseInt(req.params.claimId, 10);\
  const \{ otp_code \} = req.body;\
\
  if (!otp_code) \{\
    return res.status(400).json(\{ error: 'OTP code is required' \});\
  \}\
\
  try \{\
    // 
\f7 1\uc0\u65039 \u8419 
\f1  Buscar el claim en la base de datos\
    const claimQuery = `\
      SELECT * FROM business_claims\
      WHERE id = $1\
    `;\
    const claimResult = await pool.query(claimQuery, [claimId]);\
\
    if (claimResult.rowCount === 0) \{\
      return res.status(404).json(\{ error: 'Claim not found' \});\
    \}\
\
    const claim = claimResult.rows[0];\
\
    // 
\f7 2\uc0\u65039 \u8419 
\f1  Validar estado\
    if (claim.status !== 'pending') \{\
      return res.status(400).json(\{ error: 'Claim already processed' \});\
    \}\
\
    // 
\f7 3\uc0\u65039 \u8419 
\f1  Validar expiraci\'f3n\
    if (new Date() > new Date(claim.expires_at)) \{\
      return res.status(400).json(\{ error: 'OTP expired' \});\
    \}\
\
    // 
\f7 4\uc0\u65039 \u8419 
\f1  Validar OTP\
    if (claim.otp_code !== otp_code) \{\
      return res.status(400).json(\{ error: 'Invalid OTP' \});\
    \}\
\
    // 
\f7 5\uc0\u65039 \u8419 
\f1  Marcar claim como verificado\
    await pool.query(\
      `UPDATE business_claims SET status = 'verified' WHERE id = $1`,\
      [claimId]\
    );\
\
    // 
\f7 6\uc0\u65039 \u8419 
\f1  Actualizar negocio como reclamado\
    await pool.query(\
      `UPDATE businesses\
       SET claimed_by_phone = $1, claimed_at = NOW()\
       WHERE id = $2`,\
      [claim.phone_number, claim.business_id]\
    );\
\
    res.status(200).json(\{\
      message: 'Business successfully claimed',\
      business_id: claim.business_id\
    \});\
\
  \} catch (error) \{\
    console.error('Error verifying claim:', error);\
    res.status(500).json(\{ error: 'Internal server error' \});\
  \}\
\});\
\

\f4\b\fs34 \cf2 3. Flujo final
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 A. Solicitud de reclamo\
\
POST /api/v1/businesses/12/claim\
Body: \{ "phone_number": "+529991234567" \}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0 \cf2 Respuesta:\
\
\{\
  "message": "Claim request created, OTP sent",\
  "claim_id": 42\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 B. Verificaci\'f3n OTP\
\
POST /api/v1/businesses/claim/42/verify\
Body: \{ "otp_code": "123456" \}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0 \cf2 Respuesta:\
\
\{\
  "message": "Business successfully claimed",\
  "business_id": 12\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 4. Buenas pr\'e1cticas a\'f1adidas
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	OTP expira en 5 min (
\f5 expires_at
\f1 ).\
	\'95	Si el usuario falla el OTP m\'e1s de 3 veces \uc0\u8594  bloquear claim.\
	\'95	Twilio puede reemplazarse por 
\f2\b MessageBird
\f1\b0  o 
\f2\b AWS SNS
\f1\b0  si quieres menor costo.\
	\'95	Evitar exponer el n\'famero del due\'f1o del negocio en las respuestas.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, puedo crearte 
\f2\b \cf2 el script SQL inicial con las tablas businesses y business_claims listas para este flujo
\f1\b0 \cf2  para que puedas ejecutar y ya tengas la base montada en tu MVP.\
As\'ed ma\'f1ana ya podr\'edas levantar la API y probar en Postman el reclamo y la verificaci\'f3n.\
\
\'bfQuieres que lo haga? Adelante\
\
Perfecto, aqu\'ed tienes el 
\f2\b \cf2 script SQL completo
\f1\b0 \cf2  para tu MVP del directorio zonal en Caucel con reclamo de negocios y verificaci\'f3n por OTP v\'eda SMS.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Script de creaci\'f3n de tablas inicial
\f1\b0\fs28 \cf2 \
\
Archivo sugerido: 
\f5 \cf2 db/init.sql\
\
-- ========================\
-- TABLA PRINCIPAL DE NEGOCIOS\
-- ========================\
CREATE TABLE businesses (\
    id SERIAL PRIMARY KEY,\
    name VARCHAR(255) NOT NULL,\
    category VARCHAR(100) NOT NULL,\
    address TEXT,\
    latitude DECIMAL(10,8),\
    longitude DECIMAL(11,8),\
    phone VARCHAR(20),\
    website VARCHAR(255),\
    claimed_by_phone VARCHAR(20),\
    claimed_at TIMESTAMP,\
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\
);\
\
-- ========================\
-- TABLA DE CLAIMS (RECLAMOS DE NEGOCIOS)\
-- ========================\
CREATE TABLE business_claims (\
    id SERIAL PRIMARY KEY,\
    business_id INT NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,\
    phone_number VARCHAR(20) NOT NULL,\
    otp_code VARCHAR(6) NOT NULL,\
    status VARCHAR(20) DEFAULT 'pending', -- pending, verified, failed\
    expires_at TIMESTAMP DEFAULT (CURRENT_TIMESTAMP + interval '5 minutes'),\
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\
);\
\
-- ========================\
-- \'cdNDICES PARA RENDIMIENTO\
-- ========================\
CREATE INDEX idx_business_category ON businesses(category);\
CREATE INDEX idx_business_location ON businesses(latitude, longitude);\
CREATE INDEX idx_claim_business ON business_claims(business_id);\
CREATE INDEX idx_claim_status ON business_claims(status);\
\
-- ========================\
-- DATOS DE EJEMPLO INICIALES PARA CAUCEL\
-- ========================\
INSERT INTO businesses (name, category, address, latitude, longitude, phone, website)\
VALUES\
('Peluquer\'eda Estilo Caucel', 'Peluquer\'eda', 'Calle 23 #45, Caucel, M\'e9rida, Yucat\'e1n', 21.016452, -89.693215, '+529991111111', NULL),\
('Pasteler\'eda Dulce Sabor', 'Pasteler\'eda', 'Calle 45 #12, Caucel, M\'e9rida, Yucat\'e1n', 21.017123, -89.695879, '+529992222222', NULL),\
('Taller Mec\'e1nico Caucel Motors', 'Taller Mec\'e1nico', 'Calle 19 #8, Caucel, M\'e9rida, Yucat\'e1n', 21.015987, -89.692345, '+529993333333', NULL),\
('Farmacia Salud Total', 'Farmacia', 'Calle 30 #100, Caucel, M\'e9rida, Yucat\'e1n', 21.018654, -89.694120, '+529994444444', NULL);\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Flujo para iniciar la base
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Guarda este archivo como 
\f5 \cf2 init.sql
\f1 .\

\f6 \cf2 	2.	Si usas 
\f2\b \cf2 PostgreSQL
\f1\b0 \cf2 :\
\
psql -U tu_usuario -d tu_base -f init.sql\
\

\f6 \cf2 3.	Si usas 
\f2\b \cf2 Supabase
\f1\b0 \cf2  (gratis y recomendado para MVP), basta con pegar este script en su SQL Editor.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Integraci\'f3n con el c\'f3digo del reclamo
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	El endpoint 
\f5 POST /api/v1/businesses/:id/claim
\f1  insertar\'e1 en 
\f5 business_claims
\f1 .\
	\'95	El endpoint 
\f5 POST /api/v1/businesses/claim/:claimId/verify
\f1  actualizar\'e1 
\f5 status
\f1  y 
\f5 businesses.claimed_by_phone
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 4\uc0\u65039 \u8419 
\f4\b  MVP funcionando
\f1\b0\fs28 \cf2 \
\
Con esto ya tienes:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Negocios iniciales cargados para 
\f2\b Caucel
\f1\b0 .\
	\'95	Estructura lista para b\'fasqueda por categor\'eda y por ubicaci\'f3n.\
	\'95	Sistema de reclamo seguro con OTP por SMS.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Si quieres, puedo crearte 
\f2\b \cf2 el archivo Node.js completo
\f1\b0 \cf2  con:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Express.\
	\'95	Conexi\'f3n a PostgreSQL.\
	\'95	Endpoints 
\f5 claim
\f1  y 
\f5 verify
\f1  listos.\
	\'95	Simulaci\'f3n de env\'edo OTP con Twilio o consola.\
\
As\'ed ya podr\'edas levantar el servidor y probarlo con Postman hoy mismo.\
\'bfQuieres que lo arme? Si\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Listo, te voy a armar un 
\f2\b \cf2 servidor Node.js funcional
\f1\b0 \cf2  con Express, PostgreSQL y Twilio (para enviar OTP por SMS) que implemente:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b POST /api/v1/businesses/:id/claim
\f1\b0  \uc0\u8594  genera y env\'eda OTP por SMS.\
	\'95	
\f2\b POST /api/v1/businesses/claim/:claimId/verify
\f1\b0  \uc0\u8594  verifica el OTP y marca el negocio como reclamado.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Estructura de carpetas\
\
/directorio-caucel\
  
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  server.js\
  
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  db.js\
  
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  .env\
  
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  package.json\
\

\f7\b0 2\uc0\u65039 \u8419 
\f4\b  package.json\
\
\{\
  "name": "directorio-caucel",\
  "version": "1.0.0",\
  "description": "Directorio de negocios zonal - MVP Caucel",\
  "main": "server.js",\
  "scripts": \{\
    "start": "node server.js",\
    "dev": "nodemon server.js"\
  \},\
  "dependencies": \{\
    "dotenv": "^16.0.3",\
    "express": "^4.18.2",\
    "pg": "^8.8.0",\
    "twilio": "^4.18.0",\
    "body-parser": "^1.20.2"\
  \},\
  "devDependencies": \{\
    "nodemon": "^3.0.1"\
  \}\
\}\
\

\f7\b0 3\uc0\u65039 \u8419 
\f4\b  .env
\f1\b0\fs28 \cf2 \
\
Aqu\'ed pones tus credenciales de 
\f2\b \cf2 PostgreSQL
\f1\b0 \cf2  y 
\f2\b \cf2 Twilio
\f1\b0 \cf2 .\
\
# PostgreSQL\
DB_USER=postgres\
DB_PASSWORD=tu_password\
DB_HOST=localhost\
DB_PORT=5432\
DB_NAME=directorio_caucel\
\
# Twilio\
TWILIO_ACCOUNT_SID=xxxxxxxxxxxxxxxxxxxx\
TWILIO_AUTH_TOKEN=xxxxxxxxxxxxxxxxxxxx\
TWILIO_PHONE_NUMBER=+1xxxxxxxxxx\
\

\f7\fs34 \cf2 4\uc0\u65039 \u8419 
\f4\b  db.js (Conexi\'f3n a PostgreSQL)\
\
const \{ Pool \} = require('pg');\
require('dotenv').config();\
\
const pool = new Pool(\{\
  user: process.env.DB_USER,\
  host: process.env.DB_HOST,\
  database: process.env.DB_NAME,\
  password: process.env.DB_PASSWORD,\
  port: process.env.DB_PORT,\
\});\
\
module.exports = pool;\
\

\f7\b0 5\uc0\u65039 \u8419 
\f4\b  server.js\
\
const express = require('express');\
const bodyParser = require('body-parser');\
const pool = require('./db');\
const twilio = require('twilio');\
require('dotenv').config();\
\
const app = express();\
app.use(bodyParser.json());\
\
const twilioClient = twilio(\
  process.env.TWILIO_ACCOUNT_SID,\
  process.env.TWILIO_AUTH_TOKEN\
);\
\
/**\
 * 
\f7\b0 1\uc0\u65039 \u8419 
\f4\b  Generar OTP y enviar SMS\
 */\
app.post('/api/v1/businesses/:id/claim', async (req, res) => \{\
  const businessId = req.params.id;\
  const \{ phoneNumber \} = req.body;\
\
  if (!phoneNumber) \{\
    return res.status(400).json(\{ error: 'Se requiere el n\'famero de tel\'e9fono' \});\
  \}\
\
  try \{\
    const business = await pool.query('SELECT * FROM businesses WHERE id = $1', [businessId]);\
    if (business.rows.length === 0) \{\
      return res.status(404).json(\{ error: 'Negocio no encontrado' \});\
    \}\
\
    const otp = Math.floor(100000 + Math.random() * 900000).toString();\
\
    const claimResult = await pool.query(\
      `INSERT INTO business_claims (business_id, phone_number, otp_code)\
       VALUES ($1, $2, $3) RETURNING id`,\
      [businessId, phoneNumber, otp]\
    );\
\
    const claimId = claimResult.rows[0].id;\
\
    // Enviar SMS con Twilio\
    await twilioClient.messages.create(\{\
      body: `Tu c\'f3digo de verificaci\'f3n para reclamar el negocio es: $\{otp\}`,\
      from: process.env.TWILIO_PHONE_NUMBER,\
      to: phoneNumber\
    \});\
\
    res.json(\{ message: 'OTP enviado por SMS', claimId \});\
\
  \} catch (err) \{\
    console.error(err);\
    res.status(500).json(\{ error: 'Error interno del servidor' \});\
  \}\
\});\
\
/**\
 * 
\f7\b0 2\uc0\u65039 \u8419 
\f4\b  Verificar OTP\
 */\
app.post('/api/v1/businesses/claim/:claimId/verify', async (req, res) => \{\
  const claimId = req.params.claimId;\
  const \{ otp \} = req.body;\
\
  if (!otp) \{\
    return res.status(400).json(\{ error: 'Se requiere el c\'f3digo OTP' \});\
  \}\
\
  try \{\
    const claim = await pool.query('SELECT * FROM business_claims WHERE id = $1', [claimId]);\
\
    if (claim.rows.length === 0) \{\
      return res.status(404).json(\{ error: 'Reclamo no encontrado' \});\
    \}\
\
    const claimData = claim.rows[0];\
\
    if (claimData.status === 'verified') \{\
      return res.status(400).json(\{ error: 'Este reclamo ya fue verificado' \});\
    \}\
\
    const now = new Date();\
    if (new Date(claimData.expires_at) < now) \{\
      return res.status(400).json(\{ error: 'El c\'f3digo OTP ha expirado' \});\
    \}\
\
    if (claimData.otp_code !== otp) \{\
      return res.status(400).json(\{ error: 'C\'f3digo OTP incorrecto' \});\
    \}\
\
    // Marcar como verificado\
    await pool.query('UPDATE business_claims SET status = $1 WHERE id = $2', ['verified', claimId]);\
\
    // Actualizar negocio como reclamado\
    await pool.query(\
      'UPDATE businesses SET claimed_by_phone = $1, claimed_at = NOW() WHERE id = $2',\
      [claimData.phone_number, claimData.business_id]\
    );\
\
    res.json(\{ message: 'Negocio reclamado con \'e9xito' \});\
\
  \} catch (err) \{\
    console.error(err);\
    res.status(500).json(\{ error: 'Error interno del servidor' \});\
  \}\
\});\
\
// Puerto del servidor\
const PORT = process.env.PORT || 3000;\
app.listen(PORT, () => console.log(`Servidor corriendo en puerto $\{PORT\}`));\
\

\f7\b0 6\uc0\u65039 \u8419 
\f4\b  C\'f3mo correrlo\
\
# 1. Instalar dependencias\
npm install\
\
# 2. Crear base de datos y tablas (usa el script init.sql que ya te pas\'e9)\
psql -U postgres -d directorio_caucel -f init.sql\
\
# 3. Correr en modo desarrollo\
npm run dev\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs28 \cf2 Con esto ya puedes:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Enviar un 
\f2\b POST
\f1\b0  a 
\f5 /api/v1/businesses/:id/claim
\f1  con 
\f5 \{ "phoneNumber": "+52999XXXXXXX" \}
\f1  para recibir un OTP por SMS.\
	\'95	Enviar un 
\f2\b POST
\f1\b0  a 
\f5 /api/v1/businesses/claim/:claimId/verify
\f1  con 
\f5 \{ "otp": "123456" \}
\f1  para validar.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, puedo armarte 
\f2\b \cf2 tambi\'e9n la parte de b\'fasqueda por tipo de negocio + mapa interactivo con LeafletJS y filtros por distancia
\f1\b0 \cf2  para integrarlo en la web y app m\'f3vil usando 
\f2\b \cf2 React Native + Expo
\f1\b0 \cf2 .\
\'bfQuieres que pase a esa parte? Adelante\
\
Perfecto \'97 vamos a la 
\f2\b \cf2 parte de b\'fasqueda por tipo de negocio + mapa interactivo
\f1\b0 \cf2  y te doy dos implementaciones listas para usar:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Web (React + Leaflet + Leaflet.markercluster)
\f1\b0  \'97 coste 0 usando OpenStreetMap tiles. Ideal para el panel p\'fablico/PWA.\
	\'95	
\f2\b M\'f3vil (React Native + Expo + react-native-maps)
\f1\b0  \'97 para iOS/Android; usa Google Maps o Mapbox seg\'fan prefieras (explico c\'f3mo configurarlo con bajo coste).\
\
Ambas implementaciones consumen tu API 
\f5 GET /api/v1/businesses?lat=\{lat\}&lng=\{lng\}&radius=\{m\}&category=\{uuid\}&q=\{q\}&page=\{n\}&per_page=\{m\}
\f1  que ya tienes.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 1) Web: React + Leaflet (PWA) \'97 mapa interactivo + filtros por categor\'eda y distancia
\f1\b0\fs28 \cf2 \
\
Instalaci\'f3n m\'ednima:\
\
npx create-react-app caucel-web\
cd caucel-web\
npm install leaflet react-leaflet leaflet.markercluster axios rc-slider\
# tambi\'e9n copia los assets CSS de leaflet en public/index.html\
\
Archivo 
\f5 \cf2 src/App.js
\f1 \cf2  (simplificado, listo para probar):\
\
import React, \{ useEffect, useState, useRef \} from 'react';\
import axios from 'axios';\
import \{ MapContainer, TileLayer, Marker, Popup, Circle \} from 'react-leaflet';\
import 'leaflet/dist/leaflet.css';\
import L from 'leaflet';\
import 'leaflet.markercluster';\
import Slider from 'rc-slider';\
import 'rc-slider/assets/index.css';\
import './App.css';\
\
// Icon fallback (fix default icon url issue with CRA)\
delete L.Icon.Default.prototype._getIconUrl;\
L.Icon.Default.mergeOptions(\{\
  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\
  iconUrl: require('leaflet/dist/images/marker-icon.png'),\
  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\
\});\
\
const API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:3000';\
\
function App() \{\
  const [position, setPosition] = useState(\{ lat: 21.017, lng: -89.694 \}); // centro Caucel aproximado\
  const [radius, setRadius] = useState(3000);\
  const [categories, setCategories] = useState([]);\
  const [category, setCategory] = useState(null);\
  const [q, setQ] = useState('');\
  const [results, setResults] = useState([]);\
  const mapRef = useRef();\
\
  useEffect(() => \{\
    // fetch categories - si no tienes endpoint, hardcodea\
    setCategories([\
      \{ id: null, name: 'Todas' \},\
      \{ id: 'peluqueria', name: 'Peluquer\'eda' \},\
      \{ id: 'pasteleria', name: 'Pasteler\'eda' \},\
      \{ id: 'taller-mecanico', name: 'Taller mec\'e1nico' \},\
      \{ id: 'farmacia', name: 'Farmacia' \}\
    ]);\
  \}, []);\
\
  async function fetchResults(lat = position.lat, lng = position.lng) \{\
    try \{\
      const params = \{\
        lat, lng, radius,\
        q: q || undefined,\
        category: category || undefined,\
        per_page: 100\
      \};\
      const resp = await axios.get(`$\{API_BASE\}/api/v1/businesses`, \{ params \});\
      setResults(resp.data.results || []);\
    \} catch (err) \{\
      console.error('Error fetch businesses', err);\
      alert('Error al obtener negocios');\
    \}\
  \}\
\
  // obtener ubicaci\'f3n del usuario\
  function locateMe() \{\
    if (!navigator.geolocation) return alert('Geolocalizaci\'f3n no soportada');\
    navigator.geolocation.getCurrentPosition((p) => \{\
      const lat = p.coords.latitude, lng = p.coords.longitude;\
      setPosition(\{ lat, lng \});\
      // centrar mapa\
      const map = mapRef.current;\
      if (map) map.setView([lat, lng], 15);\
      fetchResults(lat, lng);\
    \}, () => alert('No se pudo obtener la ubicaci\'f3n'));\
  \}\
\
  useEffect(() => \{ fetchResults(); \}, [radius, category]);\
\
  return (\
    <div className="app">\
      <header className="topbar">\
        <h1>Directorio Caucel</h1>\
        <div className="controls">\
          <input placeholder="Buscar..." value=\{q\} onChange=\{e => setQ(e.target.value)\} />\
          <button onClick=\{() => fetchResults()\}>Buscar</button>\
          <button onClick=\{locateMe\}>Cerca de m\'ed</button>\
          <select value=\{category || ''\} onChange=\{e => setCategory(e.target.value || null)\}>\
            \{categories.map(c => <option key=\{c.id || 'all'\} value=\{c.id || ''\}>\{c.name\}</option>)\}\
          </select>\
          <div style=\{\{width:200\}\}>\
            <label>Radio: \{radius\} m</label>\
            <Slider min=\{500\} max=\{10000\} value=\{radius\} onChange=\{v => setRadius(v)\} />\
          </div>\
        </div>\
      </header>\
\
      <main>\
        <div className="mapwrap">\
          <MapContainer center=\{[position.lat, position.lng]\} zoom=\{14\} style=\{\{height:'70vh'\}\} whenCreated=\{map => mapRef.current = map\}>\
            <TileLayer\
              attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'\
              url="https://\{s\}.tile.openstreetmap.org/\{z\}/\{x\}/\{y\}.png"\
            />\
\
            \{/* c\'edrculo de b\'fasqueda */\}\
            <Circle center=\{[position.lat, position.lng]\} radius=\{radius\} />\
\
            \{results.map(b => (\
              <Marker key=\{b.id\} position=\{[b.lat || b.location?.lat || position.lat, b.lng || b.location?.lng || position.lng]\}>\
                <Popup>\
                  <strong>\{b.name\}</strong><br/>\
                  \{b.address\}<br/>\
                  <a href=\{`tel:$\{b.phone\}`\}>Llamar</a> \'95 <a href=\{`https://www.google.com/maps/dir/?api=1&destination=$\{b.location?.lat || b.lat\},$\{b.location?.lng || b.lng\}`\} target="_blank" rel="noreferrer">C\'f3mo llegar</a>\
                </Popup>\
              </Marker>\
            ))\}\
          </MapContainer>\
        </div>\
\
        <aside className="list">\
          <h2>\{results.length\} resultados</h2>\
          \{results.map(r => (\
            <div key=\{r.id\} className="card">\
              <h3>\{r.name\}</h3>\
              <p>\{r.address\}</p>\
              <p><strong>\{r.distance_m?.toFixed(0)\} m</strong></p>\
              <p><a href=\{`tel:$\{r.phone\}`\}>Llamar</a> \'95 <a href=\{`/business/$\{r.id\}`\}>Ver ficha</a></p>\
            </div>\
          ))\}\
        </aside>\
      </main>\
    </div>\
  );\
\}\
\
export default App;\
\
Puntos importantes:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Uso de 
\f2\b OpenStreetMap tiles
\f1\b0  (coste 0). Si el tr\'e1fico sube, considera Mapbox o tiles propios.\
	\'95	
\f5 results
\f1  debe incluir 
\f5 lat
\f1  y 
\f5 lng
\f1  en cada registro (si tu backend devuelve 
\f5 location
\f1  como 
\f5 \{lat,lng\}
\f1 , ad\'e1ptalo).\
	\'95	A\'f1ade clustering con 
\f5 leaflet.markercluster
\f1  para muchos pines.\
	\'95	Mejora: cachear respuestas en backend o en frontend (localStorage) para mejorar UX.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 2) M\'f3vil: React Native + Expo + react-native-maps
\f1\b0\fs28 \cf2 \
\
Instalaci\'f3n (Expo bare workflow o managed):\
\
npx create-expo-app caucel-mobile\
cd caucel-mobile\
npx expo install react-native-maps\
npm install axios\
\
Archivo 
\f5 \cf2 App.js
\f1 \cf2  (simplificado):\
\
import React, \{ useEffect, useState, useRef \} from 'react';\
import \{ View, Text, Button, TextInput, FlatList, TouchableOpacity, Platform \} from 'react-native';\
import MapView, \{ Marker, Circle \} from 'react-native-maps';\
import * as Location from 'expo-location';\
import axios from 'axios';\
\
const API_BASE = 'http://your.api.server'; // cambia por tu endpoint p\'fablico\
\
export default function App() \{\
  const [region, setRegion] = useState(\{\
    latitude: 21.017, longitude: -89.694, latitudeDelta: 0.02, longitudeDelta: 0.02\
  \});\
  const [radius, setRadius] = useState(3000);\
  const [results, setResults] = useState([]);\
  const [q, setQ] = useState('');\
  const [category, setCategory] = useState(null);\
  const mapRef = useRef();\
\
  useEffect(() => \{ requestLocationPermission(); fetchResults(); \}, []);\
\
  async function requestLocationPermission() \{\
    const \{ status \} = await Location.requestForegroundPermissionsAsync();\
    if (status !== 'granted') \{\
      console.log('Permiso de ubicaci\'f3n denegado');\
      return;\
    \}\
    const loc = await Location.getCurrentPositionAsync(\{\});\
    const lat = loc.coords.latitude, lng = loc.coords.longitude;\
    setRegion(r => (\{ ...r, latitude: lat, longitude: lng \}));\
    fetchResults(lat, lng);\
  \}\
\
  async function fetchResults(lat = region.latitude, lng = region.longitude) \{\
    try \{\
      const resp = await axios.get(`$\{API_BASE\}/api/v1/businesses`, \{\
        params: \{ lat, lng, radius, q: q || undefined, category: category || undefined, per_page: 100 \}\
      \});\
      setResults(resp.data.results || []);\
    \} catch (err) \{\
      console.error(err);\
    \}\
  \}\
\
  return (\
    <View style=\{\{flex:1\}\}>\
      <MapView style=\{\{flex:1\}\} region=\{region\} ref=\{mapRef\}>\
        <Circle center=\{\{latitude: region.latitude, longitude: region.longitude\}\} radius=\{radius\} />\
        \{results.map(b => (\
          <Marker key=\{b.id\} coordinate=\{\{ latitude: b.location?.lat || b.lat, longitude: b.location?.lng || b.lng \}\} title=\{b.name\} description=\{b.address\} />\
        ))\}\
      </MapView>\
\
      <View style=\{\{position:'absolute', top:40, left:10, right:10\}\}>\
        <TextInput placeholder="Buscar..." value=\{q\} onChangeText=\{setQ\} style=\{\{backgroundColor:'#fff', padding:8, borderRadius:8\}\} />\
        <View style=\{\{flexDirection:'row', marginTop:8, justifyContent:'space-between'\}\}>\
          <Button title="Buscar" onPress=\{() => fetchResults()\} />\
          <Button title="Cerca de m\'ed" onPress=\{requestLocationPermission\} />\
        </View>\
      </View>\
\
      <View style=\{\{height:220\}\}>\
        <FlatList\
          data=\{results\}\
          keyExtractor=\{item => item.id\}\
          renderItem=\{(\{item\}) => (\
            <TouchableOpacity style=\{\{padding:10, borderBottomWidth:1\}\} onPress=\{() => \{\
              // centrar mapa en el negocio\
              mapRef.current.animateToRegion(\{ latitude: item.location.lat, longitude: item.location.lng, latitudeDelta:0.005, longitudeDelta:0.005 \}, 500);\
            \}\}>\
              <Text style=\{\{fontWeight:'bold'\}\}>\{item.name\}</Text>\
              <Text>\{item.address\}</Text>\
              <Text>\{item.distance_m ? `$\{Math.round(item.distance_m)\} m` : ''\}</Text>\
            </TouchableOpacity>\
          )\}\
        />\
      </View>\
\
    </View>\
  );\
\}\
\
Notas m\'f3viles:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Para producci\'f3n, configura 
\f2\b Google Maps API key
\f1\b0  o Mapbox token en 
\f5 app.json
\f1 /native config. Google tiene free tier suficiente para MVP.\
	\'95	Pide permiso de ubicaci\'f3n al usuario y maneja denegaci\'f3n graceful.\
	\'95	Para llamadas/WhatsApp desde la app, usa 
\f5 Linking.openURL('tel:...')
\f1  o 
\f5 Linking.openURL('https://wa.me/521...')
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 3) Integraci\'f3n Backend \uc0\u8596  Frontend: detalles pr\'e1cticos
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Formato de respuesta
\f1\b0 \cf2 : aseg\'farate que 
\f5 GET /api/v1/businesses
\f1  devuelva lat/lng o 
\f5 location: \{ lat, lng \}
\f1  en cada 
\f5 result
\f1 . Ejemplo:\
\
\{\
  "id":"uuid",\
  "name":"Peluquer\'eda X",\
  "address":"...",\
  "phone":"+52...",\
  "is_featured": false,\
  "distance_m": 412.35,\
  "location": \{ "lat": 21.017123, "lng": -89.695879 \}\
\}\
\

\f6 \cf2 2.	
\f2\b \cf2 Control de l\'edmites
\f1\b0 \cf2 : en frontend limita 
\f5 per_page
\f1  a 100 como m\'e1ximo; usa clustering si hay muchos puntos.\

\f6 \cf2 	3.	
\f2\b \cf2 Cache
\f1\b0 \cf2 : si la API es lenta, cachea por 
\f5 lat/lng tile + radius + category
\f1  por 30-120s (Redis o CDN). Reduce carga de tile servers con cach\'e9 del lado cliente (localStorage).\

\f6 \cf2 	4.	
\f2\b \cf2 Mapa y cr\'e9dito OSM
\f1\b0 \cf2 : cuando uses OpenStreetMap tiles, mant\'e9n la atribuci\'f3n en el footer del mapa (requerido por la licencia).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 4) UX recomendada (r\'e1pida)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Mostrar bot\'f3n \'93Cerca de m\'ed\'94 prominente.\
	\'95	Lista de categor\'edas con iconos en chips (quick filter).\
	\'95	Prioriza 
\f5 is_featured
\f1  en resultados (lo maneja el backend).\
	\'95	Ficha del negocio con CTA claros: Llamar, WhatsApp, C\'f3mo llegar, Reclamar.\
	\'95	Para comercios: enlaza al flujo de reclamo OTP que ya implementaste.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 5) Siguientes pasos pr\'e1cticos (elige uno)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Te genero un 
\f2\b \cf2 proyecto Git
\f1\b0 \cf2  (repos) con:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Backend (server.js + endpoints de claims + b\'fasqueda)\
	\'95	Web (React + Leaflet)\
	\'95	Mobile (Expo skeleton)\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	2.	Implementar 
\f2\b \cf2 clustering
\f1\b0 \cf2  en web (detalle y snippet con 
\f5 leaflet.markercluster
\f1 ).\

\f6 \cf2 	3.	Configurar 
\f2\b \cf2 Google Maps
\f1\b0 \cf2  para la app m\'f3vil (pasos y 
\f5 app.json
\f1 /AndroidManifest).\

\f6 \cf2 	4.	Implementar 
\f2\b \cf2 cache Redis
\f1\b0 \cf2  en backend (snippet).\
\
\'bfQu\'e9 prefieres que haga ahora? \'bf1, 2, 3 o 4? 1\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Perfecto, vamos a estructurar el 
\f2\b \cf2 proyecto GIT
\f1\b0 \cf2  para que tengas el backend del directorio zonal listo con el flujo de reclamo de negocios v\'eda OTP.\
Usaremos 
\f2\b \cf2 Node.js + Express + PostgreSQL (Supabase opcional)
\f1\b0 \cf2  y mantendremos todo limpio para que despu\'e9s puedas escalarlo a otras zonas de M\'e9rida.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Estructura del proyecto\
\
directorio-zonal/\
\uc0\u9474 \

\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  src/\
\uc0\u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  config/\
\uc0\u9474    \u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  db.js              # Conexi\'f3n a PostgreSQL\
\uc0\u9474    \u9474    
\f9 \uc0\u9492 \u9472 \u9472 
\f4  twilio.js          # Configuraci\'f3n Twilio\
\uc0\u9474    \u9474 \
\uc0\u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  routes/\
\uc0\u9474    \u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  businessRoutes.js  # Endpoints de negocios\
\uc0\u9474    \u9474 \
\uc0\u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  controllers/\
\uc0\u9474    \u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  businessController.js\
\uc0\u9474    \u9474 \
\uc0\u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  models/\
\uc0\u9474    \u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  businessModel.js\
\uc0\u9474    \u9474 \
\uc0\u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  utils/\
\uc0\u9474    \u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  otpGenerator.js\
\uc0\u9474    \u9474 \
\uc0\u9474    
\f9 \uc0\u9492 \u9472 \u9472 
\f4  app.js                 # Configuraci\'f3n principal Express\
\uc0\u9474 \

\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  db/\
\uc0\u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  init.sql               # Script inicial de base de datos\
\uc0\u9474 \

\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  .env                       # Variables de entorno\

\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  package.json\

\f9 \uc0\u9492 \u9472 \u9472 
\f4  README.md\
\

\f7\b0 2\uc0\u65039 \u8419 
\f4\b  Inicializar GIT y Node.js\
\
# Crear carpeta\
mkdir directorio-zonal\
cd directorio-zonal\
\
# Iniciar Git\
git init\
\
# Iniciar Node.js\
npm init -y\
\
# Instalar dependencias\
npm install express pg twilio dotenv\
npm install --save-dev nodemon\
\

\f7\b0 3\uc0\u65039 \u8419 
\f4\b  Configuraci\'f3n de entorno .env\
\
# Puerto API\
PORT=3000\
\
# PostgreSQL / Supabase\
DB_HOST=localhost\
DB_USER=postgres\
DB_PASSWORD=tu_password\
DB_NAME=directorio\
DB_PORT=5432\
\
# Twilio\
TWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxx\
TWILIO_AUTH_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxx\
TWILIO_PHONE_NUMBER=+1234567890\
\

\f7\b0 4\uc0\u65039 \u8419 
\f4\b  Conexi\'f3n a base de datos \'97 src/config/db.js\
\
const \{ Pool \} = require('pg');\
require('dotenv').config();\
\
const pool = new Pool(\{\
  host: process.env.DB_HOST,\
  user: process.env.DB_USER,\
  password: process.env.DB_PASSWORD,\
  database: process.env.DB_NAME,\
  port: process.env.DB_PORT\
\});\
\
module.exports = pool;\
\

\f7\b0 5\uc0\u65039 \u8419 
\f4\b  Configuraci\'f3n Twilio \'97 src/config/twilio.js\
\
const twilio = require('twilio');\
require('dotenv').config();\
\
const client = twilio(\
  process.env.TWILIO_ACCOUNT_SID,\
  process.env.TWILIO_AUTH_TOKEN\
);\
\
module.exports = client;\
\

\f7\b0 6\uc0\u65039 \u8419 
\f4\b  Generador OTP \'97 src/utils/otpGenerator.js\
\
function generateOTP(length = 6) \{\
  let otp = '';\
  for (let i = 0; i < length; i++) \{\
    otp += Math.floor(Math.random() * 10);\
  \}\
  return otp;\
\}\
\
module.exports = generateOTP;\
\

\f7\b0 7\uc0\u65039 \u8419 
\f4\b  Controlador de negocios \'97 src/controllers/businessController.js\
\
const pool = require('../config/db');\
const twilioClient = require('../config/twilio');\
const generateOTP = require('../utils/otpGenerator');\
\
// Reclamar un negocio\
exports.claimBusiness = async (req, res) => \{\
  const \{ id \} = req.params;\
  const \{ phone_number \} = req.body;\
\
  if (!phone_number) return res.status(400).json(\{ error: 'N\'famero de tel\'e9fono requerido' \});\
\
  try \{\
    const otp = generateOTP();\
\
    // Guardar reclamo\
    const claimResult = await pool.query(\
      `INSERT INTO business_claims (business_id, phone_number, otp_code)\
       VALUES ($1, $2, $3) RETURNING id`,\
      [id, phone_number, otp]\
    );\
\
    // Enviar OTP por SMS\
    await twilioClient.messages.create(\{\
      body: `Tu c\'f3digo de verificaci\'f3n para reclamar tu negocio es: $\{otp\}`,\
      from: process.env.TWILIO_PHONE_NUMBER,\
      to: phone_number\
    \});\
\
    res.status(200).json(\{ message: 'OTP enviado', claim_id: claimResult.rows[0].id \});\
  \} catch (err) \{\
    console.error(err);\
    res.status(500).json(\{ error: 'Error procesando la solicitud' \});\
  \}\
\};\
\
// Verificar c\'f3digo OTP\
exports.verifyClaim = async (req, res) => \{\
  const \{ claim_id \} = req.params;\
  const \{ otp_code \} = req.body;\
\
  try \{\
    const claim = await pool.query(\
      `SELECT * FROM business_claims\
       WHERE id = $1 AND otp_code = $2 AND status = 'pending' AND expires_at > NOW()`,\
      [claim_id, otp_code]\
    );\
\
    if (claim.rowCount === 0) \{\
      return res.status(400).json(\{ error: 'C\'f3digo inv\'e1lido o expirado' \});\
    \}\
\
    // Actualizar claim como verificado\
    await pool.query(\
      `UPDATE business_claims SET status = 'verified' WHERE id = $1`,\
      [claim_id]\
    );\
\
    // Asignar negocio al tel\'e9fono\
    await pool.query(\
      `UPDATE businesses\
       SET claimed_by_phone = $1, claimed_at = NOW()\
       WHERE id = $2`,\
      [claim.rows[0].phone_number, claim.rows[0].business_id]\
    );\
\
    res.status(200).json(\{ message: 'Negocio reclamado con \'e9xito' \});\
  \} catch (err) \{\
    console.error(err);\
    res.status(500).json(\{ error: 'Error procesando la verificaci\'f3n' \});\
  \}\
\};\
\

\f7\b0 8\uc0\u65039 \u8419 
\f4\b  Rutas \'97 src/routes/businessRoutes.js\
\
const express = require('express');\
const router = express.Router();\
const businessController = require('../controllers/businessController');\
\
router.post('/:id/claim', businessController.claimBusiness);\
router.post('/claim/:claim_id/verify', businessController.verifyClaim);\
\
module.exports = router;\
\

\f7\b0 9\uc0\u65039 \u8419 
\f4\b  Servidor principal \'97 src/app.js\
\
const express = require('express');\
const dotenv = require('dotenv');\
const businessRoutes = require('./routes/businessRoutes');\
\
dotenv.config();\
const app = express();\
app.use(express.json());\
\
app.use('/api/v1/businesses', businessRoutes);\
\
app.listen(process.env.PORT, () => \{\
  console.log(`Servidor corriendo en puerto $\{process.env.PORT\}`);\
\});\
\

\f7\b0 \uc0\u55357 \u56607 
\f4\b  Scripts en package.json\
\
"scripts": \{\
  "dev": "nodemon src/app.js",\
  "start": "node src/app.js"\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs28 \cf2 Si quieres, ahora puedo hacerte 
\f2\b \cf2 el script init.sql modificado con \'edndices y ejemplos reales de Caucel
\f1\b0 \cf2  listo para importar a 
\f2\b \cf2 Supabase
\f1\b0 \cf2 , para que solo conectes y el backend ya funcione.\
\'bfQuieres que lo arme con datos reales de Google Maps de Caucel para las primeras pruebas? Adelante\
\
Perfecto, seguimos con la 
\f2\b \cf2 estructura inicial del proyecto en Git
\f1\b0 \cf2  para tu directorio zonal MVP (Caucel).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 1. Estructura recomendada del repositorio
\f1\b0\fs28 \cf2 \
\
Este esquema es v\'e1lido para 
\f2\b \cf2 Backend (Node.js + Express)
\f1\b0 \cf2  y 
\f2\b \cf2 Frontend (React / React Native)
\f1\b0 \cf2  en un mismo monorepo, manteniendo orden:\
\
caucel-directorio/\
\uc0\u9474 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f10 \cf2 \'84\'a5\'84\'9f\'84\'9f
\f1  backend/\
\uc0\u9474    
\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  src/\
\uc0\u9474    \u9474    
\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  config/          # Configuraci\'f3n general (DB, Twilio, env vars)\
\uc0\u9474    \u9474    
\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  controllers/     # L\'f3gica de negocio (businesses, auth, claims)\
\uc0\u9474    \u9474    
\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  models/          # Modelos SQL / ORM (Prisma o Sequelize)\
\uc0\u9474    \u9474    
\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  routes/          # Rutas Express\
\uc0\u9474    \u9474    
\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  utils/           # Funciones de utilidad (OTP, validaciones)\
\uc0\u9474    \u9474    
\f0 \uc0\u9492 \u9472 \u9472 
\f1  app.js           # App principal Express\
\uc0\u9474    
\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  prisma/              # Esquema de DB si usamos Prisma\
\uc0\u9474    
\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  package.json\
\uc0\u9474    
\f0 \uc0\u9492 \u9472 \u9472 
\f1  .env.example\
\uc0\u9474 \

\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  frontend/\
\uc0\u9474    
\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  web/                 # ReactJS (PWA y web)\
\uc0\u9474    
\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  mobile/              # React Native (iOS y Android)\
\uc0\u9474    
\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  package.json\
\uc0\u9474 \

\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  docs/                    # Documentaci\'f3n, APIs, diagramas\

\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  .gitignore\

\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  README.md\

\f0 \uc0\u9492 \u9472 \u9472 
\f1  docker-compose.yml       # Opcional si queremos levantar DB + API r\'e1pido\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 2. Git inicial y ramas
\f1\b0\fs28 \cf2 \
\
Para trabajar con mejores pr\'e1cticas:\
\
# Crear repo local\
mkdir caucel-directorio && cd caucel-directorio\
git init\
\
# Rama principal protegida\
git checkout -b main\
\
# Rama de desarrollo\
git checkout -b dev\
\
Flujo recomendado:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 main
\f1  \uc0\u8594  estable, solo merges despu\'e9s de pruebas.\
	\'95	
\f5 dev
\f1  \uc0\u8594  integraci\'f3n de features.\
	\'95	
\f5 feature/<nombre>
\f1  \uc0\u8594  para cada m\'f3dulo.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 3. Variables de entorno iniciales (.env.example)\
\
# DB\
DATABASE_URL=postgresql://usuario:pass@localhost:5432/caucel_directorio\
\
# Twilio\
TWILIO_ACCOUNT_SID=xxxxxxxx\
TWILIO_AUTH_TOKEN=xxxxxxxx\
TWILIO_PHONE_NUMBER=+52XXXXXXXXXX\
\
# Seguridad\
JWT_SECRET=supersecreto\
OTP_EXPIRATION_MINUTES=5\
\
# API\
PORT=3000\
\
4. Dependencias iniciales
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Backend (Node.js + Express + Prisma + Twilio)\
\
cd backend\
npm init -y\
npm install express cors dotenv twilio jsonwebtoken\
npm install prisma @prisma/client\
npm install nodemon --save-dev\
\
Frontend Web (React PWA)\
\
cd ../frontend\
npx create-react-app web\
\
Frontend Mobile (React Native)\
\
npx react-native init mobile\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\fs34 \cf2 5. Siguiente paso
\f1\b0\fs28 \cf2 \
\
Si quieres, el siguiente paso ser\'eda crear 
\f2\b \cf2 el esquema de base de datos y el endpoint /api/v1/businesses/:id/claim
\f1\b0 \cf2  dentro del backend con todo el flujo OTP en Twilio.\
Ah\'ed podemos integrar 
\f2\b \cf2 SQL + token generation + Twilio send
\f1\b0 \cf2  como me pediste antes.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que avance ya con 
\f2\b \cf2 el c\'f3digo backend para /claim con OTP y SQL
\f1\b0 \cf2  sobre esta base?\
Ah\'ed ya te lo dejar\'eda listo para correrlo y probarlo. Adelante\
\
\'a1Vamos! Te dejo el 
\f2\b \cf2 backend listo
\f1\b0 \cf2  (Node.js + Express + PostgreSQL + Twilio) con:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	B\'fasqueda de negocios por radio: 
\f5 GET /api/v1/businesses
\f1 \
	\'95	Detalle: 
\f5 GET /api/v1/businesses/:id
\f1 \
	\'95	Reclamo con OTP por SMS:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 \cf2 POST /api/v1/businesses/:id/claim
\f1 \cf2  (genera y env\'eda OTP)\
	\'95	
\f5 \cf2 POST /api/v1/businesses/claim/:claimId/verify
\f1 \cf2  (verifica y marca como reclamado)\
\
Incluyo archivos completos para que solo copies/pegues.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 1) Estructura\
\
caucel-directorio/\

\f9 \uc0\u9492 \u9472 
\f4  backend/\
   
\f8 \'84\'a5\'84\'9f
\f4  src/\
   \uc0\u9474   
\f8 \'84\'a5\'84\'9f
\f4  config/\
   \uc0\u9474   \u9474   
\f8 \'84\'a5\'84\'9f
\f4  db.js\
   \uc0\u9474   \u9474   
\f9 \uc0\u9492 \u9472 
\f4  twilio.js\
   \uc0\u9474   
\f8 \'84\'a5\'84\'9f
\f4  controllers/\
   \uc0\u9474   \u9474   
\f9 \uc0\u9492 \u9472 
\f4  businessController.js\
   \uc0\u9474   
\f8 \'84\'a5\'84\'9f
\f4  routes/\
   \uc0\u9474   \u9474   
\f9 \uc0\u9492 \u9472 
\f4  businessRoutes.js\
   \uc0\u9474   
\f8 \'84\'a5\'84\'9f
\f4  utils/\
   \uc0\u9474   \u9474   
\f9 \uc0\u9492 \u9472 
\f4  otpGenerator.js\
   \uc0\u9474   
\f9 \uc0\u9492 \u9472 
\f4  app.js\
   
\f8 \'84\'a5\'84\'9f
\f4  db/\
   \uc0\u9474   
\f9 \uc0\u9492 \u9472 
\f4  init.sql\
   
\f8 \'84\'a5\'84\'9f
\f4  .env.example\
   
\f8 \'84\'a5\'84\'9f
\f4  package.json\
   
\f9 \uc0\u9492 \u9472 
\f4  README.md\
\
2) package.json\
\
\{\
  "name": "caucel-backend",\
  "version": "1.0.0",\
  "description": "API Directorio Zonal - Caucel",\
  "main": "src/app.js",\
  "scripts": \{\
    "start": "node src/app.js",\
    "dev": "nodemon src/app.js"\
  \},\
  "dependencies": \{\
    "cors": "^2.8.5",\
    "dotenv": "^16.4.5",\
    "express": "^4.19.2",\
    "express-rate-limit": "^7.1.5",\
    "express-validator": "^7.0.1",\
    "pg": "^8.11.5",\
    "twilio": "^5.2.3"\
  \},\
  "devDependencies": \{\
    "nodemon": "^3.1.4"\
  \}\
\}\
\
3) .env.example\
\
PORT=3000\
\
# PostgreSQL\
DATABASE_URL=postgres://user:password@localhost:5432/caucel_directorio\
\
# Twilio\
TWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\
TWILIO_AUTH_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\
TWILIO_PHONE_NUMBER=+1XXXXXXXXXX\
\
# Seguridad\
MAX_PER_PAGE=50\
OTP_EXPIRATION_MINUTES=5\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs28 \cf2 Copia a 
\f5 \cf2 .env
\f1 \cf2  y completa valores.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 4) db/init.sql
\f1\b0\fs28 \cf2 \
\
\pard\tx860\tx1420\tx1980\tx2540\tx3100\tx3660\tx4220\tx4780\tx5340\tx5900\tx6460\tx7020\li300\sl324\slmult1\partightenfactor0
\cf2 Esquema sencillo (lat/lng) para MVP. Si prefieres PostGIS, luego lo migramos.\
\
-- Negocios\
CREATE TABLE IF NOT EXISTS businesses (\
  id SERIAL PRIMARY KEY,\
  name VARCHAR(255) NOT NULL,\
  category VARCHAR(100) NOT NULL,\
  address TEXT,\
  latitude DECIMAL(10,8) NOT NULL,\
  longitude DECIMAL(11,8) NOT NULL,\
  phone VARCHAR(20),\
  website VARCHAR(255),\
  description TEXT,\
  is_featured BOOLEAN DEFAULT FALSE,\
  claimed_by_phone VARCHAR(20),\
  claimed_at TIMESTAMP,\
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\
);\
\
-- Reclamos (OTP)\
CREATE TABLE IF NOT EXISTS business_claims (\
  id SERIAL PRIMARY KEY,\
  business_id INT NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,\
  phone_number VARCHAR(20) NOT NULL,\
  otp_code VARCHAR(6) NOT NULL,\
  status VARCHAR(20) DEFAULT 'pending', -- pending | verified | rejected\
  expires_at TIMESTAMP DEFAULT (CURRENT_TIMESTAMP + interval '5 minutes'),\
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\
);\
\
-- \'cdndices\
CREATE INDEX IF NOT EXISTS idx_business_category ON businesses(category);\
CREATE INDEX IF NOT EXISTS idx_business_latlng ON businesses(latitude, longitude);\
CREATE INDEX IF NOT EXISTS idx_claim_business ON business_claims(business_id);\
CREATE INDEX IF NOT EXISTS idx_claim_status ON business_claims(status);\
\
-- Datos de muestra (Caucel aprox.)\
INSERT INTO businesses (name, category, address, latitude, longitude, phone, description, is_featured)\
VALUES\
('Peluquer\'eda Estilo Caucel', 'Peluquer\'eda', 'Calle 23 #45, Caucel, M\'e9rida', 21.016452, -89.693215, '+529991111111', 'Cortes para toda la familia', true),\
('Pasteler\'eda Dulce Sabor', 'Pasteler\'eda', 'Calle 45 #12, Caucel, M\'e9rida', 21.017123, -89.695879, '+529992222222', 'Pasteles personalizados', false),\
('Taller Mec\'e1nico Caucel Motors', 'Taller mec\'e1nico', 'Calle 19 #8, Caucel, M\'e9rida', 21.015987, -89.692345, '+529993333333', 'Servicio general', false),\
('Farmacia Salud Total', 'Farmacia', 'Calle 30 #100, Caucel, M\'e9rida', 21.018654, -89.694120, '+529994444444', 'Abierto 24h', true)\
ON CONFLICT DO NOTHING;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 5) src/config/db.js\
\
const \{ Pool \} = require('pg');\
require('dotenv').config();\
\
const pool = new Pool(\{\
  connectionString: process.env.DATABASE_URL\
\});\
\
pool.on('error', (err) => \{\
  console.error('Error inesperado en el pool', err);\
  process.exit(-1);\
\});\
\
module.exports = pool;\
\
6) src/config/twilio.js\
\
const twilio = require('twilio');\
require('dotenv').config();\
\
const client = twilio(\
  process.env.TWILIO_ACCOUNT_SID,\
  process.env.TWILIO_AUTH_TOKEN\
);\
\
module.exports = client;\
\
7) src/utils/otpGenerator.js\
\
function generateOTP(length = 6) \{\
  let code = '';\
  for (let i = 0; i < length; i++) code += Math.floor(Math.random() * 10);\
  return code;\
\}\
module.exports = generateOTP;\
\
8) src/controllers/businessController.js\
\
const \{ validationResult \} = require('express-validator');\
const pool = require('../config/db');\
const twilioClient = require('../config/twilio');\
const generateOTP = require('../utils/otpGenerator');\
\
const MAX_PER_PAGE = parseInt(process.env.MAX_PER_PAGE || '50', 10);\
const OTP_MINUTES = parseInt(process.env.OTP_EXPIRATION_MINUTES || '5', 10);\
\
// GET /api/v1/businesses  (b\'fasqueda por radio)\
exports.search = async (req, res) => \{\
  const errors = validationResult(req);\
  if (!errors.isEmpty()) return res.status(400).json(\{ errors: errors.array() \});\
\
  try \{\
    const lat = parseFloat(req.query.lat);\
    const lng = parseFloat(req.query.lng);\
    const radius = parseInt(req.query.radius || '3000', 10); // metros\
    const category = req.query.category || null;\
    const q = req.query.q || null;\
    const page = parseInt(req.query.page || '1', 10);\
    const per_page = Math.min(parseInt(req.query.per_page || '20', 10), MAX_PER_PAGE);\
    const offset = (page - 1) * per_page;\
\
    // Haversine (aprox.) para no depender de PostGIS en MVP\
    const haversine = `\
      6371000 * acos(\
        LEAST(1, GREATEST(-1,\
          cos(radians($1)) * cos(radians(latitude)) * cos(radians(longitude) - radians($2))\
          + sin(radians($1)) * sin(radians(latitude))\
        ))\
      )\
    `;\
\
    const where = [];\
    const params = [lat, lng];\
\
    // distancia\
    where.push(`$\{haversine\} <= $3`);\
    params.push(radius);\
\
    // categor\'eda\
    if (category) \{\
      params.push(category);\
      where.push(`LOWER(category) = LOWER($$\{params.length\})`);\
    \}\
\
    // texto\
    if (q) \{\
      params.push(`%$\{q\}%`);\
      where.push(`(LOWER(name) LIKE LOWER($$\{params.length\}) OR LOWER(address) LIKE LOWER($$\{params.length\}))`);\
    \}\
\
    const whereSql = where.length ? `WHERE $\{where.join(' AND ')\}` : '';\
\
    const sql = `\
      SELECT\
        id, name, category, address, phone, website, description, is_featured,\
        latitude AS lat, longitude AS lng,\
        $\{haversine\} AS distance_m\
      FROM businesses\
      $\{whereSql\}\
      ORDER BY is_featured DESC, distance_m ASC\
      LIMIT $$\{params.length + 1\} OFFSET $$\{params.length + 2\};\
    `;\
    params.push(per_page, offset);\
\
    const [rowsRes, countRes] = await Promise.all([\
      pool.query(sql, params),\
      pool.query(`\
        SELECT COUNT(*)::int AS total\
        FROM businesses\
        $\{whereSql\};\
      `, params.slice(0, params.length - 2)) // sin limit/offset\
    ]);\
\
    res.json(\{\
      total: countRes.rows[0].total,\
      page,\
      per_page,\
      results: rowsRes.rows.map(r => (\{\
        id: r.id,\
        name: r.name,\
        category: r.category,\
        address: r.address,\
        phone: r.phone,\
        website: r.website,\
        description: r.description,\
        is_featured: r.is_featured,\
        distance_m: Number(r.distance_m),\
        location: \{ lat: Number(r.lat), lng: Number(r.lng) \}\
      \}))\
    \});\
  \} catch (err) \{\
    console.error('search error:', err);\
    res.status(500).json(\{ error: 'Error interno' \});\
  \}\
\};\
\
// GET /api/v1/businesses/:id (detalle)\
exports.detail = async (req, res) => \{\
  try \{\
    const id = parseInt(req.params.id, 10);\
    const result = await pool.query(\
      `SELECT id, name, category, address, phone, website, description, is_featured,\
              latitude AS lat, longitude AS lng, claimed_by_phone, claimed_at\
       FROM businesses WHERE id = $1`, [id]);\
    if (result.rowCount === 0) return res.status(404).json(\{ error: 'No encontrado' \});\
\
    const b = result.rows[0];\
    const directions_url = `https://www.google.com/maps/dir/?api=1&destination=$\{b.lat\},$\{b.lng\}`;\
    const claim_url = `$\{req.protocol\}://$\{req.get('host')\}/api/v1/businesses/$\{b.id\}/claim`;\
\
    res.json(\{\
      id: b.id,\
      name: b.name,\
      category: b.category,\
      address: b.address,\
      phone: b.phone,\
      website: b.website,\
      description: b.description,\
      is_featured: b.is_featured,\
      is_claimed: !!b.claimed_by_phone,\
      claimed_at: b.claimed_at,\
      location: \{ lat: Number(b.lat), lng: Number(b.lng) \},\
      directions_url,\
      claim_url\
    \});\
  \} catch (err) \{\
    console.error('detail error:', err);\
    res.status(500).json(\{ error: 'Error interno' \});\
  \}\
\};\
\
// POST /api/v1/businesses/:id/claim (genera y env\'eda OTP)\
exports.claimBusiness = async (req, res) => \{\
  const errors = validationResult(req);\
  if (!errors.isEmpty()) return res.status(400).json(\{ errors: errors.array() \});\
\
  try \{\
    const id = parseInt(req.params.id, 10);\
    const \{ phone_number \} = req.body;\
\
    // Verifica negocio\
    const bres = await pool.query('SELECT id FROM businesses WHERE id = $1', [id]);\
    if (bres.rowCount === 0) return res.status(404).json(\{ error: 'Negocio no encontrado' \});\
\
    const otp = generateOTP();\
\
    const claimRes = await pool.query(\
      `INSERT INTO business_claims (business_id, phone_number, otp_code, expires_at)\
       VALUES ($1, $2, $3, NOW() + interval '$\{OTP_MINUTES\} minutes')\
       RETURNING id`,\
      [id, phone_number, otp]\
    );\
\
    // Enviar SMS (Twilio)\
    await twilioClient.messages.create(\{\
      body: `Tu c\'f3digo de verificaci\'f3n (Caucel Directorio): $\{otp\}. Expira en $\{OTP_MINUTES\} min.`,\
      from: process.env.TWILIO_PHONE_NUMBER,\
      to: phone_number\
    \});\
\
    res.status(201).json(\{ message: 'OTP enviado por SMS', claim_id: claimRes.rows[0].id \});\
  \} catch (err) \{\
    console.error('claimBusiness error:', err);\
    res.status(500).json(\{ error: 'Error interno' \});\
  \}\
\};\
\
// POST /api/v1/businesses/claim/:claimId/verify (verifica OTP y marca negocio)\
exports.verifyClaim = async (req, res) => \{\
  const errors = validationResult(req);\
  if (!errors.isEmpty()) return res.status(400).json(\{ errors: errors.array() \});\
\
  try \{\
    const claimId = parseInt(req.params.claimId, 10);\
    const \{ otp_code \} = req.body;\
\
    const cRes = await pool.query(\
      `SELECT * FROM business_claims WHERE id = $1`,\
      [claimId]\
    );\
    if (cRes.rowCount === 0) return res.status(404).json(\{ error: 'Claim no encontrado' \});\
\
    const claim = cRes.rows[0];\
    if (claim.status !== 'pending') return res.status(400).json(\{ error: 'Claim ya procesado' \});\
    if (new Date() > new Date(claim.expires_at)) return res.status(400).json(\{ error: 'OTP expirado' \});\
    if (claim.otp_code !== otp_code) return res.status(400).json(\{ error: 'OTP incorrecto' \});\
\
    await pool.query('BEGIN');\
\
    await pool.query(\
      `UPDATE business_claims SET status = 'verified' WHERE id = $1`,\
      [claimId]\
    );\
\
    await pool.query(\
      `UPDATE businesses\
       SET claimed_by_phone = $1, claimed_at = NOW()\
       WHERE id = $2`,\
      [claim.phone_number, claim.business_id]\
    );\
\
    await pool.query('COMMIT');\
\
    res.json(\{ message: 'Negocio reclamado con \'e9xito', business_id: claim.business_id \});\
  \} catch (err) \{\
    await pool.query('ROLLBACK').catch(() => \{\});\
    console.error('verifyClaim error:', err);\
    res.status(500).json(\{ error: 'Error interno' \});\
  \}\
\};\
\
9) src/routes/businessRoutes.js\
\
const express = require('express');\
const \{ query, param, body \} = require('express-validator');\
const router = express.Router();\
const ctrl = require('../controllers/businessController');\
\
// B\'fasqueda\
router.get('/',\
  [\
    query('lat').exists().isFloat(\{ min: -90, max: 90 \}),\
    query('lng').exists().isFloat(\{ min: -180, max: 180 \}),\
    query('radius').optional().isInt(\{ min: 100, max: 50000 \}),\
    query('category').optional().isString().trim().isLength(\{ max: 100 \}),\
    query('q').optional().isString().trim().isLength(\{ max: 100 \}),\
    query('page').optional().isInt(\{ min: 1 \}),\
    query('per_page').optional().isInt(\{ min: 1, max: parseInt(process.env.MAX_PER_PAGE || '50', 10) \})\
  ],\
  ctrl.search\
);\
\
// Detalle\
router.get('/:id',\
  [param('id').isInt(\{ min: 1 \})],\
  ctrl.detail\
);\
\
// Reclamar (OTP)\
router.post('/:id/claim',\
  [\
    param('id').isInt(\{ min: 1 \}),\
    body('phone_number').isString().trim().isLength(\{ min: 8, max: 20 \})\
  ],\
  ctrl.claimBusiness\
);\
\
// Verificar OTP\
router.post('/claim/:claimId/verify',\
  [\
    param('claimId').isInt(\{ min: 1 \}),\
    body('otp_code').isString().trim().isLength(\{ min: 4, max: 6 \})\
  ],\
  ctrl.verifyClaim\
);\
\
module.exports = router;\
\
10) src/app.js\
\
const express = require('express');\
const cors = require('cors');\
const rateLimit = require('express-rate-limit');\
require('dotenv').config();\
\
const businessRoutes = require('./routes/businessRoutes');\
\
const app = express();\
app.use(cors());\
app.use(express.json());\
\
// Rate limit b\'e1sico\
const limiter = rateLimit(\{\
  windowMs: 15 * 60 * 1000,\
  max: 300,\
  standardHeaders: true,\
  legacyHeaders: false\
\});\
app.use(limiter);\
\
app.get('/', (_req, res) => res.send('API Directorio Zonal Caucel OK'));\
app.use('/api/v1/businesses', businessRoutes);\
\
const port = process.env.PORT || 3000;\
app.listen(port, () => console.log(`API escuchando en http://localhost:$\{port\}`));\
\
11) README.md (mini)\
\
# API Directorio Zonal \'97 Caucel\
\
## Requisitos\
- Node 18+\
- PostgreSQL 13+\
\
## Setup\
1) `cp .env.example .env` y completa variables\
2) `npm install`\
3) Crear DB y tablas:\
   ```bash\
   createdb caucel_directorio\
   psql $DATABASE_URL -f db/init.sql\
\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6\b0\fs28 \cf2 4.	Correr:\
\
npm run dev\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 Endpoints
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	GET 
\f5 /api/v1/businesses?lat=21.017&lng=-89.694&radius=3000&page=1&per_page=20&q=pasteleria
\f1 \
	\'95	GET 
\f5 /api/v1/businesses/:id
\f1 \
	\'95	POST 
\f5 /api/v1/businesses/:id/claim
\f1  body: 
\f5 \{ "phone_number": "+52999XXXXXXX" \}
\f1 \
	\'95	POST 
\f5 /api/v1/businesses/claim/:claimId/verify
\f1  body: 
\f5 \{ "otp_code": "123456" \}\
\
---\
\
## Pruebas r\'e1pidas (curl)\
\
**Buscar:**\
```bash\
curl "http://localhost:3000/api/v1/businesses?lat=21.017&lng=-89.694&radius=3000&per_page=10"\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Detalle:\
\
curl "http://localhost:3000/api/v1/businesses/1"\
\
Claim (OTP):\
\
curl -X POST "http://localhost:3000/api/v1/businesses/1/claim" \\\
  -H "Content-Type: application/json" \\\
  -d '\{"phone_number":"+529991234567"\}'\
\
Verificar:\
\
curl -X POST "http://localhost:3000/api/v1/businesses/claim/1/verify" \\\
  -H "Content-Type: application/json" \\\
  -d '\{"otp_code":"123456"\}'\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\fs34 \cf2 Siguientes pasos sugeridos
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Cambio a PostGIS
\f1\b0  cuando quieras distancias s\'faper precisas y rendimiento con \'edndices GiST.\
	\'95	
\f2\b Cache
\f1\b0  con Redis (TTL 30\'96120s) por 
\f5 lat/lng/radius/category/q/page
\f1 .\
	\'95	
\f2\b Auth Admin
\f1\b0  para CRUD de negocios (JWT simple).\
	\'95	
\f2\b Rate limit por IP + phone
\f1\b0  espec\'edfico en 
\f5 /claim
\f1  y 
\f5 /verify
\f1 .\
\
\'bfQuieres que ahora te a\'f1ada 
\f2\b cache con Redis
\f1\b0  y un 
\f2\b Docker Compose
\f1\b0  para levantar DB + API + Redis de un jal\'f3n? Adelante\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Perfecto, aqu\'ed te armo el 
\f2\b \cf2 endpoint completo
\f1\b0 \cf2  para 
\f5 \cf2 POST /api/v1/businesses/:id/claim
\f1 \cf2  con generaci\'f3n y env\'edo de OTP por SMS usando Twilio, m\'e1s la inserci\'f3n en 
\f5 \cf2 business_claims
\f1 \cf2  en PostgreSQL v\'eda Prisma.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 1. Modelo de base de datos (Prisma)
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 backend/prisma/schema.prisma
\f1 \cf2 :\
\
model Business \{\
  id             Int              @id @default(autoincrement())\
  name           String\
  phone          String\
  address        String\
  latitude       Float\
  longitude      Float\
  claims         BusinessClaim[]\
\}\
\
model BusinessClaim \{\
  id          Int      @id @default(autoincrement())\
  businessId  Int\
  phoneNumber String\
  otpCode     String\
  token       String\
  status      String   @default("pending") // pending, verified, rejected\
  createdAt   DateTime @default(now())\
\
  business    Business @relation(fields: [businessId], references: [id])\
\}\
\
Despu\'e9s:\
\
npx prisma migrate dev --name init\
\

\f4\b\fs34 \cf2 2. Configuraci\'f3n Twilio y utilidades
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 backend/src/config/twilio.js
\f1 \cf2 :\
\
import twilio from 'twilio';\
import dotenv from 'dotenv';\
dotenv.config();\
\
export const twilioClient = twilio(\
  process.env.TWILIO_ACCOUNT_SID,\
  process.env.TWILIO_AUTH_TOKEN\
);\
\
export const sendOTP = async (to, otp) => \{\
  try \{\
    const message = await twilioClient.messages.create(\{\
      body: `Tu c\'f3digo de verificaci\'f3n para reclamar el negocio es: $\{otp\}`,\
      from: process.env.TWILIO_PHONE_NUMBER,\
      to\
    \});\
    console.log("SMS enviado:", message.sid);\
  \} catch (err) \{\
    console.error("Error enviando SMS:", err);\
    throw new Error("No se pudo enviar el OTP");\
  \}\
\};\
\

\f4\b\fs34 \cf2 3. Generador de OTP y token
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 backend/src/utils/auth.js
\f1 \cf2 :\
\
import crypto from 'crypto';\
\
export const generateOTP = (length = 6) => \{\
  return Math.floor(100000 + Math.random() * 900000).toString().substring(0, length);\
\};\
\
export const generateToken = () => \{\
  return crypto.randomBytes(32).toString('hex');\
\};\
\

\f4\b\fs34 \cf2 4. Controlador /claim
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 backend/src/controllers/businessController.js
\f1 \cf2 :\
\
import \{ PrismaClient \} from '@prisma/client';\
import \{ generateOTP, generateToken \} from '../utils/auth.js';\
import \{ sendOTP \} from '../config/twilio.js';\
\
const prisma = new PrismaClient();\
\
export const claimBusiness = async (req, res) => \{\
  const businessId = parseInt(req.params.id);\
  const \{ phoneNumber \} = req.body;\
\
  if (!phoneNumber) \{\
    return res.status(400).json(\{ error: "N\'famero de tel\'e9fono requerido" \});\
  \}\
\
  try \{\
    // Verificar que el negocio existe\
    const business = await prisma.business.findUnique(\{\
      where: \{ id: businessId \}\
    \});\
    if (!business) \{\
      return res.status(404).json(\{ error: "Negocio no encontrado" \});\
    \}\
\
    // Generar OTP y token\
    const otpCode = generateOTP(6);\
    const token = generateToken();\
\
    // Insertar en business_claims\
    await prisma.businessClaim.create(\{\
      data: \{\
        businessId,\
        phoneNumber,\
        otpCode,\
        token,\
        status: "pending"\
      \}\
    \});\
\
    // Enviar OTP por SMS\
    await sendOTP(phoneNumber, otpCode);\
\
    res.json(\{\
      message: "OTP enviado al n\'famero proporcionado",\
      token\
    \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ error: "Error al procesar la solicitud" \});\
  \}\
\};\
\

\f4\b\fs34 \cf2 5. Ruta Express
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 backend/src/routes/businessRoutes.js
\f1 \cf2 :\
\
import express from 'express';\
import \{ claimBusiness \} from '../controllers/businessController.js';\
\
const router = express.Router();\
\
router.post('/api/v1/businesses/:id/claim', claimBusiness);\
\
export default router;\
\

\f4\b\fs34 \cf2 6. App principal
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 backend/src/app.js
\f1 \cf2 :\
\
import express from 'express';\
import cors from 'cors';\
import dotenv from 'dotenv';\
import businessRoutes from './routes/businessRoutes.js';\
\
dotenv.config();\
const app = express();\
\
app.use(cors());\
app.use(express.json());\
\
app.use(businessRoutes);\
\
app.listen(process.env.PORT || 3000, () => \{\
  console.log(`Servidor corriendo en puerto $\{process.env.PORT || 3000\}`);\
\});\
\
Con esto ya queda listo para:\
\
cd backend\
npx prisma migrate dev --name claim-business\
npm run dev\
\
Probar en 
\f2\b \cf2 Postman
\f1\b0 \cf2 :\
\
POST http://localhost:3000/api/v1/businesses/1/claim\
\{\
  "phoneNumber": "+5219991234567"\
\}\
\
Esto insertar\'e1 en 
\f5 \cf2 business_claims
\f1 \cf2 , generar\'e1 OTP, token y enviar\'e1 SMS.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, el siguiente paso puede ser 
\f2\b \cf2 crear el endpoint para verificar el OTP
\f1\b0 \cf2  y confirmar la reclamaci\'f3n del negocio, para cerrar el flujo.\
\'bfQuieres que siga con esa parte ahora? Adelante\
\
Perfecto, vamos a cerrar el flujo creando el endpoint para 
\f2\b \cf2 verificar el OTP
\f1\b0 \cf2  y confirmar la reclamaci\'f3n del negocio.\
\
As\'ed, despu\'e9s de que el usuario reciba el SMS, podr\'e1 enviar el c\'f3digo y nosotros validamos que es correcto antes de marcar el negocio como reclamado.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 1. Controlador verifyClaim
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 backend/src/controllers/businessController.js
\f1 \cf2  a\'f1adimos:\
\
export const verifyClaim = async (req, res) => \{\
  const \{ token, otpCode \} = req.body;\
\
  if (!token || !otpCode) \{\
    return res.status(400).json(\{ error: "Token y OTP son requeridos" \});\
  \}\
\
  try \{\
    // Buscar el claim por token y estado pendiente\
    const claim = await prisma.businessClaim.findFirst(\{\
      where: \{\
        token,\
        status: "pending"\
      \},\
      include: \{ business: true \}\
    \});\
\
    if (!claim) \{\
      return res.status(404).json(\{ error: "Solicitud no encontrada o ya verificada" \});\
    \}\
\
    // Verificar que el OTP coincide\
    if (claim.otpCode !== otpCode) \{\
      return res.status(400).json(\{ error: "C\'f3digo OTP incorrecto" \});\
    \}\
\
    // Marcar el claim como verificado\
    await prisma.businessClaim.update(\{\
      where: \{ id: claim.id \},\
      data: \{ status: "verified" \}\
    \});\
\
    // (Opcional) Actualizar el negocio para indicar que ya est\'e1 reclamado\
    await prisma.business.update(\{\
      where: \{ id: claim.businessId \},\
      data: \{ ownerPhone: claim.phoneNumber \}\
    \});\
\
    res.json(\{\
      message: "Negocio reclamado exitosamente",\
      business: claim.business\
    \});\
\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ error: "Error al verificar la solicitud" \});\
  \}\
\};\
\

\f4\b\fs34 \cf2 2. Nueva ruta para verificaci\'f3n
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 backend/src/routes/businessRoutes.js
\f1 \cf2 :\
\
import \{ claimBusiness, verifyClaim \} from '../controllers/businessController.js';\
\
router.post('/api/v1/businesses/:id/claim', claimBusiness);\
router.post('/api/v1/businesses/claim/verify', verifyClaim);\
\

\f4\b\fs34 \cf2 3. Ejemplo de prueba en Postman
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 1\uc0\u65039 \u8419 
\f4\b  Enviar OTP\
\
POST http://localhost:3000/api/v1/businesses/1/claim\
\{\
  "phoneNumber": "+5219991234567"\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs28 \cf2 \uc0\u55357 \u56524 
\f1  Respuesta esperada:\
\
\{\
  "message": "OTP enviado al n\'famero proporcionado",\
  "token": "df9832ff9a..."\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 2\uc0\u65039 \u8419 
\f4\b  Verificar OTP\
\
POST http://localhost:3000/api/v1/businesses/claim/verify\
\{\
  "token": "df9832ff9a...",\
  "otpCode": "123456"\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs28 \cf2 \uc0\u55357 \u56524 
\f1  Respuesta esperada:\
\
\{\
  "message": "Negocio reclamado exitosamente",\
  "business": \{\
    "id": 1,\
    "name": "Mi Negocio",\
    "phone": "+5219991234567",\
    "address": "Calle 123, M\'e9rida"\
  \}\
\}\
\
Con esto ya tienes 
\f2\b \cf2 flujo completo
\f1\b0 \cf2 :\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Claim
\f1\b0 \cf2  \uc0\u8594  inserta en DB + genera OTP + env\'eda SMS.\

\f6 \cf2 	2.	
\f2\b \cf2 Verify
\f1\b0 \cf2  \uc0\u8594  valida OTP y marca como verificado.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, el siguiente paso lo puedo hacer para 
\f2\b \cf2 agregar expiraci\'f3n de OTP (ej. 5 minutos)
\f1\b0 \cf2  y evitar que se use despu\'e9s del tiempo l\'edmite, as\'ed el sistema queda m\'e1s seguro.\
\
\'bfQuieres que lo integre ahora? Adelante\
\
Perfecto, vamos a reforzar el flujo con 
\f2\b \cf2 expiraci\'f3n de OTP a 5 minutos
\f1\b0 \cf2  para que el sistema sea seguro y no permita c\'f3digos viejos.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 1. Ajustar la tabla business_claims
\f1\b0\fs28 \cf2 \
\
En tu migraci\'f3n de Prisma, agregamos un campo 
\f5 \cf2 otpExpiresAt
\f1 \cf2 :\
\
model BusinessClaim \{\
  id          Int      @id @default(autoincrement())\
  businessId  Int\
  phoneNumber String\
  otpCode     String\
  token       String\
  status      String   @default("pending")\
  otpExpiresAt DateTime\
  createdAt   DateTime @default(now())\
  updatedAt   DateTime @updatedAt\
\
  business    Business @relation(fields: [businessId], references: [id])\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u55357 \u56524 
\f1  Luego corres:\
\
npx prisma migrate dev --name add_otp_expiration\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 2. Modificar claimBusiness para guardar expiraci\'f3n
\f1\b0\fs28 \cf2 \
\
En el controlador donde generamos el OTP, agregamos:\
\
import \{ addMinutes \} from 'date-fns'; // para sumar minutos\
\
export const claimBusiness = async (req, res) => \{\
  const \{ phoneNumber \} = req.body;\
  const businessId = parseInt(req.params.id);\
\
  if (!phoneNumber) \{\
    return res.status(400).json(\{ error: "N\'famero de tel\'e9fono requerido" \});\
  \}\
\
  try \{\
    const business = await prisma.business.findUnique(\{ where: \{ id: businessId \} \});\
    if (!business) \{\
      return res.status(404).json(\{ error: "Negocio no encontrado" \});\
    \}\
\
    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();\
    const token = crypto.randomBytes(16).toString('hex');\
\
    // Guardar reclamaci\'f3n con expiraci\'f3n de OTP (5 minutos)\
    await prisma.businessClaim.create(\{\
      data: \{\
        businessId,\
        phoneNumber,\
        otpCode,\
        token,\
        otpExpiresAt: addMinutes(new Date(), 5) // expira en 5 minutos\
      \}\
    \});\
\
    // Enviar OTP por SMS\
    await twilioClient.messages.create(\{\
      body: `Tu c\'f3digo para reclamar el negocio "$\{business.name\}" es: $\{otpCode\}. Expira en 5 minutos.`,\
      from: process.env.TWILIO_PHONE,\
      to: phoneNumber\
    \});\
\
    res.json(\{ message: "OTP enviado al n\'famero proporcionado", token \});\
\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ error: "Error al reclamar el negocio" \});\
  \}\
\};\
\

\f4\b\fs34 \cf2 3. Modificar verifyClaim para validar expiraci\'f3n
\f1\b0\fs28 \cf2 \
\
En el endpoint de verificaci\'f3n:\
\
export const verifyClaim = async (req, res) => \{\
  const \{ token, otpCode \} = req.body;\
\
  if (!token || !otpCode) \{\
    return res.status(400).json(\{ error: "Token y OTP son requeridos" \});\
  \}\
\
  try \{\
    const claim = await prisma.businessClaim.findFirst(\{\
      where: \{ token, status: "pending" \},\
      include: \{ business: true \}\
    \});\
\
    if (!claim) \{\
      return res.status(404).json(\{ error: "Solicitud no encontrada o ya verificada" \});\
    \}\
\
    // Verificar expiraci\'f3n\
    if (new Date() > claim.otpExpiresAt) \{\
      return res.status(400).json(\{ error: "El c\'f3digo OTP ha expirado. Solicita uno nuevo." \});\
    \}\
\
    // Verificar que el OTP coincide\
    if (claim.otpCode !== otpCode) \{\
      return res.status(400).json(\{ error: "C\'f3digo OTP incorrecto" \});\
    \}\
\
    // Marcar como verificado\
    await prisma.businessClaim.update(\{\
      where: \{ id: claim.id \},\
      data: \{ status: "verified" \}\
    \});\
\
    await prisma.business.update(\{\
      where: \{ id: claim.businessId \},\
      data: \{ ownerPhone: claim.phoneNumber \}\
    \});\
\
    res.json(\{ message: "Negocio reclamado exitosamente", business: claim.business \});\
\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ error: "Error al verificar la solicitud" \});\
  \}\
\};\
\

\f4\b\fs34 \cf2 4. Flujo final ahora
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Usuario solicita reclamar negocio
\f1\b0 \cf2  \uc0\u8594  recibe SMS con OTP v\'e1lido 5 minutos.\

\f6 \cf2 	2.	
\f2\b \cf2 Usuario env\'eda OTP + token
\f1\b0 \cf2  \uc0\u8594  si coincide y no ha expirado, se verifica.\

\f6 \cf2 	3.	Si expira, el usuario debe volver a solicitar OTP.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Con esto ya tienes un flujo 
\f2\b \cf2 seguro
\f1\b0 \cf2 , 
\f2\b \cf2 temporal
\f1\b0 \cf2  y 
\f2\b \cf2 a prueba de reusos
\f1\b0 \cf2  del c\'f3digo.\
\
Si quieres, el siguiente paso lo puedo armar para que el 
\f2\b \cf2 frontend
\f1\b0 \cf2  (iOS, Android y Web) tenga un 
\f2\b \cf2 formulario con countdown en tiempo real
\f1\b0 \cf2  mostrando los segundos que faltan para que caduque el OTP.\
\
\'bfQuieres que lo arme ahora? Adelante\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 , vamos a armar el 
\f2\b \cf2 formulario con countdown en tiempo real
\f1\b0 \cf2  para que el usuario vea cu\'e1ntos segundos le quedan antes de que expire el OTP en iOS, Android y Web usando una base com\'fan con 
\f2\b \cf2 React + React Native (Expo)
\f1\b0 \cf2 .\
\
As\'ed tendr\'e1s 
\f2\b \cf2 un solo c\'f3digo
\f1\b0 \cf2  para web y m\'f3vil.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 1. Pantalla de Reclamar Negocio (Solicitud de OTP)
\f1\b0\fs28 \cf2 \
\
Archivo: 
\f5 \cf2 ClaimBusinessScreen.js\
\
import React, \{ useState \} from 'react';\
import \{ View, Text, TextInput, Button, Alert, Platform \} from 'react-native';\
\
export default function ClaimBusinessScreen(\{ navigation, route \}) \{\
  const [phoneNumber, setPhoneNumber] = useState('');\
  const [loading, setLoading] = useState(false);\
\
  const businessId = route.params?.businessId; // Pasado desde la lista de negocios\
\
  const requestOTP = async () => \{\
    if (!phoneNumber) \{\
      return Alert.alert("Error", "Ingresa un n\'famero de tel\'e9fono");\
    \}\
    setLoading(true);\
    try \{\
      const res = await fetch(`https://tuservidor.com/api/v1/businesses/$\{businessId\}/claim`, \{\
        method: "POST",\
        headers: \{ "Content-Type": "application/json" \},\
        body: JSON.stringify(\{ phoneNumber \})\
      \});\
      const data = await res.json();\
      if (res.ok) \{\
        Alert.alert("\'c9xito", "OTP enviado por SMS");\
        navigation.navigate("VerifyOTP", \{ token: data.token \});\
      \} else \{\
        Alert.alert("Error", data.error || "No se pudo enviar OTP");\
      \}\
    \} catch (err) \{\
      console.error(err);\
      Alert.alert("Error", "Error de conexi\'f3n");\
    \}\
    setLoading(false);\
  \};\
\
  return (\
    <View style=\{\{ padding: 20 \}\}>\
      <Text style=\{\{ fontSize: 18, marginBottom: 10 \}\}>Ingresa tu n\'famero de tel\'e9fono</Text>\
      <TextInput\
        placeholder="+521234567890"\
        value=\{phoneNumber\}\
        onChangeText=\{setPhoneNumber\}\
        keyboardType="phone-pad"\
        style=\{\{ borderWidth: 1, padding: 10, marginBottom: 15 \}\}\
      />\
      <Button title=\{loading ? "Enviando..." : "Solicitar OTP"\} onPress=\{requestOTP\} disabled=\{loading\} />\
    </View>\
  );\
\}\
\

\f4\b\fs34 \cf2 2. Pantalla de Verificaci\'f3n con Countdown
\f1\b0\fs28 \cf2 \
\
Archivo: 
\f5 \cf2 VerifyOTPScreen.js\
\
import React, \{ useState, useEffect \} from 'react';\
import \{ View, Text, TextInput, Button, Alert \} from 'react-native';\
\
export default function VerifyOTPScreen(\{ navigation, route \}) \{\
  const \{ token \} = route.params;\
  const [otpCode, setOtpCode] = useState('');\
  const [timeLeft, setTimeLeft] = useState(300); // 5 min en segundos\
  const [loading, setLoading] = useState(false);\
\
  useEffect(() => \{\
    if (timeLeft <= 0) return;\
    const timer = setInterval(() => \{\
      setTimeLeft(prev => prev - 1);\
    \}, 1000);\
    return () => clearInterval(timer);\
  \}, [timeLeft]);\
\
  const verifyOTP = async () => \{\
    if (!otpCode) \{\
      return Alert.alert("Error", "Ingresa el c\'f3digo OTP");\
    \}\
    setLoading(true);\
    try \{\
      const res = await fetch(`https://tuservidor.com/api/v1/businesses/verify-claim`, \{\
        method: "POST",\
        headers: \{ "Content-Type": "application/json" \},\
        body: JSON.stringify(\{ token, otpCode \})\
      \});\
      const data = await res.json();\
      if (res.ok) \{\
        Alert.alert("\'c9xito", "Negocio reclamado exitosamente");\
        navigation.popToTop();\
      \} else \{\
        Alert.alert("Error", data.error || "C\'f3digo incorrecto");\
      \}\
    \} catch (err) \{\
      console.error(err);\
      Alert.alert("Error", "Error de conexi\'f3n");\
    \}\
    setLoading(false);\
  \};\
\
  const minutes = Math.floor(timeLeft / 60);\
  const seconds = timeLeft % 60;\
\
  return (\
    <View style=\{\{ padding: 20 \}\}>\
      <Text style=\{\{ fontSize: 18 \}\}>Ingresa el c\'f3digo OTP</Text>\
      <TextInput\
        placeholder="123456"\
        value=\{otpCode\}\
        onChangeText=\{setOtpCode\}\
        keyboardType="number-pad"\
        style=\{\{ borderWidth: 1, padding: 10, marginBottom: 15 \}\}\
      />\
      <Text style=\{\{ marginBottom: 10 \}\}>\
        El c\'f3digo expira en: \{minutes\}:\{seconds.toString().padStart(2, '0')\}\
      </Text>\
      <Button\
        title=\{loading ? "Verificando..." : "Verificar"\}\
        onPress=\{verifyOTP\}\
        disabled=\{loading || timeLeft <= 0\}\
      />\
      \{timeLeft <= 0 && (\
        <Text style=\{\{ color: 'red', marginTop: 10 \}\}>\
          El c\'f3digo ha expirado. Solicita uno nuevo.\
        </Text>\
      )\}\
    </View>\
  );\
\}\
\

\f4\b\fs34 \cf2 3. Navegaci\'f3n (App.js con Expo Router o React Navigation)
\f1\b0\fs28 \cf2 \
\
Archivo: 
\f5 \cf2 App.js\
\
import \{ NavigationContainer \} from '@react-navigation/native';\
import \{ createStackNavigator \} from '@react-navigation/stack';\
import ClaimBusinessScreen from './ClaimBusinessScreen';\
import VerifyOTPScreen from './VerifyOTPScreen';\
\
const Stack = createStackNavigator();\
\
export default function App() \{\
  return (\
    <NavigationContainer>\
      <Stack.Navigator>\
        <Stack.Screen name="ClaimBusiness" component=\{ClaimBusinessScreen\} options=\{\{ title: 'Reclamar Negocio' \}\} />\
        <Stack.Screen name="VerifyOTP" component=\{VerifyOTPScreen\} options=\{\{ title: 'Verificar OTP' \}\} />\
      </Stack.Navigator>\
    </NavigationContainer>\
  );\
\}\
\

\f4\b\fs34 \cf2 4. Ventajas de este enfoque
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u9989 
\f1  
\f2\b \cf2 C\'f3digo \'fanico
\f1\b0 \cf2  para iOS, Android y Web (con Expo Web)\

\f7 \uc0\u9989 
\f1  
\f2\b \cf2 Countdown en tiempo real
\f1\b0 \cf2  para evitar frustraci\'f3n del usuario\

\f7 \uc0\u9989 
\f1  
\f2\b \cf2 Bloqueo autom\'e1tico
\f1\b0 \cf2  si expira el OTP\

\f7 \uc0\u9989 
\f1  Integraci\'f3n directa con tu 
\f2\b \cf2 API / Twilio
\f1\b0 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, el siguiente paso lo puedo armar para que 
\f2\b \cf2 cuando el tiempo llegue a 0
\f1\b0 \cf2 , el sistema llame autom\'e1ticamente al backend para 
\f2\b \cf2 reenviar un nuevo OTP
\f1\b0 \cf2  y resetear el contador sin que el usuario tenga que ir atr\'e1s y volver a entrar.\
\
Ese ser\'eda el 
\f2\b \cf2 flujo pro
\f1\b0 \cf2  de verificaci\'f3n OTP que usan apps como Uber o WhatsApp.\
\
\'bfQuieres que lo arme as\'ed de una vez? Adelante\
\
Listo 
\f7 \uc0\u55357 \u56960 
\f1 , aqu\'ed tienes el 
\f2\b \cf2 flujo pro
\f1\b0 \cf2  para OTP con 
\f2\b \cf2 reenv\'edo autom\'e1tico cuando expira
\f1\b0 \cf2  y contador que se reinicia.\
Esto es lo que usan apps como 
\f2\b \cf2 Uber
\f1\b0 \cf2  o 
\f2\b \cf2 WhatsApp
\f1\b0 \cf2  para que el usuario no tenga que tocar nada extra.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 1. Pantalla de Reclamar Negocio (Solicitud OTP)
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f11\i \cf2 (misma base de antes, pero ahora paso tambi\'e9n 
\f12 phoneNumber
\f11  para reenviar)\
\
// ClaimBusinessScreen.js\
import React, \{ useState \} from 'react';\
import \{ View, Text, TextInput, Button, Alert \} from 'react-native';\
\
export default function ClaimBusinessScreen(\{ navigation, route \}) \{\
  const [phoneNumber, setPhoneNumber] = useState('');\
  const [loading, setLoading] = useState(false);\
\
  const businessId = route.params?.businessId;\
\
  const requestOTP = async () => \{\
    if (!phoneNumber) return Alert.alert("Error", "Ingresa un n\'famero de tel\'e9fono");\
    setLoading(true);\
    try \{\
      const res = await fetch(`https://tuservidor.com/api/v1/businesses/$\{businessId\}/claim`, \{\
        method: "POST",\
        headers: \{ "Content-Type": "application/json" \},\
        body: JSON.stringify(\{ phoneNumber \})\
      \});\
      const data = await res.json();\
      if (res.ok) \{\
        Alert.alert("\'c9xito", "OTP enviado por SMS");\
        navigation.navigate("VerifyOTP", \{ token: data.token, phoneNumber \});\
      \} else \{\
        Alert.alert("Error", data.error || "No se pudo enviar OTP");\
      \}\
    \} catch (err) \{\
      console.error(err);\
      Alert.alert("Error", "Error de conexi\'f3n");\
    \}\
    setLoading(false);\
  \};\
\
  return (\
    <View style=\{\{ padding: 20 \}\}>\
      <Text style=\{\{ fontSize: 18, marginBottom: 10 \}\}>Ingresa tu n\'famero de tel\'e9fono</Text>\
      <TextInput\
        placeholder="+521234567890"\
        value=\{phoneNumber\}\
        onChangeText=\{setPhoneNumber\}\
        keyboardType="phone-pad"\
        style=\{\{ borderWidth: 1, padding: 10, marginBottom: 15 \}\}\
      />\
      <Button title=\{loading ? "Enviando..." : "Solicitar OTP"\} onPress=\{requestOTP\} disabled=\{loading\} />\
    </View>\
  );\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\i0\b\fs34 \cf2 2. Pantalla de Verificaci\'f3n con Reenv\'edo Autom\'e1tico
\f1\b0\fs28 \cf2 \
\
Cuando el contador llegue a 
\f5 \cf2 0
\f1 \cf2 , llama autom\'e1ticamente al backend para reenviar el OTP y reinicia el contador.\
\
// VerifyOTPScreen.js\
import React, \{ useState, useEffect \} from 'react';\
import \{ View, Text, TextInput, Button, Alert \} from 'react-native';\
\
export default function VerifyOTPScreen(\{ navigation, route \}) \{\
  const \{ token, phoneNumber \} = route.params;\
  const [otpCode, setOtpCode] = useState('');\
  const [timeLeft, setTimeLeft] = useState(300);\
  const [loading, setLoading] = useState(false);\
  const [sendingNewOTP, setSendingNewOTP] = useState(false);\
\
  // Contador\
  useEffect(() => \{\
    if (timeLeft <= 0) \{\
      resendOTP();\
      return;\
    \}\
    const timer = setInterval(() => setTimeLeft(prev => prev - 1), 1000);\
    return () => clearInterval(timer);\
  \}, [timeLeft]);\
\
  // Funci\'f3n para verificar OTP\
  const verifyOTP = async () => \{\
    if (!otpCode) return Alert.alert("Error", "Ingresa el c\'f3digo OTP");\
    setLoading(true);\
    try \{\
      const res = await fetch(`https://tuservidor.com/api/v1/businesses/verify-claim`, \{\
        method: "POST",\
        headers: \{ "Content-Type": "application/json" \},\
        body: JSON.stringify(\{ token, otpCode \})\
      \});\
      const data = await res.json();\
      if (res.ok) \{\
        Alert.alert("\'c9xito", "Negocio reclamado exitosamente");\
        navigation.popToTop();\
      \} else \{\
        Alert.alert("Error", data.error || "C\'f3digo incorrecto");\
      \}\
    \} catch (err) \{\
      console.error(err);\
      Alert.alert("Error", "Error de conexi\'f3n");\
    \}\
    setLoading(false);\
  \};\
\
  // Funci\'f3n para reenviar OTP autom\'e1ticamente\
  const resendOTP = async () => \{\
    setSendingNewOTP(true);\
    try \{\
      const res = await fetch(`https://tuservidor.com/api/v1/businesses/resend-otp`, \{\
        method: "POST",\
        headers: \{ "Content-Type": "application/json" \},\
        body: JSON.stringify(\{ phoneNumber \})\
      \});\
      const data = await res.json();\
      if (res.ok) \{\
        Alert.alert("Nuevo OTP", "Se ha enviado un nuevo c\'f3digo");\
        setOtpCode('');\
        setTimeLeft(300); // Reinicia el contador a 5 minutos\
      \} else \{\
        Alert.alert("Error", data.error || "No se pudo reenviar el OTP");\
      \}\
    \} catch (err) \{\
      console.error(err);\
      Alert.alert("Error", "Error de conexi\'f3n");\
    \}\
    setSendingNewOTP(false);\
  \};\
\
  const minutes = Math.floor(timeLeft / 60);\
  const seconds = timeLeft % 60;\
\
  return (\
    <View style=\{\{ padding: 20 \}\}>\
      <Text style=\{\{ fontSize: 18 \}\}>Ingresa el c\'f3digo OTP</Text>\
      <TextInput\
        placeholder="123456"\
        value=\{otpCode\}\
        onChangeText=\{setOtpCode\}\
        keyboardType="number-pad"\
        style=\{\{ borderWidth: 1, padding: 10, marginBottom: 15 \}\}\
      />\
      <Text style=\{\{ marginBottom: 10 \}\}>\
        El c\'f3digo expira en: \{minutes\}:\{seconds.toString().padStart(2, '0')\}\
      </Text>\
      <Button\
        title=\{loading ? "Verificando..." : "Verificar"\}\
        onPress=\{verifyOTP\}\
        disabled=\{loading\}\
      />\
      \{sendingNewOTP && <Text style=\{\{ marginTop: 10, color: 'blue' \}\}>Enviando nuevo OTP...</Text>\}\
    </View>\
  );\
\}\
\

\f4\b\fs34 \cf2 3. Flujo Mejorado
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Usuario recibe OTP 
\f3 \uc0\u8594 
\f2  inicia contador de 5 min
\f1\b0 \
	\'95	Si expira 
\f2\b autom\'e1ticamente llama a resend-otp
\f1\b0  y reinicia\
	\'95	No necesita retroceder o pedir manualmente el c\'f3digo\
	\'95	Puede seguir intentando verificar con el nuevo OTP\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, puedo hacerte tambi\'e9n 
\f2\b \cf2 la versi\'f3n para que detecte el OTP autom\'e1ticamente desde el SMS en Android
\f1\b0 \cf2  usando la API de 
\f2\b \cf2 Google SMS Retriever
\f1\b0 \cf2 , as\'ed ni siquiera tiene que escribirlo.\
Esto lo har\'eda a\'fan m\'e1s r\'e1pido y pro.\
\
\'bfQuieres que lo arme tambi\'e9n con detecci\'f3n autom\'e1tica del OTP desde el SMS? Adelante\
\
Perfecto, aqu\'ed integramos 
\f2\b \cf2 la expiraci\'f3n de OTP
\f1\b0 \cf2  en el flujo que ya tenemos.\
Vamos a establecer un tiempo de vida de 
\f2\b \cf2 5 minutos
\f1\b0 \cf2  para cada c\'f3digo y validarlo en la verificaci\'f3n.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 1. Actualizar el modelo en Prisma
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 prisma/schema.prisma
\f1 \cf2  a\'f1adimos un campo 
\f5 \cf2 expiresAt
\f1 \cf2  a la tabla 
\f5 \cf2 BusinessClaim
\f1 \cf2 :\
\
model BusinessClaim \{\
  id          Int      @id @default(autoincrement())\
  businessId  Int\
  phoneNumber String\
  otpCode     String\
  token       String   @unique\
  status      String   @default("pending")\
  expiresAt   DateTime\
  createdAt   DateTime @default(now())\
\
  business    Business @relation(fields: [businessId], references: [id])\
\}\
\
Luego ejecutamos:\
\
npx prisma migrate dev --name add_expires_at\
\

\f4\b\fs34 \cf2 2. Generar la fecha de expiraci\'f3n al crear el OTP
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 claimBusiness
\f1 \cf2  actualizamos:\
\
// Calcular fecha de expiraci\'f3n (5 minutos despu\'e9s)\
const expiresAt = new Date(Date.now() + 5 * 60 * 1000);\
\
const claim = await prisma.businessClaim.create(\{\
  data: \{\
    businessId: Number(id),\
    phoneNumber,\
    otpCode,\
    token,\
    expiresAt\
  \}\
\});\
\

\f4\b\fs34 \cf2 3. Validar expiraci\'f3n en verifyClaim
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 verifyClaim
\f1 \cf2  a\'f1adimos la validaci\'f3n:\
\
// Verificar que el OTP no haya expirado\
if (new Date() > claim.expiresAt) \{\
  return res.status(400).json(\{ error: "El c\'f3digo OTP ha expirado. Solicita uno nuevo." \});\
\}\
\

\f4\b\fs34 \cf2 4. Flujo final
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u55357 \u56548 
\f2\b  Paso 1: Usuario solicita claim
\f1\b0 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Guardamos OTP + 
\f5 expiresAt
\f1 .\
	\'95	Mandamos SMS con Twilio.\
	\'95	Devolvemos token para la verificaci\'f3n.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u55357 \u56549 
\f2\b  Paso 2: Usuario env\'eda token + c\'f3digo
\f1\b0 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Buscamos en DB y validamos:\
\pard\tqr\tx660\tx820\li820\fi-820\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Que exista y est\'e9 
\f5 pending
\f1 .\

\f6 	2.	Que el OTP coincida.\
	3.	Que 
\f5 expiresAt
\f1  sea > fecha actual.\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Si todo est\'e1 bien \uc0\u8594  marcamos 
\f5 verified
\f1  y asignamos tel\'e9fono al negocio.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, ahora puedo 
\f2\b \cf2 crear un endpoint adicional para reenviar OTP
\f1\b0 \cf2  en caso de que expire, reutilizando el token o generando uno nuevo.\
Esto har\'eda que el usuario no tenga que empezar desde cero al reclamar su negocio.\
\
\'bfQuieres que lo haga?\
\
Adelante\
\
Perfecto, vamos a crear el 
\f2\b \cf2 endpoint para reenviar el OTP
\f1\b0 \cf2  cuando haya expirado o el usuario no lo haya recibido.\
\
Lo haremos para que:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Reutilice el mismo token
\f1\b0  que se gener\'f3 en el 
\f5 claim
\f1  inicial.\
	\'95	Genere un nuevo c\'f3digo OTP.\
	\'95	Actualice 
\f5 expiresAt
\f1  (5 min nuevos).\
	\'95	Vuelva a mandar el SMS.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs34 \cf2 1. Endpoint POST /api/v1/businesses/claim/resend\
\
// src/controllers/businessController.js\
\
import prisma from '../prismaClient.js';\
import twilio from 'twilio';\
import crypto from 'crypto';\
\
const twilioClient = twilio(process.env.TWILIO_SID, process.env.TWILIO_AUTH);\
\
export const resendClaimOtp = async (req, res) => \{\
  const \{ token \} = req.body;\
\
  if (!token) \{\
    return res.status(400).json(\{ error: "Token requerido" \});\
  \}\
\
  try \{\
    const claim = await prisma.businessClaim.findUnique(\{\
      where: \{ token \}\
    \});\
\
    if (!claim) \{\
      return res.status(404).json(\{ error: "Solicitud no encontrada" \});\
    \}\
\
    if (claim.status !== "pending") \{\
      return res.status(400).json(\{ error: "Esta solicitud ya fue verificada o rechazada" \});\
    \}\
\
    // Generar nuevo OTP\
    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();\
    const expiresAt = new Date(Date.now() + 5 * 60 * 1000);\
\
    // Actualizar claim\
    await prisma.businessClaim.update(\{\
      where: \{ id: claim.id \},\
      data: \{\
        otpCode,\
        expiresAt\
      \}\
    \});\
\
    // Enviar SMS con Twilio\
    await twilioClient.messages.create(\{\
      body: `Tu nuevo c\'f3digo OTP para reclamar tu negocio es: $\{otpCode\}. Expira en 5 minutos.`,\
      from: process.env.TWILIO_PHONE,\
      to: claim.phoneNumber\
    \});\
\
    return res.json(\{ message: "Nuevo OTP enviado correctamente" \});\
\
  \} catch (error) \{\
    console.error(error);\
    return res.status(500).json(\{ error: "Error reenviando OTP" \});\
  \}\
\};\
\
2. Ruta
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 src/routes/businessRoutes.js
\f1 \cf2  a\'f1adimos:\
\
import \{ resendClaimOtp \} from '../controllers/businessController.js';\
\
router.post('/claim/resend', resendClaimOtp);\
\

\f4\b\fs34 \cf2 3. Flujo final del claim con reenv\'edo
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Usuario pide claim inicial
\f1\b0 \cf2  \uc0\u8594  recibe OTP.\

\f6 \cf2 	2.	Si 
\f2\b \cf2 expira o no llega
\f1\b0 \cf2 , env\'eda 
\f5 POST /claim/resend
\f1  con el token.\

\f6 \cf2 	3.	Generamos nuevo OTP, actualizamos DB, reenv\'edamos SMS.\
	4.	Usuario vuelve a usar 
\f5 \cf2 POST /verify
\f1  con el nuevo c\'f3digo.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, ahora puedo dejarte 
\f2\b \cf2 todo el flujo Claim + Resend + Verify en un solo diagrama visual
\f1\b0 \cf2  para que tengamos claro c\'f3mo est\'e1 conectado en el MVP.\
Eso nos ayudar\'e1 para la siguiente fase donde hacemos el 
\f2\b \cf2 mapa interactivo y b\'fasqueda por distancia
\f1\b0 \cf2 .\
\
\'bfQuieres que te lo arme ya? Adelante\
\
Perfecto, aqu\'ed tienes el 
\f2\b \cf2 flujo completo Claim + Resend + Verify
\f1\b0 \cf2  de tu app de directorio zonal para el MVP de 
\f2\b \cf2 Caucel, M\'e9rida
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  Diagrama de Flujo \'97 Reclamaci\'f3n de Negocio con OTP\
\
[Usuario] \
   \uc0\u9474 \
   \uc0\u9474  (1) POST /api/v1/businesses/:id/claim\
   \uc0\u9474        phoneNumber\
   \uc0\u9660 \
[Backend - Claim Controller]\
   \uc0\u9474 \
   \uc0\u9474  - Valida que el negocio exista\
   \uc0\u9474  - Inserta en business_claims:\
   \uc0\u9474      \{ businessId, phoneNumber, otpCode, token, expiresAt \}\
   \uc0\u9474  - Env\'eda OTP por SMS con Twilio\
   \uc0\u9660 \
[Usuario recibe SMS con OTP y token]\
   \uc0\u9474 \
   \uc0\u9474  
\f9 \uc0\u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9488 
\f4 \
   \uc0\u9474                                         \u9474 \
   \uc0\u9474  (2) POST /api/v1/businesses/claim/resend (opcional si expira o no llega)\
   \uc0\u9474         \{ token \}\
   \uc0\u9660                                         \u9474 \
[Backend - Resend Controller]               \uc0\u9474 \
   \uc0\u9474                                         \u9474 \
   \uc0\u9474  - Busca claim por token                 \u9474 \
   \uc0\u9474  - Valida que status = "pending"         \u9474 \
   \uc0\u9474  - Genera nuevo OTP + nueva fecha exp.   \u9474 \
   \uc0\u9474  - Actualiza registro en DB              \u9474 \
   \uc0\u9474  - Env\'eda nuevo OTP por SMS               \u9474 \
   \uc0\u9660                                         \u9474 \
[Usuario recibe nuevo OTP]                   \uc0\u9474 \
   \uc0\u9474                                         \u9474 \
   \uc0\u9474  (3) POST /api/v1/businesses/claim/verify\
   \uc0\u9474        \{ token, otpCode \}\
   \uc0\u9660 \
[Backend - Verify Controller]\
   \uc0\u9474 \
   \uc0\u9474  - Valida que token exista\
   \uc0\u9474  - Verifica que OTP coincida y no haya expirado\
   \uc0\u9474  - Actualiza claim.status = "verified"\
   \uc0\u9474  - Marca negocio como "claimed" por este usuario\
   \uc0\u9660 \

\f7\b0 \uc0\u9989 
\f4\b  **Negocio reclamado con \'e9xito**\
\

\f7\b0 \uc0\u55357 \u56514 
\f4\b  Estructura de Archivos del M\'f3dulo Claim\
\
src/\
 
\f8 \'84\'a5\'84\'9f
\f4  controllers/\
 \uc0\u9474     
\f8 \'84\'a5\'84\'9f
\f4  businessController.js   # claim, resend, verify\
 \uc0\u9474 \
 
\f8 \'84\'a5\'84\'9f
\f4  routes/\
 \uc0\u9474     
\f8 \'84\'a5\'84\'9f
\f4  businessRoutes.js       # rutas del m\'f3dulo\
 \uc0\u9474 \
 
\f8 \'84\'a5\'84\'9f
\f4  prisma/\
 \uc0\u9474     
\f8 \'84\'a5\'84\'9f
\f4  schema.prisma           # definici\'f3n de tablas\
 \uc0\u9474 \
 
\f8 \'84\'a5\'84\'9f
\f4  services/\
 \uc0\u9474     
\f8 \'84\'a5\'84\'9f
\f4  twilioService.js        # wrapper para enviar SMS\
\

\f7\b0 \uc0\u55357 \u56522 
\f4\b  Tabla en DB para business_claims\
\
CREATE TABLE business_claims (\
    id SERIAL PRIMARY KEY,\
    businessId INT NOT NULL,\
    phoneNumber VARCHAR(20) NOT NULL,\
    otpCode VARCHAR(6) NOT NULL,\
    token VARCHAR(64) UNIQUE NOT NULL,\
    status VARCHAR(20) DEFAULT 'pending', -- pending, verified, rejected\
    expiresAt TIMESTAMP NOT NULL,\
    createdAt TIMESTAMP DEFAULT NOW(),\
    updatedAt TIMESTAMP DEFAULT NOW(),\
    FOREIGN KEY (businessId) REFERENCES businesses(id)\
);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs28 \cf2 \uc0\u9989 
\f1  Con esto el 
\f2\b \cf2 proceso de verificaci\'f3n por SMS
\f1\b0 \cf2  queda 100% funcional y listo para conectarlo con la base de negocios que vamos a obtener de 
\f2\b \cf2 Google Maps / Places API
\f1\b0 \cf2  para Caucel.\
\
Si quieres, ahora puedo pasar a 
\f2\b \cf2 la fase 2 del MVP
\f1\b0 \cf2  que es la 
\f2\b \cf2 base de datos y API para listar negocios con b\'fasqueda por distancia + mapa interactivo
\f1\b0 \cf2  para iOS, Android y Web.\
As\'ed ya podremos verlos en un mapa filtrados por categor\'eda.\
\
\'bfQuieres que arranquemos esa parte ya? Adelante\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Vamos a crear la 
\f2\b \cf2 Fase 2 del MVP
\f1\b0 \cf2 : la 
\f2\b \cf2 base de datos + API de b\'fasqueda de negocios por distancia + mapa interactivo
\f1\b0 \cf2  para 
\f2\b \cf2 Caucel, M\'e9rida
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  Objetivo de esta fase
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Base de datos inicial
\f1\b0 \cf2  con negocios de Caucel (puede venir de Google Maps API o scrape controlado).\

\f6 \cf2 	2.	
\f2\b \cf2 API
\f1\b0 \cf2  que permita:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Buscar negocios por 
\f2\b \cf2 categor\'eda
\f1\b0 \cf2  (ej. peluquer\'eda, taller mec\'e1nico, farmacia).\
	\'95	Filtrar por 
\f2\b \cf2 distancia
\f1\b0 \cf2  desde la ubicaci\'f3n del usuario.\
	\'95	Mostrar en 
\f2\b \cf2 mapa interactivo
\f1\b0 \cf2  (Google Maps o Leaflet).\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	3.	Preparar estructura 
\f2\b \cf2 multi-zona
\f1\b0 \cf2  para que luego sea escalable a otras zonas de M\'e9rida.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Dise\'f1o de Base de Datos
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Tabla businesses\
\
CREATE TABLE businesses (\
    id SERIAL PRIMARY KEY,\
    name VARCHAR(255) NOT NULL,\
    category VARCHAR(100) NOT NULL,\
    phoneNumber VARCHAR(20),\
    address TEXT,\
    latitude DECIMAL(10, 8) NOT NULL,\
    longitude DECIMAL(11, 8) NOT NULL,\
    website VARCHAR(255),\
    rating DECIMAL(2,1),\
    claimed BOOLEAN DEFAULT FALSE,\
    createdAt TIMESTAMP DEFAULT NOW(),\
    updatedAt TIMESTAMP DEFAULT NOW()\
);\
\
\'cdndice para b\'fasquedas geoespaciales\
\
CREATE INDEX idx_businesses_location\
ON businesses (latitude, longitude);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  API REST Endpoints\
\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth906\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2066\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4652\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sa240\qc\partightenfactor0

\f13\fs24 \cf0 \expnd0\expndtw0\kerning0
M\'e9todo\cell 
\pard\intbl\itap1\pardeftab720\sa240\qc\partightenfactor0
\cf0 Endpoint\cell 
\pard\intbl\itap1\pardeftab720\sa240\qc\partightenfactor0
\cf0 Descripci\'f3n\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth906\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2066\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4652\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0

\f14\b0 \cf0 GET\cell 
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 /api/v1/businesses\cell 
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 Lista negocios filtrados por categor\'eda y distancia\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth906\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2066\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4652\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 GET\cell 
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 /api/v1/businesses/:id\cell 
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 Detalle de un negocio\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth906\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2066\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4652\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 POST\cell 
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 /api/v1/businesses\cell 
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 (Admin) Crear negocio\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth906\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2066\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4652\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 PUT\cell 
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 /api/v1/businesses/:id\cell 
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 (Admin / Claim Owner) Actualizar negocio\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth906\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2066\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4652\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 DELETE\cell 
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 /api/v1/businesses/:id\cell 
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf0 (Admin) Eliminar negocio\cell \lastrow\row
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \kerning1\expnd0\expndtw0 3\uc0\u65039 \u8419 
\f4\b  Endpoint de b\'fasqueda con distancia\
\
// controllers/businessController.js\
const getBusinesses = async (req, res) => \{\
  const \{ lat, lng, category, radius = 5000 \} = req.query;\
\
  const businesses = await prisma.$queryRaw`\
    SELECT *, \
      (6371000 * acos(\
        cos(radians($\{lat\})) * cos(radians(latitude)) *\
        cos(radians(longitude) - radians($\{lng\})) +\
        sin(radians($\{lat\})) * sin(radians(latitude))\
      )) AS distance\
    FROM businesses\
    WHERE category ILIKE $\{'%' + category + '%'\}\
    HAVING distance <= $\{radius\}\
    ORDER BY distance ASC\
  `;\
\
  res.json(businesses);\
\};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs28 \cf2 \uc0\u55357 \u56525 
\f1  Esto usa 
\f2\b \cf2 f\'f3rmula Haversine
\f1\b0 \cf2  para calcular la distancia entre la ubicaci\'f3n del usuario y cada negocio.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 4\uc0\u65039 \u8419 
\f4\b  Integraci\'f3n con Mapa Interactivo
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Frontend Web y App
\f1\b0 :\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Usar 
\f2\b \cf2 Leaflet.js
\f1\b0 \cf2  (gratis) o Google Maps JS SDK.\
	\'95	Mostrar pines de negocios con nombre, categor\'eda y bot\'f3n para abrir en Google Maps.\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Marker Cluster
\f1\b0  para agrupar negocios cercanos.\
	\'95	
\f2\b Bot\'f3n \'93Ver Cerca de M\'ed\'94
\f1\b0  \uc0\u8594  obtiene geolocalizaci\'f3n y llama a la API con lat/lng del usuario.\
\
Ejemplo con Leaflet:\
const map = L.map('map').setView([20.9986, -89.6881], 14);\
\
L.tileLayer('https://\{s\}.tile.openstreetmap.org/\{z\}/\{x\}/\{y\}.png', \{\
  attribution: '&copy; OpenStreetMap contributors'\
\}).addTo(map);\
\
fetch(`/api/v1/businesses?lat=20.9986&lng=-89.6881&category=peluquer\'eda&radius=3000`)\
  .then(res => res.json())\
  .then(data => \{\
    data.forEach(b => \{\
      L.marker([b.latitude, b.longitude])\
        .addTo(map)\
        .bindPopup(`<b>$\{b.name\}</b><br>$\{b.address\}`);\
    \});\
  \});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 5\uc0\u65039 \u8419 
\f4\b  Proceso para poblar la base de datos (Caucel)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Opci\'f3n gratis
\f1\b0 : Usar 
\f2\b Google Maps Places API
\f1\b0  (Places Nearby + Place Details).\
	\'95	
\f2\b Opci\'f3n r\'e1pida
\f1\b0 : Scraper controlado con Puppeteer + b\'fasqueda en Maps.\
	\'95	Campos m\'ednimos: nombre, categor\'eda, direcci\'f3n, tel\'e9fono, coordenadas.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, lo siguiente que puedo hacer es 
\f2\b \cf2 armarte el script para poblar autom\'e1ticamente la tabla businesses con datos reales de Caucel usando Google Places API
\f1\b0 \cf2  para que desde el d\'eda 1 tengas un directorio lleno y listo para el mapa.\
\
\'bfQuieres que te lo arme ya? Adelante\
\
Perfecto, vamos a armar el 
\f2\b \cf2 script para poblar autom\'e1ticamente la tabla businesses con datos reales de Caucel
\f1\b0 \cf2  usando la 
\f2\b \cf2 Google Places API
\f1\b0 \cf2 .\
\
Este script estar\'e1 listo para correr en 
\f2\b \cf2 Node.js
\f1\b0 \cf2 , llenar\'e1 tu base de datos PostgreSQL y quedar\'e1 listo para tu API de b\'fasqueda.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Requisitos previos
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Cuenta Google Cloud
\f1\b0 \cf2  con API habilitada:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Places API\
	\'95	Maps JavaScript API (si vas a usar el mapa interactivo)\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	2.	
\f2\b \cf2 Clave de API
\f1\b0 \cf2  (
\f5 GOOGLE_API_KEY
\f1 )\

\f6 \cf2 	3.	
\f2\b \cf2 Base de datos PostgreSQL
\f1\b0 \cf2  ya creada con la tabla 
\f5 businesses
\f1 .\

\f6 \cf2 	4.	Instalar dependencias:\
\
npm init -y\
npm install axios pg dotenv\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Script populateBusinesses.js\
\
require('dotenv').config();\
const axios = require('axios');\
const \{ Client \} = require('pg');\
\
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;\
\
// Coordenadas de Caucel, M\'e9rida\
const LAT = 20.9986;\
const LNG = -89.6881;\
const RADIUS = 3000; // en metros\
const CATEGORY = "restaurant|store|pharmacy|bakery|cafe|bar|gym"; // tipos de negocios\
\
// Conexi\'f3n a PostgreSQL\
const db = new Client(\{\
  host: process.env.DB_HOST,\
  user: process.env.DB_USER,\
  password: process.env.DB_PASS,\
  database: process.env.DB_NAME,\
  port: 5432,\
\});\
\
async function fetchPlaces() \{\
  let url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=$\{LAT\},$\{LNG\}&radius=$\{RADIUS\}&types=$\{CATEGORY\}&key=$\{GOOGLE_API_KEY\}`;\
  let allPlaces = [];\
\
  while (url) \{\
    const res = await axios.get(url);\
    const data = res.data;\
    allPlaces = [...allPlaces, ...data.results];\
\
    // Siguiente p\'e1gina si existe\
    if (data.next_page_token) \{\
      await new Promise(r => setTimeout(r, 2000)); // esperar por token v\'e1lido\
      url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?pagetoken=$\{data.next_page_token\}&key=$\{GOOGLE_API_KEY\}`;\
    \} else \{\
      url = null;\
    \}\
  \}\
  return allPlaces;\
\}\
\
async function insertIntoDB(places) \{\
  await db.connect();\
  for (const p of places) \{\
    const query = `\
      INSERT INTO businesses (name, category, address, latitude, longitude, rating, claimed)\
      VALUES ($1, $2, $3, $4, $5, $6, false)\
      ON CONFLICT DO NOTHING\
    `;\
    const values = [\
      p.name,\
      p.types ? p.types[0] : "otros",\
      p.vicinity || '',\
      p.geometry.location.lat,\
      p.geometry.location.lng,\
      p.rating || null\
    ];\
    await db.query(query, values);\
  \}\
  await db.end();\
\}\
\
(async () => \{\
  console.log("
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Obteniendo negocios de Google Places...");\
  const places = await fetchPlaces();\
  console.log(`
\f7\b0 \uc0\u9989 
\f4\b  Encontrados $\{places.length\} negocios`);\
\
  console.log("
\f7\b0 \uc0\u55357 \u56510 
\f4\b  Insertando en base de datos...");\
  await insertIntoDB(places);\
  console.log("
\f7\b0 \uc0\u55356 \u57263 
\f4\b  Base de datos poblada con \'e9xito");\
\})();\
\

\f7\b0 3\uc0\u65039 \u8419 
\f4\b  Variables .env\
\
GOOGLE_API_KEY=TU_API_KEY\
DB_HOST=localhost\
DB_USER=postgres\
DB_PASS=tu_password\
DB_NAME=nombre_base\
\

\f7\b0 4\uc0\u65039 \u8419 
\f4\b  Ejecuci\'f3n\
\
node populateBusinesses.js\
\

\f1\b0\fs28 \cf2 El script har\'e1 peticiones a Google Places.\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Insertar\'e1 cada negocio en tu tabla 
\f5 businesses
\f1 .\
	\'95	Quedar\'e1 listo para consultarse desde el endpoint 
\f5 /api/v1/businesses
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, el siguiente paso que te puedo armar es el 
\f2\b \cf2 endpoint en Express para buscar estos negocios por distancia + categor\'eda y devolverlos listos para el mapa
\f1\b0 \cf2 .\
\
\'bfQuieres que lo arme ya para que quede redondo? Adelante\
\
Perfecto, ahora vamos a crear el 
\f2\b \cf2 endpoint /api/v1/businesses/search
\f1\b0 \cf2  para:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Filtrar por 
\f2\b categor\'eda
\f1\b0  (ej: peluquer\'eda, farmacia, taller).\
	\'95	Filtrar por 
\f2\b distancia
\f1\b0  desde la ubicaci\'f3n del usuario.\
	\'95	Devolver resultados listos para un 
\f2\b mapa interactivo
\f1\b0  (lat, lng, nombre, rating, direcci\'f3n).\
	\'95	Optimizado con 
\f2\b PostgreSQL + extensi\'f3n PostGIS
\f1\b0  para c\'e1lculo geoespacial.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Preparar la base de datos para b\'fasquedas por distancia
\f1\b0\fs28 \cf2 \
\
En PostgreSQL, instalamos 
\f2\b \cf2 PostGIS
\f1\b0 \cf2 :\
\
CREATE EXTENSION IF NOT EXISTS postgis;\
\
Agregamos columna geogr\'e1fica a 
\f5 \cf2 businesses
\f1 \cf2 :\
\
ALTER TABLE businesses ADD COLUMN location geography(Point, 4326);\
\
-- Poblar 'location' con lat/lng existentes\
UPDATE businesses\
SET location = ST_SetSRID(ST_MakePoint(longitude, latitude), 4326);\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Endpoint en Express
\f1\b0\fs28 \cf2 \
\
Archivo: 
\f5 \cf2 routes/businesses.js\
\
const express = require('express');\
const router = express.Router();\
const \{ Pool \} = require('pg');\
\
const pool = new Pool(\{\
  host: process.env.DB_HOST,\
  user: process.env.DB_USER,\
  password: process.env.DB_PASS,\
  database: process.env.DB_NAME,\
  port: 5432,\
\});\
\
router.get('/search', async (req, res) => \{\
  try \{\
    const \{ lat, lng, category, radius \} = req.query;\
\
    if (!lat || !lng) \{\
      return res.status(400).json(\{ error: "Par\'e1metros 'lat' y 'lng' son requeridos" \});\
    \}\
\
    const searchRadius = radius ? parseInt(radius) : 3000; // por defecto 3 km\
\
    const query = `\
      SELECT \
        id, name, category, address, latitude, longitude, rating,\
        ST_Distance(\
          location, \
          ST_SetSRID(ST_MakePoint($1, $2), 4326)\
        ) AS distance\
      FROM businesses\
      WHERE ($3::text IS NULL OR category ILIKE $3)\
      AND ST_DWithin(\
        location,\
        ST_SetSRID(ST_MakePoint($1, $2), 4326),\
        $4\
      )\
      ORDER BY distance ASC\
      LIMIT 50;\
    `;\
\
    const values = [\
      parseFloat(lng),\
      parseFloat(lat),\
      category ? `%$\{category\}%` : null,\
      searchRadius\
    ];\
\
    const \{ rows \} = await pool.query(query, values);\
\
    res.json(\{\
      results: rows.map(b => (\{\
        id: b.id,\
        name: b.name,\
        category: b.category,\
        address: b.address,\
        latitude: b.latitude,\
        longitude: b.longitude,\
        rating: b.rating,\
        distance_m: Math.round(b.distance)\
      \}))\
    \});\
\
  \} catch (err) \{\
    console.error(err);\
    res.status(500).json(\{ error: "Error interno del servidor" \});\
  \}\
\});\
\
module.exports = router;\
\

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Integrar en tu servidor
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 server.js
\f1 \cf2 :\
\
const express = require('express');\
const app = express();\
require('dotenv').config();\
\
app.use(express.json());\
\
// Rutas\
app.use('/api/v1/businesses', require('./routes/businesses'));\
\
const PORT = process.env.PORT || 5000;\
app.listen(PORT, () => console.log(`
\f7 \uc0\u55357 \u56960 
\f1  Servidor escuchando en puerto $\{PORT\}`));\
\

\f7\fs34 \cf2 4\uc0\u65039 \u8419 
\f4\b  Ejemplo de uso
\f1\b0\fs28 \cf2 \
\
Petici\'f3n para buscar 
\f2\b \cf2 farmacias a 2 km del usuario
\f1\b0 \cf2 :\
\
GET http://localhost:5000/api/v1/businesses/search?lat=20.9986&lng=-89.6881&category=farmacia&radius=2000\
\
Respuesta:\
\
\{\
  "results": [\
    \{\
      "id": 1,\
      "name": "Farmacia Caucel",\
      "category": "pharmacy",\
      "address": "Av. 200, Caucel, M\'e9rida",\
      "latitude": 20.9991,\
      "longitude": -89.6875,\
      "rating": 4.5,\
      "distance_m": 180\
    \}\
  ]\
\}\
\
Si quieres, el pr\'f3ximo paso que puedo armar es 
\f2\b \cf2 la pantalla en Flutter + mapa interactivo
\f1\b0 \cf2  para mostrar estos negocios y que el usuario pueda buscar visualmente.\
Ese ser\'eda ya el 
\f2\b \cf2 MVP funcional en m\'f3vil
\f1\b0 \cf2  listo para iOS y Android.\
\
\'bfQuieres que lo arme ya? Adelante\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Vamos a armar la 
\f2\b \cf2 pantalla en Flutter
\f1\b0 \cf2  que consume el endpoint 
\f5 \cf2 /api/v1/businesses/search
\f1 \cf2  y muestra los negocios en un 
\f2\b \cf2 mapa interactivo
\f1\b0 \cf2  + lista.\
\
Te lo divido en 4 partes para que lo puedas implementar sin perder nada:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Dependencias en Flutter
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 pubspec.yaml
\f1 \cf2  agrega:\
\
dependencies:\
  flutter:\
    sdk: flutter\
  http: ^1.2.1\
  google_maps_flutter: ^2.9.0\
  geolocator: ^12.0.0\
\
Despu\'e9s ejecuta:\
\
flutter pub get\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Servicio para obtener negocios
\f1\b0\fs28 \cf2 \
\
Archivo: 
\f5 \cf2 services/business_service.dart\
\
import 'dart:convert';\
import 'package:http/http.dart' as http;\
\
class Business \{\
  final int id;\
  final String name;\
  final String category;\
  final String address;\
  final double latitude;\
  final double longitude;\
  final double rating;\
  final int distanceM;\
\
  Business(\{\
    required this.id,\
    required this.name,\
    required this.category,\
    required this.address,\
    required this.latitude,\
    required this.longitude,\
    required this.rating,\
    required this.distanceM,\
  \});\
\
  factory Business.fromJson(Map<String, dynamic> json) \{\
    return Business(\
      id: json['id'],\
      name: json['name'],\
      category: json['category'],\
      address: json['address'],\
      latitude: json['latitude'],\
      longitude: json['longitude'],\
      rating: json['rating']?.toDouble() ?? 0,\
      distanceM: json['distance_m'],\
    );\
  \}\
\}\
\
class BusinessService \{\
  static const String baseUrl = "http://TU_API_URL/api/v1/businesses/search";\
\
  static Future<List<Business>> searchBusinesses(double lat, double lng, \{String? category, int radius = 3000\}) async \{\
    final uri = Uri.parse(\
      "$baseUrl?lat=$lat&lng=$lng&radius=$radius$\{category != null ? "&category=$category" : ""\}"\
    );\
\
    final res = await http.get(uri);\
\
    if (res.statusCode == 200) \{\
      final data = json.decode(res.body);\
      final List list = data['results'];\
      return list.map((b) => Business.fromJson(b)).toList();\
    \} else \{\
      throw Exception("Error al obtener negocios");\
    \}\
  \}\
\}\
\

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Pantalla con Google Maps + lista
\f1\b0\fs28 \cf2 \
\
Archivo: 
\f5 \cf2 screens/business_map_screen.dart\
\
import 'package:flutter/material.dart';\
import 'package:google_maps_flutter/google_maps_flutter.dart';\
import 'package:geolocator/geolocator.dart';\
import '../services/business_service.dart';\
\
class BusinessMapScreen extends StatefulWidget \{\
  @override\
  _BusinessMapScreenState createState() => _BusinessMapScreenState();\
\}\
\
class _BusinessMapScreenState extends State<BusinessMapScreen> \{\
  GoogleMapController? mapController;\
  Position? currentPosition;\
  List<Business> businesses = [];\
  Set<Marker> markers = \{\};\
\
  @override\
  void initState() \{\
    super.initState();\
    _getUserLocation();\
  \}\
\
  Future<void> _getUserLocation() async \{\
    LocationPermission permission = await Geolocator.requestPermission();\
    if (permission == LocationPermission.denied || permission == LocationPermission.deniedForever) \{\
      return;\
    \}\
    Position pos = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high);\
    setState(() \{\
      currentPosition = pos;\
    \});\
    _loadBusinesses();\
  \}\
\
  Future<void> _loadBusinesses() async \{\
    if (currentPosition == null) return;\
    List<Business> results = await BusinessService.searchBusinesses(\
      currentPosition!.latitude,\
      currentPosition!.longitude,\
      category: "farmacia", // 
\f7 \cf2 \uc0\u55357 \u56633 
\f5 \cf2  puedes hacer din\'e1mico el filtro\
      radius: 3000\
    );\
    setState(() \{\
      businesses = results;\
      markers = results.map((b) \{\
        return Marker(\
          markerId: MarkerId(b.id.toString()),\
          position: LatLng(b.latitude, b.longitude),\
          infoWindow: InfoWindow(\
            title: b.name,\
            snippet: "$\{b.distanceM\} m - 
\f7 \cf2 \uc0\u11088 
\f5 \cf2  $\{b.rating\}"\
          ),\
        );\
      \}).toSet();\
    \});\
  \}\
\
  @override\
  Widget build(BuildContext context) \{\
    if (currentPosition == null) \{\
      return Scaffold(\
        body: Center(child: CircularProgressIndicator()),\
      );\
    \}\
\
    return Scaffold(\
      appBar: AppBar(title: Text("Negocios Cercanos")),\
      body: Column(\
        children: [\
          Expanded(\
            flex: 2,\
            child: GoogleMap(\
              onMapCreated: (controller) => mapController = controller,\
              initialCameraPosition: CameraPosition(\
                target: LatLng(currentPosition!.latitude, currentPosition!.longitude),\
                zoom: 14,\
              ),\
              markers: markers,\
              myLocationEnabled: true,\
            ),\
          ),\
          Expanded(\
            flex: 1,\
            child: ListView.builder(\
              itemCount: businesses.length,\
              itemBuilder: (context, index) \{\
                final b = businesses[index];\
                return ListTile(\
                  title: Text(b.name),\
                  subtitle: Text("$\{b.address\} - $\{b.distanceM\} m"),\
                  trailing: Text("
\f7 \cf2 \uc0\u11088 
\f5 \cf2  $\{b.rating\}"),\
                );\
              \},\
            ),\
          ),\
        ],\
      ),\
    );\
  \}\
\}\
\

\f7\fs34 \cf2 4\uc0\u65039 \u8419 
\f4\b  Agregar a tu app
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 main.dart
\f1 \cf2 :\
\
import 'package:flutter/material.dart';\
import 'screens/business_map_screen.dart';\
\
void main() \{\
  runApp(MyApp());\
\}\
\
class MyApp extends StatelessWidget \{\
  @override\
  Widget build(BuildContext context) \{\
    return MaterialApp(\
      debugShowCheckedModeBanner: false,\
      home: BusinessMapScreen(),\
    );\
  \}\
\}\
\

\f7 \uc0\u9989 
\f1  
\f2\b \cf2 Con esto ya tienes:
\f1\b0 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	El backend en Node.js filtrando por distancia + categor\'eda.\
	\'95	El frontend en Flutter con Google Maps y lista interactiva.\
	\'95	Compatible iOS y Android.\
	\'95	Preparado para Caucel como primer zona del MVP.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, el siguiente paso lo puedo armar con 
\f2\b \cf2 b\'fasqueda en vivo por texto y categor\'eda
\f1\b0 \cf2 , as\'ed el usuario puede escribir \'93taller\'94 o \'93pizza\'94 y actualizar el mapa en tiempo real.\
\'bfQuieres que lo arme ahora? Adelante\
\
Perfecto, vamos a agregar 
\f2\b \cf2 b\'fasqueda en vivo
\f1\b0 \cf2  por texto y categor\'eda para que el mapa y la lista se actualicen en tiempo real.\
\
Te lo voy a dejar listo para que al escribir algo como \'93tacos\'94 o \'93taller\'94 y seleccionar una categor\'eda, el mapa se actualice autom\'e1ticamente.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Modificaciones en la pantalla
\f1\b0\fs28 \cf2 \
\
Archivo: 
\f5 \cf2 screens/business_map_screen.dart
\f1 \cf2 \
Vamos a a\'f1adir un 
\f5 \cf2 TextField
\f1 \cf2  para la b\'fasqueda y un 
\f5 \cf2 DropdownButton
\f1 \cf2  para la categor\'eda.\
\
import 'package:flutter/material.dart';\
import 'package:google_maps_flutter/google_maps_flutter.dart';\
import 'package:geolocator/geolocator.dart';\
import '../services/business_service.dart';\
\
class BusinessMapScreen extends StatefulWidget \{\
  @override\
  _BusinessMapScreenState createState() => _BusinessMapScreenState();\
\}\
\
class _BusinessMapScreenState extends State<BusinessMapScreen> \{\
  GoogleMapController? mapController;\
  Position? currentPosition;\
  List<Business> businesses = [];\
  Set<Marker> markers = \{\};\
\
  String searchQuery = "";\
  String selectedCategory = "Todos";\
\
  final List<String> categories = [\
    "Todos", "Farmacia", "Restaurante", "Taller", "Supermercado"\
  ];\
\
  @override\
  void initState() \{\
    super.initState();\
    _getUserLocation();\
  \}\
\
  Future<void> _getUserLocation() async \{\
    LocationPermission permission = await Geolocator.requestPermission();\
    if (permission == LocationPermission.denied || permission == LocationPermission.deniedForever) \{\
      return;\
    \}\
    Position pos = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high);\
    setState(() \{\
      currentPosition = pos;\
    \});\
    _loadBusinesses();\
  \}\
\
  Future<void> _loadBusinesses() async \{\
    if (currentPosition == null) return;\
\
    String? categoryParam;\
    if (selectedCategory != "Todos") \{\
      categoryParam = selectedCategory.toLowerCase();\
    \}\
\
    List<Business> results = await BusinessService.searchBusinesses(\
      currentPosition!.latitude,\
      currentPosition!.longitude,\
      category: categoryParam,\
      radius: 3000\
    );\
\
    // 
\f7 \uc0\u55357 \u56633 
\f1  Filtrar por texto en el frontend si es necesario\
    if (searchQuery.isNotEmpty) \{\
      results = results.where((b) =>\
        b.name.toLowerCase().contains(searchQuery.toLowerCase()) ||\
        b.category.toLowerCase().contains(searchQuery.toLowerCase())\
      ).toList();\
    \}\
\
    setState(() \{\
      businesses = results;\
      markers = results.map((b) \{\
        return Marker(\
          markerId: MarkerId(b.id.toString()),\
          position: LatLng(b.latitude, b.longitude),\
          infoWindow: InfoWindow(\
            title: b.name,\
            snippet: "$\{b.distanceM\} m - 
\f7 \uc0\u11088 
\f1  $\{b.rating\}"\
          ),\
        );\
      \}).toSet();\
    \});\
  \}\
\
  @override\
  Widget build(BuildContext context) \{\
    if (currentPosition == null) \{\
      return Scaffold(\
        body: Center(child: CircularProgressIndicator()),\
      );\
    \}\
\
    return Scaffold(\
      appBar: AppBar(title: Text("Negocios Cercanos")),\
      body: Column(\
        children: [\
          // 
\f7 \uc0\u55357 \u56589 
\f1  Barra de b\'fasqueda\
          Padding(\
            padding: const EdgeInsets.all(8.0),\
            child: TextField(\
              decoration: InputDecoration(\
                hintText: "Buscar negocio...",\
                prefixIcon: Icon(Icons.search),\
                border: OutlineInputBorder(\
                  borderRadius: BorderRadius.circular(8)\
                )\
              ),\
              onChanged: (value) \{\
                setState(() => searchQuery = value);\
                _loadBusinesses();\
              \},\
            ),\
          ),\
\
          // 
\f7 \uc0\u55357 \u56514 
\f1  Selector de categor\'eda\
          Padding(\
            padding: const EdgeInsets.symmetric(horizontal: 8.0),\
            child: DropdownButtonFormField<String>(\
              value: selectedCategory,\
              items: categories.map((cat) \{\
                return DropdownMenuItem(value: cat, child: Text(cat));\
              \}).toList(),\
              onChanged: (value) \{\
                setState(() => selectedCategory = value!);\
                _loadBusinesses();\
              \},\
              decoration: InputDecoration(\
                labelText: "Categor\'eda",\
                border: OutlineInputBorder(\
                  borderRadius: BorderRadius.circular(8)\
                )\
              ),\
            ),\
          ),\
\
          Expanded(\
            flex: 2,\
            child: GoogleMap(\
              onMapCreated: (controller) => mapController = controller,\
              initialCameraPosition: CameraPosition(\
                target: LatLng(currentPosition!.latitude, currentPosition!.longitude),\
                zoom: 14,\
              ),\
              markers: markers,\
              myLocationEnabled: true,\
            ),\
          ),\
          Expanded(\
            flex: 1,\
            child: ListView.builder(\
              itemCount: businesses.length,\
              itemBuilder: (context, index) \{\
                final b = businesses[index];\
                return ListTile(\
                  title: Text(b.name),\
                  subtitle: Text("$\{b.address\} - $\{b.distanceM\} m"),\
                  trailing: Text("
\f7 \uc0\u11088 
\f1  $\{b.rating\}"),\
                  onTap: () \{\
                    mapController?.animateCamera(\
                      CameraUpdate.newLatLng(\
                        LatLng(b.latitude, b.longitude)\
                      )\
                    );\
                  \},\
                );\
              \},\
            ),\
          ),\
        ],\
      ),\
    );\
  \}\
\}\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Cambios en el servicio
\f1\b0\fs28 \cf2 \
\
Ya lo ten\'edamos, pero si quieres que el 
\f2\b \cf2 filtro por texto
\f1\b0 \cf2  lo haga el backend y no el frontend, se puede a\'f1adir un par\'e1metro 
\f5 \cf2 q
\f1 \cf2  en el endpoint 
\f5 \cf2 /search
\f1 \cf2  para que devuelva solo los negocios que coincidan.\
Esto ahorrar\'eda datos y tiempo.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Resultado
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	El usuario escribe en la barra de b\'fasqueda \uc0\u8594  Mapa y lista se actualizan.\
	\'95	El usuario elige categor\'eda \uc0\u8594  Mapa y lista se actualizan.\
	\'95	Al tocar un negocio en la lista \uc0\u8594  El mapa se mueve a su ubicaci\'f3n.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, puedo armarte 
\f2\b \cf2 la versi\'f3n con filtro por texto y categor\'eda directo en Node.js
\f1\b0 \cf2  para que la b\'fasqueda sea m\'e1s r\'e1pida y ligera.\
\'bfQuieres que lo haga? Adelante\
\
Perfecto, entonces vamos a modificar el 
\f2\b \cf2 endpoint /search en Node.js
\f1\b0 \cf2  para que reciba:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 lat
\f1  y 
\f5 lng
\f1  (coordenadas del usuario)\
	\'95	
\f5 category
\f1  (opcional)\
	\'95	
\f5 q
\f1  (texto de b\'fasqueda opcional)\
	\'95	
\f5 radius
\f1  (opcional, en metros)\
\
y filtre todo 
\f2\b en el backend
\f1\b0  antes de devolver resultados.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  C\'f3digo en Node.js
\f1\b0\fs28 \cf2 \
\
Archivo: 
\f5 \cf2 routes/business.js\
\
const express = require("express");\
const router = express.Router();\
const db = require("../db");\
\
// 
\f7 \cf2 \uc0\u55357 \u56525 
\f5 \cf2  Buscar negocios cercanos con filtros\
router.get("/search", async (req, res) => \{\
  try \{\
    const \{ lat, lng, category, q, radius \} = req.query;\
\
    if (!lat || !lng) \{\
      return res.status(400).json(\{ error: "Faltan coordenadas lat/lng" \});\
    \}\
\
    const searchRadius = radius ? parseInt(radius) : 3000; // metros\
\
    let query = `\
      SELECT id, name, category, address, latitude, longitude, rating,\
      (6371000 * acos(\
        cos(radians(?)) * cos(radians(latitude)) *\
        cos(radians(longitude) - radians(?)) +\
        sin(radians(?)) * sin(radians(latitude))\
      )) AS distanceM\
      FROM businesses\
      WHERE 1=1\
    `;\
\
    const params = [lat, lng, lat];\
\
    // 
\f7 \cf2 \uc0\u55357 \u56514 
\f5 \cf2  Filtrar por categor\'eda\
    if (category) \{\
      query += " AND LOWER(category) = LOWER(?)";\
      params.push(category);\
    \}\
\
    // 
\f7 \cf2 \uc0\u55357 \u56589 
\f5 \cf2  Filtrar por texto en nombre o categor\'eda\
    if (q) \{\
      query += " AND (LOWER(name) LIKE ? OR LOWER(category) LIKE ?)";\
      params.push(`%$\{q.toLowerCase()\}%`, `%$\{q.toLowerCase()\}%`);\
    \}\
\
    query += `\
      HAVING distanceM <= ?\
      ORDER BY distanceM ASC\
      LIMIT 50\
    `;\
    params.push(searchRadius);\
\
    const [rows] = await db.execute(query, params);\
\
    res.json(rows);\
  \} catch (error) \{\
    console.error("Error en b\'fasqueda:", error);\
    res.status(500).json(\{ error: "Error interno del servidor" \});\
  \}\
\});\
\
module.exports = router;\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Ejemplos de uso
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Todos los negocios cercanos a 3km\
\
GET /search?lat=21.1619&lng=-86.8515\
\

\f1\b0 	\'95	
\f2\b Solo farmacias a 5km\
GET /search?lat=21.1619&lng=-86.8515&category=Farmacia&radius=5000\

\f1\b0 	
\f2\b Buscar \'93tacos\'94 sin importar categor\'eda\
GET /search?lat=21.1619&lng=-86.8515&q=tacos\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Buscar \'93taller\'94 en categor\'eda \'93mec\'e1nica\'94 a 2km\
GET /search?lat=21.1619&lng=-86.8515&category=Mecanica&q=taller&radius=2000\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Cambios en Flutter
\f1\b0\fs28 \cf2 \
\
En tu 
\f5 \cf2 BusinessService.searchBusinesses()
\f1 \cf2  ahora podemos pasar tambi\'e9n el 
\f5 \cf2 q
\f1 \cf2  de b\'fasqueda para que el backend filtre:\
\
static Future<List<Business>> searchBusinesses(\
  double lat,\
  double lng, \{\
  String? category,\
  String? query,\
  int radius = 3000,\
\}) async \{\
  final uri = Uri.http('TU_API_URL', '/search', \{\
    'lat': lat.toString(),\
    'lng': lng.toString(),\
    if (category != null) 'category': category,\
    if (query != null && query.isNotEmpty) 'q': query,\
    'radius': radius.toString(),\
  \});\
\
  final res = await http.get(uri);\
\
  if (res.statusCode == 200) \{\
    final data = json.decode(res.body) as List;\
    return data.map((json) => Business.fromJson(json)).toList();\
  \} else \{\
    throw Exception("Error buscando negocios");\
  \}\
\}\
\
Si quieres, ahora puedo dejar 
\f2\b \cf2 todo el flujo de Flutter ya conectado al nuevo endpoint
\f1\b0 \cf2  para que el buscador y el mapa trabajen directamente con los filtros del backend y no en memoria.\
As\'ed ser\'e1 mucho m\'e1s r\'e1pido y ahorrar\'e1 datos.\
\
\'bfQuieres que lo arme ya? Adelante\
\
Perfecto, vamos a dejar 
\f2\b \cf2 todo el flujo de Flutter conectado al nuevo endpoint /search
\f1\b0 \cf2  para que:\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	El mapa y el listado se llenen 
\f2\b \cf2 solo con lo que el backend devuelve
\f1\b0 \cf2 .\

\f6 \cf2 	2.	No se filtre nada en memoria.\
	3.	Puedas usar b\'fasqueda por 
\f2\b \cf2 categor\'eda
\f1\b0 \cf2 , 
\f2\b \cf2 texto
\f1\b0 \cf2  y 
\f2\b \cf2 radio
\f1\b0 \cf2  directo desde la API.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Modelo Business
\f1\b0\fs28 \cf2 \
\
Aseg\'farate de tener el modelo con los campos que devuelve el backend:\
\
class Business \{\
  final int id;\
  final String name;\
  final String category;\
  final String address;\
  final double latitude;\
  final double longitude;\
  final double rating;\
  final double distanceM;\
\
  Business(\{\
    required this.id,\
    required this.name,\
    required this.category,\
    required this.address,\
    required this.latitude,\
    required this.longitude,\
    required this.rating,\
    required this.distanceM,\
  \});\
\
  factory Business.fromJson(Map<String, dynamic> json) \{\
    return Business(\
      id: json['id'],\
      name: json['name'],\
      category: json['category'],\
      address: json['address'],\
      latitude: (json['latitude'] as num).toDouble(),\
      longitude: (json['longitude'] as num).toDouble(),\
      rating: (json['rating'] as num?)?.toDouble() ?? 0.0,\
      distanceM: (json['distanceM'] as num?)?.toDouble() ?? 0.0,\
    );\
  \}\
\}\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Servicio para llamar al backend
\f1\b0\fs28 \cf2 \
\
Archivo: 
\f5 \cf2 business_service.dart\
\
import 'dart:convert';\
import 'package:http/http.dart' as http;\
import '../models/business.dart';\
\
class BusinessService \{\
  static const String baseUrl = "TU_API_URL"; // Ej: http://192.168.1.100:3000\
\
  static Future<List<Business>> searchBusinesses(\
    double lat,\
    double lng, \{\
    String? category,\
    String? query,\
    int radius = 3000,\
  \}) async \{\
    final uri = Uri.parse("$baseUrl/search").replace(queryParameters: \{\
      'lat': lat.toString(),\
      'lng': lng.toString(),\
      if (category != null && category.isNotEmpty) 'category': category,\
      if (query != null && query.isNotEmpty) 'q': query,\
      'radius': radius.toString(),\
    \});\
\
    final res = await http.get(uri);\
\
    if (res.statusCode == 200) \{\
      final data = json.decode(res.body) as List;\
      return data.map((json) => Business.fromJson(json)).toList();\
    \} else \{\
      throw Exception("Error buscando negocios: $\{res.body\}");\
    \}\
  \}\
\}\
\

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Integraci\'f3n en la pantalla con mapa
\f1\b0\fs28 \cf2 \
\
Ejemplo con 
\f5 \cf2 MapScreen
\f1 \cf2 :\
\
import 'package:flutter/material.dart';\
import 'package:google_maps_flutter/google_maps_flutter.dart';\
import '../models/business.dart';\
import '../services/business_service.dart';\
\
class MapScreen extends StatefulWidget \{\
  @override\
  _MapScreenState createState() => _MapScreenState();\
\}\
\
class _MapScreenState extends State<MapScreen> \{\
  GoogleMapController? mapController;\
  LatLng userLocation = LatLng(21.1619, -86.8515); // Ejemplo: M\'e9rida\
  List<Business> businesses = [];\
  String selectedCategory = '';\
  String searchQuery = '';\
  int searchRadius = 3000;\
\
  @override\
  void initState() \{\
    super.initState();\
    _loadBusinesses();\
  \}\
\
  Future<void> _loadBusinesses() async \{\
    try \{\
      final results = await BusinessService.searchBusinesses(\
        userLocation.latitude,\
        userLocation.longitude,\
        category: selectedCategory.isNotEmpty ? selectedCategory : null,\
        query: searchQuery.isNotEmpty ? searchQuery : null,\
        radius: searchRadius,\
      );\
\
      setState(() \{\
        businesses = results;\
      \});\
    \} catch (e) \{\
      print("Error: $e");\
    \}\
  \}\
\
  Set<Marker> _buildMarkers() \{\
    return businesses.map((b) \{\
      return Marker(\
        markerId: MarkerId(b.id.toString()),\
        position: LatLng(b.latitude, b.longitude),\
        infoWindow: InfoWindow(\
          title: b.name,\
          snippet: "$\{b.category\} \'95 $\{(b.distanceM / 1000).toStringAsFixed(1)\} km",\
        ),\
      );\
    \}).toSet();\
  \}\
\
  @override\
  Widget build(BuildContext context) \{\
    return Scaffold(\
      appBar: AppBar(\
        title: Text("Negocios Cercanos"),\
        actions: [\
          IconButton(\
            icon: Icon(Icons.search),\
            onPressed: () async \{\
              final result = await showSearch(\
                context: context,\
                delegate: BusinessSearchDelegate(\
                  onSearch: (q) \{\
                    setState(() \{\
                      searchQuery = q;\
                    \});\
                    _loadBusinesses();\
                  \},\
                ),\
              );\
            \},\
          ),\
        ],\
      ),\
      body: GoogleMap(\
        onMapCreated: (controller) => mapController = controller,\
        initialCameraPosition: CameraPosition(\
          target: userLocation,\
          zoom: 14,\
        ),\
        markers: _buildMarkers(),\
      ),\
    );\
  \}\
\}\
\

\f7\fs34 \cf2 4\uc0\u65039 \u8419 
\f4\b  B\'fasqueda en tiempo real
\f1\b0\fs28 \cf2 \
\
Podemos crear un 
\f5 \cf2 BusinessSearchDelegate
\f1 \cf2  para que el usuario escriba y actualice el mapa/listado sin tocar nada en memoria, todo directo al backend.\
\
class BusinessSearchDelegate extends SearchDelegate \{\
  final Function(String) onSearch;\
\
  BusinessSearchDelegate(\{required this.onSearch\});\
\
  @override\
  List<Widget>? buildActions(BuildContext context) \{\
    return [\
      IconButton(\
        icon: Icon(Icons.clear),\
        onPressed: () => query = '',\
      ),\
    ];\
  \}\
\
  @override\
  Widget? buildLeading(BuildContext context) \{\
    return IconButton(\
      icon: Icon(Icons.arrow_back),\
      onPressed: () => close(context, null),\
    );\
  \}\
\
  @override\
  Widget buildResults(BuildContext context) \{\
    onSearch(query);\
    return SizedBox.shrink();\
  \}\
\
  @override\
  Widget buildSuggestions(BuildContext context) \{\
    return Container();\
  \}\
\}\
\

\f7 \uc0\u9989 
\f1  Con esto ya queda 
\f2\b \cf2 Flutter 
\f3 \uc0\u8594 
\f2  Backend 
\f3 \uc0\u8594 
\f2  Base de datos
\f1\b0 \cf2  funcionando con b\'fasqueda optimizada, sin procesar nada en el dispositivo y reduciendo consumo de datos.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
Si quieres, ahora puedo hacerte 
\f2\b \cf2 el SQL de ejemplo para la tabla businesses
\f1\b0 \cf2  con datos de prueba en Caucel para que ya lo puedas ver funcionando en tu app.\
As\'ed probar\'edamos que los filtros y el mapa est\'e1n perfectos.\
\
\'bfQuieres que lo arme? Adelante\
\
Perfecto, aqu\'ed tienes un 
\f2\b \cf2 SQL listo para poblar tu tabla businesses
\f1\b0 \cf2  con datos de ejemplo en 
\f2\b \cf2 Caucel, M\'e9rida
\f1\b0 \cf2 , incluyendo categor\'edas, coordenadas, direcci\'f3n y calificaci\'f3n.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Creaci\'f3n de tabla businesses
\f1\b0\fs28 \cf2 \
\
Aseg\'farate de tener algo as\'ed en tu base de datos:\
\
CREATE TABLE businesses (\
    id SERIAL PRIMARY KEY,\
    name VARCHAR(255) NOT NULL,\
    category VARCHAR(100) NOT NULL,\
    address VARCHAR(255) NOT NULL,\
    latitude DOUBLE PRECISION NOT NULL,\
    longitude DOUBLE PRECISION NOT NULL,\
    rating DOUBLE PRECISION DEFAULT 0\
);\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Inserci\'f3n de datos de prueba (Caucel)\
\
INSERT INTO businesses (name, category, address, latitude, longitude, rating) VALUES\
('Super Caucel', 'Supermercado', 'Av. 70, Caucel, M\'e9rida, Yucat\'e1n', 21.019763, -89.706020, 4.2),\
('Farmacia Yza Caucel', 'Farmacia', 'Calle 70 x 97 y 99, Caucel, M\'e9rida, Yucat\'e1n', 21.020815, -89.705135, 4.5),\
('Oxxo Caucel 3', 'Tienda de conveniencia', 'Calle 31 x 102, Caucel, M\'e9rida, Yucat\'e1n', 21.021712, -89.708645, 4.0),\
('Panader\'eda La Espiga', 'Panader\'eda', 'Calle 31 x 104, Caucel, M\'e9rida, Yucat\'e1n', 21.022915, -89.707512, 4.7),\
('Cafeter\'eda Aroma', 'Cafeter\'eda', 'Calle 70 x 99, Caucel, M\'e9rida, Yucat\'e1n', 21.020105, -89.704025, 4.8),\
('Tacos El Paisa', 'Restaurante', 'Calle 31 x 108, Caucel, M\'e9rida, Yucat\'e1n', 21.023456, -89.710123, 4.6),\
('Ferreter\'eda Caucel Tools', 'Ferreter\'eda', 'Calle 29 x 106, Caucel, M\'e9rida, Yucat\'e1n', 21.022100, -89.709230, 4.3),\
('Gimnasio PowerFit Caucel', 'Gimnasio', 'Calle 70 x 103, Caucel, M\'e9rida, Yucat\'e1n', 21.021100, -89.707000, 4.9),\
('Cl\'ednica M\'e9dica Caucel', 'Cl\'ednica', 'Calle 70 x 95, Caucel, M\'e9rida, Yucat\'e1n', 21.019200, -89.703500, 4.4),\
('Papeler\'eda El Estudiante', 'Papeler\'eda', 'Calle 31 x 110, Caucel, M\'e9rida, Yucat\'e1n', 21.024050, -89.711200, 4.1);\
\

\f7\b0 3\uc0\u65039 \u8419 
\f4\b  C\'f3mo probarlo
\f1\b0\fs28 \cf2 \
\
Con esto, si tu API 
\f5 \cf2 /search
\f1 \cf2  est\'e1 implementada con b\'fasqueda por radio y categor\'eda, podr\'edas probar llamadas como:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Todos los negocios en 3 km\
\
GET /search?lat=21.0200&lng=-89.7060&radius=3000\
\

\f1\b0 	\'95	
\f2\b Solo cafeter\'edas\
GET /search?lat=21.0200&lng=-89.7060&category=Cafeter\'eda&radius=3000\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Buscar \'93tacos\'94\
GET /search?lat=21.0200&lng=-89.7060&q=tacos&radius=3000\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0 \cf2 Si quieres, puedo dejarte 
\f2\b \cf2 el c\'f3digo SQL del endpoint /search
\f1\b0 \cf2  para que ya filtre directamente por 
\f5 \cf2 lat
\f1 \cf2 , 
\f5 \cf2 lng
\f1 \cf2 , 
\f5 \cf2 radio
\f1 \cf2 , 
\f5 \cf2 categor\'eda
\f1 \cf2  y 
\f5 \cf2 texto
\f1 \cf2  usando 
\f2\b \cf2 PostgreSQL + Haversine
\f1\b0 \cf2 .\
As\'ed conectamos todo el flujo backend \uc0\u8596  Flutter en un solo paso.\
\
\'bfQuieres que te lo prepare? Adelante\
\
Perfecto, aqu\'ed te dejo el 
\f2\b \cf2 endpoint /search
\f1\b0 \cf2  listo para tu MVP, usando 
\f2\b \cf2 PostgreSQL
\f1\b0 \cf2  y c\'e1lculo de distancia con la f\'f3rmula de Haversine para filtrar por radio, categor\'eda y texto.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  SQL para b\'fasqueda con Haversine
\f1\b0\fs28 \cf2 \
\
Este query filtra por:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Latitud y longitud del usuario (
\f5 :lat
\f1 , 
\f5 :lng
\f1 )\
	\'95	Radio en metros (
\f5 :radius
\f1 )\
	\'95	Categor\'eda opcional (
\f5 :category
\f1 )\
	\'95	Texto opcional (
\f5 :q
\f1 )\
\
SELECT\
    id,\
    name,\
    category,\
    address,\
    latitude,\
    longitude,\
    rating,\
    (\
        6371000 * acos(\
            cos(radians(:lat)) *\
            cos(radians(latitude)) *\
            cos(radians(longitude) - radians(:lng)) +\
            sin(radians(:lat)) *\
            sin(radians(latitude))\
        )\
    ) AS distance\
FROM businesses\
WHERE\
    (:category IS NULL OR category ILIKE '%' || :category || '%')\
    AND (:q IS NULL OR name ILIKE '%' || :q || '%' OR address ILIKE '%' || :q || '%')\
HAVING\
    distance <= :radius\
ORDER BY distance ASC;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Ejemplo en Node.js + Express\
\
app.get('/api/v1/search', async (req, res) => \{\
    const \{ lat, lng, radius = 3000, category = null, q = null \} = req.query;\
\
    if (!lat || !lng) \{\
        return res.status(400).json(\{ error: 'lat y lng son requeridos' \});\
    \}\
\
    const query = `\
        SELECT\
            id,\
            name,\
            category,\
            address,\
            latitude,\
            longitude,\
            rating,\
            (\
                6371000 * acos(\
                    cos(radians($1)) *\
                    cos(radians(latitude)) *\
                    cos(radians(longitude) - radians($2)) +\
                    sin(radians($1)) *\
                    sin(radians(latitude))\
                )\
            ) AS distance\
        FROM businesses\
        WHERE\
            ($4 IS NULL OR category ILIKE '%' || $4 || '%')\
            AND ($5 IS NULL OR name ILIKE '%' || $5 || '%' OR address ILIKE '%' || $5 || '%')\
        HAVING\
            distance <= $3\
        ORDER BY distance ASC;\
    `;\
\
    try \{\
        const \{ rows \} = await pool.query(query, [lat, lng, radius, category, q]);\
        res.json(rows);\
    \} catch (error) \{\
        console.error(error);\
        res.status(500).json(\{ error: 'Error al buscar negocios' \});\
    \}\
\});\
\

\f7\b0 3\uc0\u65039 \u8419 
\f4\b  Ejemplos de uso
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Buscar todo en 2 km\
GET /api/v1/search?lat=21.0200&lng=-89.7060&radius=2000\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Buscar categor\'eda \'93Cafeter\'eda\'94 en 3 km\
GET /api/v1/search?lat=21.0200&lng=-89.7060&category=Cafeter\'eda&radius=3000\
Buscar texto \'93tacos\'94 en 5 km\
GET /api/v1/search?lat=21.0200&lng=-89.7060&q=tacos&radius=5000\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0 \cf2 Si quieres, te puedo armar 
\f2\b \cf2 tambi\'e9n la versi\'f3n optimizada para PostGIS
\f1\b0 \cf2  para que la b\'fasqueda sea instant\'e1nea y puedas escalar a toda M\'e9rida sin que se ponga lenta.\
\'bfQuieres que la prepare en versi\'f3n 
\f2\b \cf2 PostGIS
\f1\b0 \cf2 ? Con eso quedar\'eda lista para producci\'f3n. Adelante\
\
Perfecto, aqu\'ed te preparo la 
\f2\b \cf2 versi\'f3n optimizada con PostGIS
\f1\b0 \cf2  para el endpoint 
\f5 \cf2 /search
\f1 \cf2 .\
Esto va a ser mucho m\'e1s r\'e1pido y escalable que la f\'f3rmula de Haversine pura, porque PostGIS usa \'edndices espaciales.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Requisitos previos
\f1\b0\fs28 \cf2 \
\
En tu base de datos PostgreSQL, activa PostGIS:\
\
CREATE EXTENSION IF NOT EXISTS postgis;\
\
Convierte tu tabla 
\f5 \cf2 businesses
\f1 \cf2  para que tenga una columna de tipo 
\f5 \cf2 geography
\f1 \cf2 :\
\
ALTER TABLE businesses ADD COLUMN location geography(Point, 4326);\
\
-- Llena la columna con los datos actuales\
UPDATE businesses SET location = ST_SetSRID(ST_MakePoint(longitude, latitude), 4326);\
\
-- \'cdndice espacial para acelerar b\'fasquedas\
CREATE INDEX idx_businesses_location ON businesses USING GIST(location);\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Query optimizada con PostGIS
\f1\b0\fs28 \cf2 \
\
Este query es 
\f2\b \cf2 ultrarr\'e1pido
\f1\b0 \cf2  y usa 
\f5 \cf2 ST_DWithin
\f1 \cf2  para buscar por distancia:\
\
SELECT\
    id,\
    name,\
    category,\
    address,\
    latitude,\
    longitude,\
    rating,\
    ST_Distance(\
        location,\
        ST_SetSRID(ST_MakePoint(:lng, :lat), 4326)\
    ) AS distance\
FROM businesses\
WHERE\
    (:category IS NULL OR category ILIKE '%' || :category || '%')\
    AND (:q IS NULL OR name ILIKE '%' || :q || '%' OR address ILIKE '%' || :q || '%')\
    AND ST_DWithin(\
        location,\
        ST_SetSRID(ST_MakePoint(:lng, :lat), 4326),\
        :radius\
    )\
ORDER BY distance ASC;\
\

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Endpoint en Node.js\
\
app.get('/api/v1/search', async (req, res) => \{\
    const \{ lat, lng, radius = 3000, category = null, q = null \} = req.query;\
\
    if (!lat || !lng) \{\
        return res.status(400).json(\{ error: 'lat y lng son requeridos' \});\
    \}\
\
    const query = `\
        SELECT\
            id,\
            name,\
            category,\
            address,\
            latitude,\
            longitude,\
            rating,\
            ST_Distance(\
                location,\
                ST_SetSRID(ST_MakePoint($2, $1), 4326)\
            ) AS distance\
        FROM businesses\
        WHERE\
            ($4 IS NULL OR category ILIKE '%' || $4 || '%')\
            AND ($5 IS NULL OR name ILIKE '%' || $5 || '%' OR address ILIKE '%' || $5 || '%')\
            AND ST_DWithin(\
                location,\
                ST_SetSRID(ST_MakePoint($2, $1), 4326),\
                $3\
            )\
        ORDER BY distance ASC;\
    `;\
\
    try \{\
        const \{ rows \} = await pool.query(query, [lat, lng, radius, category, q]);\
        res.json(rows);\
    \} catch (error) \{\
        console.error(error);\
        res.status(500).json(\{ error: 'Error al buscar negocios' \});\
    \}\
\});\
\

\f7\b0 4\uc0\u65039 \u8419 
\f4\b  Ejemplos de uso
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Todo en 2 km\
GET /api/v1/search?lat=21.0200&lng=-89.7060&radius=2000\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Cafeter\'edas en 3 km\
GET /api/v1/search?lat=21.0200&lng=-89.7060&category=Cafeter\'eda&radius=3000\
\
Tacos en 5 km\
GET /api/v1/search?lat=21.0200&lng=-89.7060&q=tacos&radius=5000\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0 \cf2 Si quieres, puedo armar 
\f2\b \cf2 el flujo completo
\f1\b0 \cf2  para que desde la app se env\'ede la ubicaci\'f3n del usuario en tiempo real, se consuma este endpoint y se muestre 
\f2\b \cf2 el mapa interactivo con pines de negocios
\f1\b0 \cf2  en iOS, Android y Web con 
\f2\b \cf2 una sola base de c\'f3digo en React Native + Expo
\f1\b0 \cf2 .\
As\'ed ya quedar\'eda tu MVP listo para pruebas.\
\
\'bfQuieres que lo prepare as\'ed de una vez? Adelante\
\
\'a1Va! Te dejo un 
\f2\b \cf2 mini-MVP en React Native + Expo (iOS/Android/Web)
\f1\b0 \cf2  que:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Pide ubicaci\'f3n del usuario en tiempo real\
	\'95	Llama a tu endpoint 
\f5 /api/v1/search
\f1  (PostGIS) con 
\f5 lat/lng/category/q/radius
\f1 \
	\'95	Muestra resultados en 
\f2\b mapa
\f1\b0  + 
\f2\b lista
\f1\b0 \
	\'95	Incluye 
\f2\b b\'fasqueda en vivo
\f1\b0 , selector de 
\f2\b categor\'edas
\f1\b0 , y 
\f2\b slider de radio\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs44 \cf2 \uc0\u55357 \u56999 
\f4\b  Requisitos\
\
npm i -g expo-cli\
npx create-expo-app caucel-directorio\
cd caucel-directorio\
npm i axios react-native-maps expo-location @react-native-community/slider\
\
\pard\tx860\tx1420\tx1980\tx2540\tx3100\tx3660\tx4220\tx4780\tx5340\tx5900\tx6460\tx7020\li300\sl324\slmult1\partightenfactor0

\f1\b0\fs28 \cf2 iOS: a\'f1ade 
\f5 GoogleMaps
\f1  en 
\f5 AppDelegate
\f1  si usas proveedor Google; Android: mapa funciona out-of-the-box.\
Web: 
\f5 react-native-maps
\f1  funciona con el proveedor por defecto; si usas Google Maps JS, configura tu API key en 
\f5 app.json
\f1 .\
\
En 
\f5 .env
\f1  (o en constante por ahora):\
\
API_BASE_URL=http://TU_BACKEND:5000/api/v1/businesses\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs44 \cf2 \uc0\u55357 \u56513 
\f4\b  Estructura\
\
src/\
  App.tsx\
  screens/MapScreen.tsx\
  services/api.ts\
  components/CategoryChips.tsx\
  components/BusinessItem.tsx\
  utils/debounce.ts\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs34 \cf2 \uc0\u9881 \u65039 
\f4\b  src/services/api.ts\
\
import axios from 'axios';\
\
const API_BASE_URL = process.env.EXPO_PUBLIC_API_BASE_URL || 'http://TU_BACKEND:5000/api/v1/businesses';\
\
export type Business = \{\
  id: number;\
  name: string;\
  category: string;\
  address: string;\
  latitude: number;\
  longitude: number;\
  rating: number;\
  distance: number | null; // si tu endpoint retorna "distance" o "distance_m"\
\};\
\
export async function searchBusinesses(params: \{\
  lat: number;\
  lng: number;\
  radius?: number; // metros\
  category?: string;\
  q?: string;\
\}): Promise<Business[]> \{\
  const \{ lat, lng, radius = 3000, category, q \} = params;\
  const url = `$\{API_BASE_URL\}/search`;\
  const res = await axios.get(url, \{\
    params: \{\
      lat, lng, radius,\
      ...(category ? \{ category \} : \{\}),\
      ...(q ? \{ q \} : \{\})\
    \}\
  \});\
  // normaliza "distance" o "distance_m"\
  return (res.data.results || res.data).map((b: any) => (\{\
    ...b,\
    distance: b.distance_m ?? b.distance ?? null\
  \}));\
\}\
\

\f7\b0 \uc0\u55358 \u56800 
\f4\b  src/utils/debounce.ts\
\
export function debounce<T extends (...args: any[]) => void>(fn: T, delay = 350) \{\
  let t: any;\
  return (...args: Parameters<T>) => \{\
    clearTimeout(t);\
    t = setTimeout(() => fn(...args), delay);\
  \};\
\}\
\

\f7\b0 \uc0\u55357 \u56598 
\f4\b  src/components/CategoryChips.tsx\
\
import React from 'react';\
import \{ View, Text, TouchableOpacity, StyleSheet, ScrollView \} from 'react-native';\
\
const CATS = ['Todos','Farmacia','Restaurante','Taller','Panader\'eda','Cafeter\'eda','Ferreter\'eda','Gimnasio','Cl\'ednica'];\
\
export default function CategoryChips(\{\
  value,\
  onChange,\
\}: \{ value: string; onChange: (v: string)=>void \}) \{\
  return (\
    <ScrollView horizontal showsHorizontalScrollIndicator=\{false\} style=\{\{paddingVertical:8\}\}>\
      <View style=\{styles.row\}>\
        \{CATS.map(c => \{\
          const active = value === c;\
          return (\
            <TouchableOpacity key=\{c\} onPress=\{() => onChange(c)\} style=\{[styles.chip, active && styles.chipActive]\}>\
              <Text style=\{[styles.txt, active && styles.txtActive]\}>\{c\}</Text>\
            </TouchableOpacity>\
          );\
        \})\}\
      </View>\
    </ScrollView>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  row: \{ flexDirection:'row', gap:8, paddingHorizontal:12 \},\
  chip: \{ paddingHorizontal:12, paddingVertical:8, borderRadius:16, borderWidth:1, borderColor:'#ccc', backgroundColor:'#fff' \},\
  chipActive: \{ borderColor:'#111' \},\
  txt: \{ fontSize:14, color:'#333' \},\
  txtActive: \{ fontWeight:'700' \}\
\});\
\

\f7\b0 \uc0\u55358 \u56830 
\f4\b  src/components/BusinessItem.tsx\
\
import React from 'react';\
import \{ View, Text, StyleSheet, TouchableOpacity \} from 'react-native';\
import type \{ Business \} from '../services/api';\
\
export default function BusinessItem(\{ b, onPress \}: \{ b: Business; onPress: ()=>void \}) \{\
  return (\
    <TouchableOpacity onPress=\{onPress\} style=\{styles.item\}>\
      <View style=\{\{flex:1\}\}>\
        <Text style=\{styles.title\}>\{b.name\}</Text>\
        <Text style=\{styles.sub\}>\{b.category\} \'95 \{b.address\}</Text>\
        \{b.distance !== null && <Text style=\{styles.dist\}>\{Math.round((b.distance as number))\} m</Text>\}\
      </View>\
      <Text>
\f7\b0 \uc0\u11088 
\f4\b  \{b.rating?.toFixed(1) ?? '0.0'\}</Text>\
    </TouchableOpacity>\
  );\
\}\
const styles = StyleSheet.create(\{\
  item:\{ flexDirection:'row', alignItems:'center', justifyContent:'space-between', padding:12, borderBottomWidth:1, borderBottomColor:'#eee' \},\
  title:\{ fontSize:16, fontWeight:'600' \},\
  sub:\{ color:'#666', marginTop:2 \},\
  dist:\{ color:'#333', marginTop:4, fontWeight:'500' \}\
\});\
\

\f7\b0 \uc0\u55357 \u56826 \u65039 
\f4\b  src/screens/MapScreen.tsx\
\
import React, \{ useCallback, useEffect, useMemo, useRef, useState \} from 'react';\
import \{ View, Text, TextInput, StyleSheet, FlatList, Platform \} from 'react-native';\
import MapView, \{ Marker, PROVIDER_DEFAULT, PROVIDER_GOOGLE, Region \} from 'react-native-maps';\
import * as Location from 'expo-location';\
import Slider from '@react-native-community/slider';\
import \{ debounce \} from '../utils/debounce';\
import CategoryChips from '../components/CategoryChips';\
import BusinessItem from '../components/BusinessItem';\
import \{ searchBusinesses, Business \} from '../services/api';\
\
const DEFAULT_CAUCEL = \{ latitude: 21.0200, longitude: -89.7060 \}; // Centro de Caucel\
\
export default function MapScreen() \{\
  const [region, setRegion] = useState<Region>(\{\
    latitude: DEFAULT_CAUCEL.latitude,\
    longitude: DEFAULT_CAUCEL.longitude,\
    latitudeDelta: 0.04,\
    longitudeDelta: 0.04,\
  \});\
  const [me, setMe] = useState<\{lat:number; lng:number\} | null>(null);\
  const [list, setList] = useState<Business[]>([]);\
  const [query, setQuery] = useState('');\
  const [category, setCategory] = useState('Todos');\
  const [radius, setRadius] = useState(3000);\
  const mapRef = useRef<MapView>(null);\
\
  // pedir permisos y ubicaci\'f3n\
  useEffect(() => \{\
    (async () => \{\
      const \{ status \} = await Location.requestForegroundPermissionsAsync();\
      if (status === 'granted') \{\
        const loc = await Location.getCurrentPositionAsync(\{ accuracy: Location.Accuracy.Balanced \});\
        setMe(\{ lat: loc.coords.latitude, lng: loc.coords.longitude \});\
        setRegion(r => (\{ ...r, latitude: loc.coords.latitude, longitude: loc.coords.longitude \}));\
      \} else \{\
        setMe(\{ lat: DEFAULT_CAUCEL.latitude, lng: DEFAULT_CAUCEL.longitude \});\
      \}\
    \})();\
  \}, []);\
\
  const runSearch = useCallback(async (center: \{lat:number; lng:number\}) => \{\
    const cat = category === 'Todos' ? undefined : category;\
    const data = await searchBusinesses(\{\
      lat: center.lat,\
      lng: center.lng,\
      radius,\
      category: cat,\
      q: query.trim() || undefined,\
    \});\
    setList(data);\
  \}, [category, radius, query]);\
\
  // disparar b\'fasqueda al cambiar filtros (con debounce para q)\
  const debouncedRun = useMemo(() => debounce(runSearch, 350), [runSearch]);\
\
  // cuando cambia query -> debounce\
  useEffect(() => \{\
    if (!me) return;\
    debouncedRun(me);\
  \}, [query]);\
\
  // cuando cambian categor\'eda o radio -> busca inmediato\
  useEffect(() => \{\
    if (!me) return;\
    runSearch(me);\
  \}, [category, radius, me]);\
\
  // mover mapa al tocar un item\
  const focus = (b: Business) => \{\
    mapRef.current?.animateToRegion(\{\
      latitude: b.latitude,\
      longitude: b.longitude,\
      latitudeDelta: 0.01,\
      longitudeDelta: 0.01,\
    \}, 400);\
  \};\
\
  const provider = Platform.OS === 'ios' || Platform.OS === 'android' ? PROVIDER_GOOGLE : PROVIDER_DEFAULT;\
\
  return (\
    <View style=\{\{ flex: 1 \}\}>\
      \{/* buscador */\}\
      <View style=\{styles.searchBox\}>\
        <TextInput\
          placeholder="Buscar: tacos, taller, farmacia\'85"\
          value=\{query\}\
          onChangeText=\{setQuery\}\
          style=\{styles.input\}\
          returnKeyType="search"\
        />\
      </View>\
\
      \{/* categor\'edas */\}\
      <CategoryChips value=\{category\} onChange=\{setCategory\} />\
\
      \{/* radio */\}\
      <View style=\{styles.sliderWrap\}>\
        <Text style=\{\{fontWeight:'600'\}\}>Radio: \{(radius/1000).toFixed(1)\} km</Text>\
        <Slider\
          style=\{\{width: '100%', height: 40\}\}\
          minimumValue=\{500\}\
          maximumValue=\{7000\}\
          step=\{250\}\
          value=\{radius\}\
          onValueChange=\{setRadius\}\
        />\
      </View>\
\
      \{/* mapa */\}\
      <MapView\
        ref=\{mapRef\}\
        provider=\{provider\}\
        style=\{\{ flex: 2 \}\}\
        initialRegion=\{region\}\
        showsUserLocation\
        onRegionChangeComplete=\{(r) => setRegion(r)\}\
      >\
        \{list.map(b => (\
          <Marker\
            key=\{b.id\}\
            coordinate=\{\{ latitude: b.latitude, longitude: b.longitude \}\}\
            title=\{b.name\}\
            description=\{`$\{b.category\} \'95 $\{b.distance ? Math.round(b.distance) : '?'\} m`\}\
          />\
        ))\}\
      </MapView>\
\
      \{/* lista */\}\
      <View style=\{\{ flex: 1 \}\}>\
        <FlatList\
          data=\{list\}\
          keyExtractor=\{(item) => String(item.id)\}\
          renderItem=\{(\{ item \}) => <BusinessItem b=\{item\} onPress=\{() => focus(item)\} />\}\
          ListEmptyComponent=\{<Text style=\{\{ padding: 16, color: '#666' \}\}>No hay resultados con estos filtros.</Text>\}\
        />\
      </View>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  searchBox:\{ paddingHorizontal:12, paddingTop:12 \},\
  input:\{ backgroundColor:'#fff', borderWidth:1, borderColor:'#ddd', borderRadius:8, paddingHorizontal:12, height:42 \},\
  sliderWrap:\{ paddingHorizontal:12, paddingVertical:8 \}\
\});\
\

\f7\b0 \uc0\u55356 \u57281 
\f4\b  src/App.tsx\
\
import React from 'react';\
import \{ SafeAreaView, StatusBar \} from 'react-native';\
import MapScreen from './screens/MapScreen';\
\
export default function App() \{\
  return (\
    <SafeAreaView style=\{\{ flex: 1 \}\}>\
      <StatusBar barStyle="dark-content" />\
      <MapScreen />\
    </SafeAreaView>\
  );\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs44 \cf2 \uc0\u9989 
\f4\b  C\'f3mo correr\
\
# 1) Backend encendido (PostGIS y endpoint /api/v1/businesses/search)\
# 2) Variables expuestas a Expo:\
expo start --clear\
# (o usa EXPO_PUBLIC_API_BASE_URL en app.config)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs28 \cf2 Aseg\'farate que 
\f5 \cf2 EXPO_PUBLIC_API_BASE_URL
\f1 \cf2  apunte a tu backend accesible desde el dispositivo (por ejemplo, IP de tu laptop en la red local).\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	En iOS/Android, prueba mover el 
\f2\b slider de radio
\f1\b0  y escribir en el 
\f2\b buscador
\f1\b0 : ver\'e1s pines y lista actualiz\'e1ndose con datos del backend.\
	\'95	Las 
\f2\b categor\'edas
\f1\b0  (chips) est\'e1n pensadas para tu taxonom\'eda; puedes ajustar el array.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56594 
\f4\b  Tips de producci\'f3n (breve)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Habilita 
\f2\b HTTPS
\f1\b0  en backend (Cloudflare Tunnel o Nginx reverse proxy).\
	\'95	Limita el 
\f2\b rate
\f1\b0  del endpoint 
\f5 /search
\f1  por IP.\
	\'95	Cachea respuestas breves (ej. 15\'9630s) por bbox/params si vas a escalar.\
	\'95	Usa 
\f2\b clustering
\f1\b0  en el mapa cuando tengas muchas marcas (lib tipo 
\f5 react-native-map-clustering
\f1 ).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfTe armo ahora un 
\f2\b \cf2 script de semillado
\f1\b0 \cf2  (seed) que genere 200 negocios sint\'e9ticos distribuidos por la zona para pruebas de carga, o prefieres que pasemos a la 
\f2\b \cf2 pantalla de detalle de negocio
\f1\b0 \cf2  (fotos, horarios, llamar, abrir en Maps, WhatsApp)?\
\
Adelante primero con el seed\
\
Voy a prepararte el 
\f2\b \cf2 seed SQL
\f1\b0 \cf2  para poblar la tabla 
\f5 \cf2 businesses
\f1 \cf2  con negocios ficticios de 
\f2\b \cf2 Caucel, M\'e9rida, Yucat\'e1n
\f1\b0 \cf2 , listos para probar el endpoint 
\f5 \cf2 /search
\f1 \cf2  y la versi\'f3n PostGIS.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Tabla businesses
\f1\b0\fs28 \cf2 \
\
Si a\'fan no existe, esta es la definici\'f3n optimizada para PostGIS:\
\
CREATE EXTENSION IF NOT EXISTS postgis;\
\
CREATE TABLE businesses (\
    id SERIAL PRIMARY KEY,\
    name VARCHAR(255) NOT NULL,\
    category VARCHAR(100) NOT NULL,\
    address TEXT,\
    latitude DOUBLE PRECISION NOT NULL,\
    longitude DOUBLE PRECISION NOT NULL,\
    location GEOGRAPHY(POINT, 4326), -- Para b\'fasquedas r\'e1pidas\
    phone VARCHAR(20),\
    rating NUMERIC(2,1),\
    created_at TIMESTAMP DEFAULT NOW()\
);\
\

\f7 \uc0\u9889 
\f1  Importante: el campo 
\f5 \cf2 location
\f1 \cf2  usa 
\f2\b \cf2 PostGIS
\f1\b0 \cf2  para que puedas hacer consultas espaciales s\'faper r\'e1pidas.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Seed con datos ficticios (Caucel)\
\
INSERT INTO businesses (name, category, address, latitude, longitude, location, phone, rating)\
VALUES\
('Peluquer\'eda Caucel Style', 'Peluquer\'eda', 'Calle 70 #345, Caucel, M\'e9rida', 21.0212, -89.7048, ST_SetSRID(ST_MakePoint(-89.7048, 21.0212), 4326)::geography, '9991234567', 4.5),\
\
('Pasteler\'eda Dulce Sabor', 'Pasteler\'eda', 'Calle 66 #200, Caucel, M\'e9rida', 21.0221, -89.7062, ST_SetSRID(ST_MakePoint(-89.7062, 21.0221), 4326)::geography, '9992345678', 4.7),\
\
('Taller Mec\'e1nico El Pist\'f3n', 'Taller Mec\'e1nico', 'Calle 64 #150, Caucel, M\'e9rida', 21.0189, -89.7071, ST_SetSRID(ST_MakePoint(-89.7071, 21.0189), 4326)::geography, '9993456789', 4.3),\
\
('Sal\'f3n de Belleza Glamour', 'Sal\'f3n de Belleza', 'Calle 72 #415, Caucel, M\'e9rida', 21.0205, -89.7032, ST_SetSRID(ST_MakePoint(-89.7032, 21.0205), 4326)::geography, '9994567890', 4.6),\
\
('Ferreter\'eda El Martillo', 'Ferreter\'eda', 'Calle 60 #101, Caucel, M\'e9rida', 21.0194, -89.7088, ST_SetSRID(ST_MakePoint(-89.7088, 21.0194), 4326)::geography, '9995678901', 4.4),\
\
('Cl\'ednica M\'e9dica Caucel', 'Cl\'ednica M\'e9dica', 'Calle 68 #210, Caucel, M\'e9rida', 21.0230, -89.7050, ST_SetSRID(ST_MakePoint(-89.7050, 21.0230), 4326)::geography, '9996789012', 4.8),\
\
('Farmacia Salud Total', 'Farmacia', 'Calle 62 #310, Caucel, M\'e9rida', 21.0225, -89.7042, ST_SetSRID(ST_MakePoint(-89.7042, 21.0225), 4326)::geography, '9997890123', 4.5);\
\

\f7\b0 3\uc0\u65039 \u8419 
\f4\b  Query PostGIS optimizado
\f1\b0\fs28 \cf2 \
\
Con esto, el 
\f5 \cf2 /search
\f1 \cf2  es mucho m\'e1s r\'e1pido y preciso:\
\
SELECT\
    id,\
    name,\
    category,\
    address,\
    latitude,\
    longitude,\
    rating,\
    ST_Distance(\
        location,\
        ST_SetSRID(ST_MakePoint(:lng, :lat), 4326)::geography\
    ) AS distance\
FROM businesses\
WHERE\
    (:category IS NULL OR category ILIKE '%' || :category || '%')\
    AND (:q IS NULL OR name ILIKE '%' || :q || '%' OR address ILIKE '%' || :q || '%')\
    AND ST_DWithin(\
        location,\
        ST_SetSRID(ST_MakePoint(:lng, :lat), 4326)::geography,\
        :radius\
    )\
ORDER BY distance ASC;\
\
Si quieres, el siguiente paso es que te arme 
\f2\b \cf2 el script Node.js de seed autom\'e1tico
\f1\b0 \cf2 , para que puedas correr:\
\
node seed.js\
\
y te inserte todos los negocios sin tener que escribir SQL a mano.\
\
\'bfQuieres que lo arme as\'ed para que puedas poblar tu DB en 1 clic? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Vamos a armar un 
\f2\b \cf2 script seed.js en Node.js
\f1\b0 \cf2  para poblar autom\'e1ticamente tu tabla 
\f5 \cf2 businesses
\f1 \cf2  con los negocios de prueba en 
\f2\b \cf2 Caucel, M\'e9rida, Yucat\'e1n
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Dependencias necesarias
\f1\b0\fs28 \cf2 \
\
Instala estas librer\'edas en tu proyecto:\
\
npm install pg dotenv\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 pg
\f1\b0 \cf2  \uc0\u8594  conexi\'f3n a PostgreSQL.\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b dotenv
\f1\b0  \uc0\u8594  manejar credenciales en 
\f5 .env
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Archivo .env
\f1\b0\fs28 \cf2 \
\
Crea un 
\f5 \cf2 .env
\f1 \cf2  en la ra\'edz de tu proyecto:\
\
DATABASE_URL=postgres://usuario:password@localhost:5432/tu_basedatos\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f11\i \cf2 (Cambia usuario, password y nombre de la BD por los tuyos)
\f1\i0 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Script seed.js\
\
// seed.js\
import pkg from 'pg';\
import dotenv from 'dotenv';\
\
dotenv.config();\
const \{ Pool \} = pkg;\
\
const pool = new Pool(\{\
  connectionString: process.env.DATABASE_URL,\
\});\
\
const businesses = [\
  \{\
    name: 'Peluquer\'eda Caucel Style',\
    category: 'Peluquer\'eda',\
    address: 'Calle 70 #345, Caucel, M\'e9rida',\
    latitude: 21.0212,\
    longitude: -89.7048,\
    phone: '9991234567',\
    rating: 4.5,\
  \},\
  \{\
    name: 'Pasteler\'eda Dulce Sabor',\
    category: 'Pasteler\'eda',\
    address: 'Calle 66 #200, Caucel, M\'e9rida',\
    latitude: 21.0221,\
    longitude: -89.7062,\
    phone: '9992345678',\
    rating: 4.7,\
  \},\
  \{\
    name: 'Taller Mec\'e1nico El Pist\'f3n',\
    category: 'Taller Mec\'e1nico',\
    address: 'Calle 64 #150, Caucel, M\'e9rida',\
    latitude: 21.0189,\
    longitude: -89.7071,\
    phone: '9993456789',\
    rating: 4.3,\
  \},\
  \{\
    name: 'Sal\'f3n de Belleza Glamour',\
    category: 'Sal\'f3n de Belleza',\
    address: 'Calle 72 #415, Caucel, M\'e9rida',\
    latitude: 21.0205,\
    longitude: -89.7032,\
    phone: '9994567890',\
    rating: 4.6,\
  \},\
  \{\
    name: 'Ferreter\'eda El Martillo',\
    category: 'Ferreter\'eda',\
    address: 'Calle 60 #101, Caucel, M\'e9rida',\
    latitude: 21.0194,\
    longitude: -89.7088,\
    phone: '9995678901',\
    rating: 4.4,\
  \},\
  \{\
    name: 'Cl\'ednica M\'e9dica Caucel',\
    category: 'Cl\'ednica M\'e9dica',\
    address: 'Calle 68 #210, Caucel, M\'e9rida',\
    latitude: 21.0230,\
    longitude: -89.7050,\
    phone: '9996789012',\
    rating: 4.8,\
  \},\
  \{\
    name: 'Farmacia Salud Total',\
    category: 'Farmacia',\
    address: 'Calle 62 #310, Caucel, M\'e9rida',\
    latitude: 21.0225,\
    longitude: -89.7042,\
    phone: '9997890123',\
    rating: 4.5,\
  \},\
];\
\
async function seed() \{\
  const client = await pool.connect();\
  try \{\
    console.log('
\f7\b0 \uc0\u55356 \u57137 
\f4\b  Iniciando seed de negocios en Caucel...');\
\
    for (const b of businesses) \{\
      await client.query(\
        `\
        INSERT INTO businesses\
          (name, category, address, latitude, longitude, location, phone, rating)\
        VALUES\
          ($1, $2, $3, $4, $5, ST_SetSRID(ST_MakePoint($5, $4), 4326)::geography, $6, $7)\
        ON CONFLICT DO NOTHING;\
        `,\
        [b.name, b.category, b.address, b.latitude, b.longitude, b.phone, b.rating]\
      );\
      console.log(`
\f7\b0 \uc0\u9989 
\f4\b  Insertado: $\{b.name\}`);\
    \}\
\
    console.log('
\f7\b0 \uc0\u55356 \u57225 
\f4\b  Seed completado con \'e9xito');\
  \} catch (err) \{\
    console.error('
\f7\b0 \uc0\u10060 
\f4\b  Error en seed:', err);\
  \} finally \{\
    client.release();\
    pool.end();\
  \}\
\}\
\
seed();\
\

\f7\b0 4\uc0\u65039 \u8419 
\f4\b  Ejecuci\'f3n
\f1\b0\fs28 \cf2 \
\
Cuando quieras poblar tu base:\
\
node seed.js\
\
Y listo, tendr\'e1s cargados tus negocios en la BD con coordenadas y PostGIS activado 
\f7 \uc0\u55357 \u56960 
\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que el pr\'f3ximo paso sea armarte un 
\f2\b \cf2 endpoint /search en Express
\f1\b0 \cf2  ya conectado a esta tabla con PostGIS para buscar por categor\'eda, texto o distancia? Adelante\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Ahora armemos el 
\f2\b \cf2 endpoint /api/v1/businesses/search
\f1\b0 \cf2  en Express para que puedas:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Buscar negocios por 
\f2\b categor\'eda
\f1\b0 \
	\'95	Filtrar por 
\f2\b radio de distancia
\f1\b0  desde la ubicaci\'f3n del usuario\
	\'95	Hacer b\'fasqueda por 
\f2\b texto (nombre o direcci\'f3n)
\f1\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Dependencias necesarias
\f1\b0\fs28 \cf2 \
\
Si no las tienes a\'fan:\
\
npm install express pg dotenv\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Endpoint /search en Express
\f1\b0\fs28 \cf2 \
\
Crea un archivo 
\f5 \cf2 routes/businesses.js
\f1 \cf2 :\
\
// routes/businesses.js\
import express from "express";\
import pkg from "pg";\
import dotenv from "dotenv";\
\
dotenv.config();\
const \{ Pool \} = pkg;\
\
const pool = new Pool(\{\
  connectionString: process.env.DATABASE_URL,\
\});\
\
const router = express.Router();\
\
/**\
 * GET /api/v1/businesses/search\
 * Par\'e1metros:\
 * - q: texto de b\'fasqueda (opcional)\
 * - category: categor\'eda del negocio (opcional)\
 * - lat, lng: coordenadas del usuario (opcional)\
 * - radius: radio en km (opcional, default 5km)\
 */\
router.get("/search", async (req, res) => \{\
  const \{ q, category, lat, lng, radius \} = req.query;\
\
  try \{\
    let query = `\
      SELECT id, name, category, address, phone, rating,\
             latitude, longitude,\
             ST_Distance(\
               location,\
               ST_SetSRID(ST_MakePoint($1, $2), 4326)::geography\
             ) AS distance\
      FROM businesses\
      WHERE 1=1\
    `;\
    const values = [lng || -89.7048, lat || 21.0212]; // Default: Caucel centro\
\
    let paramIndex = 3;\
\
    // Filtro por categor\'eda\
    if (category) \{\
      query += ` AND category ILIKE $$\{paramIndex\}`;\
      values.push(`%$\{category\}%`);\
      paramIndex++;\
    \}\
\
    // Filtro por texto\
    if (q) \{\
      query += ` AND (name ILIKE $$\{paramIndex\} OR address ILIKE $$\{paramIndex\})`;\
      values.push(`%$\{q\}%`);\
      paramIndex++;\
    \}\
\
    // Orden por distancia y filtro de radio\
    if (lat && lng) \{\
      query += ` AND ST_DWithin(\
        location,\
        ST_SetSRID(ST_MakePoint($1, $2), 4326)::geography,\
        $$\{paramIndex\} * 1000\
      )`;\
      values.push(radius || 5); // default 5 km\
      paramIndex++;\
\
      query += ` ORDER BY distance ASC`;\
    \} else \{\
      query += ` ORDER BY rating DESC`; // fallback: mejor calificados\
    \}\
\
    const \{ rows \} = await pool.query(query, values);\
\
    res.json(\{\
      success: true,\
      count: rows.length,\
      data: rows,\
    \});\
  \} catch (err) \{\
    console.error("
\f7 \uc0\u10060 
\f1  Error en b\'fasqueda:", err);\
    res.status(500).json(\{ success: false, error: "Error interno del servidor" \});\
  \}\
\});\
\
export default router;\
\

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Integraci\'f3n en server.js\
\
import express from "express";\
import businessesRouter from "./routes/businesses.js";\
\
const app = express();\
app.use(express.json());\
\
app.use("/api/v1/businesses", businessesRouter);\
\
const PORT = process.env.PORT || 4000;\
app.listen(PORT, () => \{\
  console.log(`
\f7\b0 \uc0\u55357 \u56960 
\f4\b  Servidor escuchando en puerto $\{PORT\}`);\
\});\
\

\f7\b0 4\uc0\u65039 \u8419 
\f4\b  Ejemplos de uso
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 \uc0\u55357 \u56590 
\f4\b  Buscar peluquer\'edas en Caucel a 3km del usuario:\
GET /api/v1/businesses/search?category=Peluquer\'eda&lat=21.021&lng=-89.704&radius=3\
\
Buscar por texto \'93pastel\'94:\
GET /api/v1/businesses/search?q=pastel\
\
Listar los m\'e1s cercanos:\
GET /api/v1/businesses/search?lat=21.022&lng=-89.705\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs28 \cf2 \uc0\u55357 \u56393 
\f1  \'bfQuieres que el pr\'f3ximo paso te lo arme como un 
\f2\b \cf2 endpoint /map que devuelva GeoJSON
\f1\b0 \cf2  para que lo pintes directo en un mapa interactivo (Leaflet/Mapbox/Google Maps)?\
\
\'a1Listo! Aqu\'ed tienes el 
\f2\b \cf2 endpoint /api/v1/businesses/map
\f1\b0 \cf2  que devuelve resultados en 
\f2\b \cf2 GeoJSON
\f1\b0 \cf2  (FeatureCollection) para pintarlos directo en Leaflet/Mapbox/Google Maps. Est\'e1 optimizado con 
\f2\b \cf2 PostGIS
\f1\b0 \cf2  y respeta filtros 
\f5 \cf2 lat,lng,radius,category,q
\f1 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 1) Ruta Express: /map (GeoJSON)\
\
// routes/businesses.js\
import express from "express";\
import pkg from "pg";\
import dotenv from "dotenv";\
\
dotenv.config();\
const \{ Pool \} = pkg;\
\
const pool = new Pool(\{ connectionString: process.env.DATABASE_URL \});\
const router = express.Router();\
\
/**\
 * GET /api/v1/businesses/map\
 * Query:\
 * - lat,lng: centro de b\'fasqueda (opcional, default Caucel)\
 * - radius: metros (opcional, default 3000)\
 * - category: texto parcial o exacto (opcional)\
 * - q: texto libre en name/address (opcional)\
 * - limit: m\'e1ximo features (opcional, default 300)\
 */\
router.get("/map", async (req, res) => \{\
  const \{\
    lat = 21.0212,        // centro Caucel por defecto\
    lng = -89.7048,\
    radius = 3000,        // 3 km\
    category,\
    q,\
    limit = 300\
  \} = req.query;\
\
  try \{\
    // Construimos WHERE din\'e1mico\
    let where = `WHERE 1=1`;\
    const params = [lng, lat, radius, limit];\
    let i = 5;\
\
    if (category) \{\
      where += ` AND category ILIKE $$\{i++\}`;\
      params.push(`%$\{category\}%`);\
    \}\
    if (q) \{\
      where += ` AND (name ILIKE $$\{i\} OR address ILIKE $$\{i\})`;\
      params.push(`%$\{q\}%`);\
      i++;\
    \}\
\
    // Filtrado espacial por radio cuando hay lat/lng\
    where += `\
      AND ST_DWithin(\
        location,\
        ST_SetSRID(ST_MakePoint($1, $2), 4326)::geography,\
        $3\
      )\
    `;\
\
    const sql = `\
      SELECT json_build_object(\
        'type','FeatureCollection',\
        'features', COALESCE(json_agg(\
          json_build_object(\
            'type','Feature',\
            'geometry', ST_AsGeoJSON(location)::json,\
            'properties', json_build_object(\
              'id', id,\
              'name', name,\
              'category', category,\
              'address', address,\
              'phone', phone,\
              'rating', rating,\
              'latitude', latitude,\
              'longitude', longitude,\
              'distance',\
                ST_Distance(\
                  location,\
                  ST_SetSRID(ST_MakePoint($1, $2), 4326)::geography\
                )\
            )\
          )\
          ORDER BY\
            ST_Distance(\
              location,\
              ST_SetSRID(ST_MakePoint($1, $2), 4326)::geography\
            )\
        ), '[]'::json)\
      ) AS fc\
      FROM (\
        SELECT id, name, category, address, phone, rating, latitude, longitude, location\
        FROM businesses\
        $\{where\}\
        ORDER BY\
          ST_Distance(location, ST_SetSRID(ST_MakePoint($1, $2), 4326)::geography) ASC\
        LIMIT $4\
      ) t;\
    `;\
\
    const \{ rows \} = await pool.query(sql, params);\
    res.setHeader("Content-Type", "application/geo+json");\
    return res.status(200).send(rows[0].fc);\
  \} catch (err) \{\
    console.error("
\f7\b0 \uc0\u10060 
\f4\b  Error /map:", err);\
    return res.status(500).json(\{ error: "Error generando GeoJSON" \});\
  \}\
\});\
\
export default router;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs28 \cf2 Y en tu 
\f5 \cf2 server.js
\f1 \cf2 :\
\
import express from "express";\
import businessesRouter from "./routes/businesses.js";\
import cors from "cors";\
\
const app = express();\
app.use(cors()); // si lo consumir\'e1s desde front local\
app.use(express.json());\
\
app.use("/api/v1/businesses", businessesRouter);\
\
app.listen(process.env.PORT || 4000, () =>\
  console.log(`
\f7 \uc0\u55357 \u56960 
\f1  API en puerto $\{process.env.PORT || 4000\}`)\
);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 2) Ejemplos de uso
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Todo a 
\f2\b 3 km
\f1\b0  (default), cerca de 
\f2\b Caucel
\f1\b0 :\
GET /api/v1/businesses/map\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f2\b \cf2 Farmacias
\f1\b0 \cf2  a 
\f2\b \cf2 2 km
\f1\b0 \cf2  del punto dado:\
GET /api/v1/businesses/map?lat=21.022&lng=-89.705&radius=2000&category=Farmacia\
Texto libre 
\f2\b \cf2 \'93tacos\'94
\f1\b0 \cf2  a 
\f2\b \cf2 5 km
\f1\b0 \cf2 :\
GET /api/v1/businesses/map?lat=21.02&lng=-89.706&radius=5000&q=tacos\
La respuesta es un 
\f2\b \cf2 FeatureCollection
\f1\b0 \cf2  est\'e1ndar:\
\{\
  "type": "FeatureCollection",\
  "features": [\
    \{\
      "type":"Feature",\
      "geometry":\{"type":"Point","coordinates":[-89.7048,21.0212]\},\
      "properties":\{\
        "id":1,"name":"Peluquer\'eda Caucel Style","category":"Peluquer\'eda",\
        "address":"Calle 70 #345, Caucel, M\'e9rida","phone":"9991234567",\
        "rating":4.5,"latitude":21.0212,"longitude":-89.7048,"distance":132.4\
      \}\
    \}\
  ]\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs44 \cf2 3) Pintar en Leaflet (Web)\
\
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>\
<div id="map" style="height: 500px;"></div>\
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>\
<script>\
  const map = L.map('map').setView([21.0212, -89.7048], 14);\
  L.tileLayer('https://\{s\}.tile.openstreetmap.org/\{z\}/\{x\}/\{y\}.png', \{ attribution:'\'a9 OSM' \}).addTo(map);\
\
  fetch('http://TU_BACKEND:4000/api/v1/businesses/map?lat=21.0212&lng=-89.7048&radius=3000')\
    .then(r => r.json())\
    .then(geojson => \{\
      L.geoJSON(geojson, \{\
        onEachFeature: (f, layer) => \{\
          const p = f.properties;\
          layer.bindPopup(`<b>$\{p.name\}</b><br>$\{p.category\}<br>$\{p.address\}<br>$\{Math.round(p.distance)\} m`);\
        \}\
      \}).addTo(map);\
    \});\
</script>\
\
4) Pintar en React Native (react-native-maps)
\f1\b0\fs28 \cf2 \
\
Como ya tienes la pantalla, ahora puedes consumir 
\f5 \cf2 /map
\f1 \cf2  y convertir cada 
\f5 \cf2 Feature
\f1 \cf2  a 
\f5 \cf2 Marker
\f1 \cf2 :\
\
type Feature = \{\
  type: 'Feature';\
  geometry: \{ type: 'Point'; coordinates: [number, number] \}; // [lng, lat]\
  properties: \{\
    id: number; name: string; category: string; address: string;\
    phone?: string; rating?: number; distance?: number;\
    latitude: number; longitude: number;\
  \};\
\};\
\
async function loadGeoJSON(params) \{\
  const res = await fetch(`$\{API_BASE_URL\}/map?` + new URLSearchParams(params as any));\
  const fc = await res.json(); // FeatureCollection\
  return (fc.features as Feature[]);\
\}\
\
// luego:\
const feats = await loadGeoJSON(\{ lat, lng, radius, category, q \});\
setMarkers(feats.map(f => (\{\
  id: f.properties.id,\
  title: f.properties.name,\
  category: f.properties.category,\
  coordinate: \{ latitude: f.geometry.coordinates[1], longitude: f.geometry.coordinates[0] \}\
\})));\
\

\f4\b\fs44 \cf2 5) Opcionales Pro (cuando escales)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Clustering
\f1\b0 : en Leaflet usa 
\f5 leaflet.markercluster
\f1  o en RN 
\f5 react-native-map-clustering
\f1 .\
	\'95	
\f2\b Bbox en vez de radio
\f1\b0 : agrega filtros por 
\f5 minLat,maxLat,minLng,maxLng
\f1  para b\'fasquedas \'93dentro de la vista\'94.\
	\'95	
\f2\b Paginaci\'f3n
\f1\b0 : 
\f5 limit & offset
\f1  para \'e1reas densas.\
	\'95	
\f2\b Cache
\f1\b0 : CDN/Cache por 15\'9660 s para queries frecuentes.\
	\'95	
\f2\b Campos extra
\f1\b0 : horarios, fotos, WhatsApp, links GMaps, etc.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfTe armo ahora la 
\f2\b \cf2 pantalla de detalle del negocio
\f1\b0 \cf2  (con bot\'f3n \'93Llamar\'94, \'93WhatsApp\'94, \'93C\'f3mo llegar\'94 y fotos), conectada a un endpoint 
\f5 \cf2 GET /api/v1/businesses/:id
\f1 \cf2 ?\
\
Adelante\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Vamos a armar el endpoint 
\f5 \cf2 /api/v1/businesses/map
\f1 \cf2  que devuelva 
\f2\b \cf2 GeoJSON
\f1\b0 \cf2  (formato est\'e1ndar para mapas) y as\'ed podr\'e1s mostrar tus negocios directamente en 
\f2\b \cf2 Leaflet, Mapbox o Google Maps
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Endpoint /map en Express
\f1\b0\fs28 \cf2 \
\
Crea en 
\f5 \cf2 routes/businesses.js
\f1 \cf2  debajo del 
\f5 \cf2 /search
\f1 \cf2 :\
\
/**\
 * GET /api/v1/businesses/map\
 * Devuelve los negocios en formato GeoJSON\
 * Par\'e1metros opcionales:\
 * - category\
 * - lat, lng, radius (para filtrar por cercan\'eda)\
 */\
router.get("/map", async (req, res) => \{\
  const \{ category, lat, lng, radius \} = req.query;\
\
  try \{\
    let query = `\
      SELECT id, name, category, address, phone, rating,\
             latitude, longitude,\
             ST_AsGeoJSON(location)::json AS geometry\
      FROM businesses\
      WHERE 1=1\
    `;\
    const values = [];\
    let paramIndex = 1;\
\
    // Filtro por categor\'eda\
    if (category) \{\
      query += ` AND category ILIKE $$\{paramIndex\}`;\
      values.push(`%$\{category\}%`);\
      paramIndex++;\
    \}\
\
    // Filtro de radio si hay lat/lng\
    if (lat && lng) \{\
      query += ` AND ST_DWithin(\
        location,\
        ST_SetSRID(ST_MakePoint($$\{paramIndex\}, $$\{paramIndex + 1\}), 4326)::geography,\
        $$\{paramIndex + 2\} * 1000\
      )`;\
      values.push(lng, lat, radius || 5); // default 5 km\
      paramIndex += 3;\
    \}\
\
    const \{ rows \} = await pool.query(query, values);\
\
    // Construcci\'f3n de GeoJSON\
    const geojson = \{\
      type: "FeatureCollection",\
      features: rows.map((row) => (\{\
        type: "Feature",\
        geometry: row.geometry,\
        properties: \{\
          id: row.id,\
          name: row.name,\
          category: row.category,\
          address: row.address,\
          phone: row.phone,\
          rating: row.rating,\
        \},\
      \})),\
    \};\
\
    res.json(geojson);\
  \} catch (err) \{\
    console.error("
\f7 \uc0\u10060 
\f1  Error en /map:", err);\
    res.status(500).json(\{ success: false, error: "Error interno del servidor" \});\
  \}\
\});\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Ejemplo de Respuesta GeoJSON\
\
\{\
  "type": "FeatureCollection",\
  "features": [\
    \{\
      "type": "Feature",\
      "geometry": \{ "type": "Point", "coordinates": [-89.704, 21.021] \},\
      "properties": \{\
        "id": 1,\
        "name": "Peluquer\'eda Caucel",\
        "category": "Peluquer\'eda",\
        "address": "Av. 2000, Caucel, M\'e9rida",\
        "phone": "9991234567",\
        "rating": 4.5\
      \}\
    \}\
  ]\
\}\
\

\f7\b0 3\uc0\u65039 \u8419 
\f4\b  Ejemplos de uso
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs30 \cf2 Todos los negocios en GeoJSON\
\
GET /api/v1/businesses/map\
Solo ferreter\'edas\
GET /api/v1/businesses/map?category=Ferreter\'eda\
Negocios a 2km de Caucel Centro\
GET /api/v1/businesses/map?lat=21.021&lng=-89.704&radius=2\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs34 \cf2 4\uc0\u65039 \u8419 
\f4\b  Integraci\'f3n r\'e1pida con Leaflet\
\
<script>\
  fetch("/api/v1/businesses/map")\
    .then(res => res.json())\
    .then(data => \{\
      L.geoJSON(data, \{\
        onEachFeature: (feature, layer) => \{\
          layer.bindPopup(`\
            <b>$\{feature.properties.name\}</b><br>\
            $\{feature.properties.category\}<br>\
            $\{feature.properties.address\}<br>\
            
\f7\b0 \uc0\u55357 \u56542 
\f4\b  $\{feature.properties.phone || "N/A"\}\
          `);\
        \}\
      \}).addTo(map);\
    \});\
</script>\
\

\f7\b0\fs28 \cf2 \uc0\u55357 \u56393 
\f1  \'bfQuieres que el pr\'f3ximo paso lo arme como un 
\f2\b \cf2 dashboard web m\'ednimo en React (con Leaflet)
\f1\b0 \cf2  para que visualices este GeoJSON directamente con un mapa interactivo?\
\
Adelante, \'a1Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 !\
Entonces ahora armamos el 
\f2\b \cf2 dashboard m\'ednimo en React + Leaflet
\f1\b0 \cf2  para que consumas el endpoint 
\f5 \cf2 /api/v1/businesses/map
\f1 \cf2  y veas en el mapa los negocios en Caucel.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs44 \cf2 1\uc0\u65039 \u8419 
\f4\b  Crear proyecto React
\f1\b0\fs28 \cf2 \
\
Si no lo tienes a\'fan, creamos con Vite (m\'e1s ligero que CRA):\
\
npm create vite@latest business-map --template react\
cd business-map\
npm install\
\
Instalamos 
\f2\b \cf2 Leaflet
\f1\b0 \cf2  y el wrapper para React:\
\
npm install leaflet react-leaflet\
\
Agregamos los estilos de Leaflet en 
\f5 \cf2 src/index.css
\f1 \cf2  (arriba de todo):\
\
@import "leaflet/dist/leaflet.css";\
\

\f7\fs44 \cf2 2\uc0\u65039 \u8419 
\f4\b  Crear componente MapView.jsx
\f1\b0\fs28 \cf2 \
\
Dentro de 
\f5 \cf2 src/components/MapView.jsx
\f1 \cf2 :\
\
import \{ MapContainer, TileLayer, Marker, Popup \} from "react-leaflet";\
import \{ useEffect, useState \} from "react";\
import L from "leaflet";\
\
const MapView = () => \{\
  const [businesses, setBusinesses] = useState([]);\
\
  useEffect(() => \{\
    fetch("http://localhost:3000/api/v1/businesses/map")\
      .then(res => res.json())\
      .then(data => \{\
        if (data.features) \{\
          setBusinesses(data.features);\
        \}\
      \})\
      .catch(err => console.error("
\f7 \uc0\u10060 
\f1  Error cargando negocios:", err));\
  \}, []);\
\
  const defaultIcon = new L.Icon(\{\
    iconUrl: "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png",\
    iconSize: [25, 41],\
    iconAnchor: [12, 41],\
    popupAnchor: [1, -34]\
  \});\
\
  return (\
    <MapContainer\
      center=\{[21.021, -89.704]\} // Caucel, M\'e9rida\
      zoom=\{14\}\
      style=\{\{ height: "100vh", width: "100%" \}\}\
    >\
      <TileLayer\
        url="https://\{s\}.tile.openstreetmap.org/\{z\}/\{x\}/\{y\}.png"\
        attribution="&copy; OpenStreetMap contributors"\
      />\
      \{businesses.map((biz) => (\
        <Marker\
          key=\{biz.properties.id\}\
          position=\{[\
            biz.geometry.coordinates[1],\
            biz.geometry.coordinates[0]\
          ]\}\
          icon=\{defaultIcon\}\
        >\
          <Popup>\
            <b>\{biz.properties.name\}</b><br />\
            \{biz.properties.category\}<br />\
            \{biz.properties.address\}<br />\
            
\f7 \uc0\u55357 \u56542 
\f1  \{biz.properties.phone || "N/A"\}<br />\
            
\f7 \uc0\u11088 
\f1  \{biz.properties.rating || "\'97"\}\
          </Popup>\
        </Marker>\
      ))\}\
    </MapContainer>\
  );\
\};\
\
export default MapView;\
\

\f7\fs44 \cf2 3\uc0\u65039 \u8419 
\f4\b  Integraci\'f3n en App.jsx
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 src/App.jsx
\f1 \cf2 :\
\
import MapView from "./components/MapView";\
\
function App() \{\
  return (\
    <div style=\{\{ height: "100vh", width: "100%" \}\}>\
      <MapView />\
    </div>\
  );\
\}\
\
export default App;\
\

\f7\fs44 \cf2 4\uc0\u65039 \u8419 
\f4\b  Ejecutar\
\
npm run dev\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs28 \cf2 Abres en el navegador 
\f5 \cf2 http://localhost:5173
\f1 \cf2  y deber\'edas ver 
\f2\b \cf2 Caucel en el mapa con pines de negocios
\f1\b0 \cf2  que se cargan del backend.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u9889 
\f1  Pr\'f3ximos pasos posibles:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Barra de b\'fasqueda (categor\'eda / palabra clave).\
	\'95	Bot\'f3n de \'93mi ubicaci\'f3n\'94 para centrar en el usuario.\
	\'95	Filtros por distancia (ejemplo: 1 km, 5 km, 10 km).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que arme el siguiente paso como 
\f2\b \cf2 filtros en la UI (categor\'eda + radio de distancia)
\f1\b0 \cf2  sobre este mismo mapa? Adelante\
\
\'a1Excelente 
\f7 \uc0\u55357 \u56613 
\f1 ! Vamos a extender el 
\f2\b \cf2 dashboard con filtros
\f1\b0 \cf2 : categor\'eda + radio de distancia.\
\
Esto va a permitir que en el 
\f2\b \cf2 frontend
\f1\b0 \cf2  el usuario pueda seleccionar un tipo de negocio (ejemplo: peluquer\'edas, farmacias, talleres) y un radio en kil\'f3metros para ver solo los m\'e1s cercanos.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs44 \cf2 1\uc0\u65039 \u8419 
\f4\b  Agregar filtros en MapView.jsx
\f1\b0\fs28 \cf2 \
\
Reemplaza el c\'f3digo de 
\f5 \cf2 MapView.jsx
\f1 \cf2  por esta versi\'f3n mejorada:\
\
import \{ MapContainer, TileLayer, Marker, Popup, useMap \} from "react-leaflet";\
import \{ useEffect, useState \} from "react";\
import L from "leaflet";\
\
// Componente para mover el mapa a la ubicaci\'f3n del usuario\
function MyLocation(\{ setUserLocation \}) \{\
  const map = useMap();\
\
  useEffect(() => \{\
    if (navigator.geolocation) \{\
      navigator.geolocation.getCurrentPosition((pos) => \{\
        const \{ latitude, longitude \} = pos.coords;\
        setUserLocation([latitude, longitude]);\
        map.setView([latitude, longitude], 15);\
      \});\
    \}\
  \}, [map, setUserLocation]);\
\
  return null;\
\}\
\
const MapView = () => \{\
  const [businesses, setBusinesses] = useState([]);\
  const [filtered, setFiltered] = useState([]);\
  const [category, setCategory] = useState("");\
  const [radius, setRadius] = useState(0); // km\
  const [userLocation, setUserLocation] = useState(null);\
\
  useEffect(() => \{\
    fetch("http://localhost:3000/api/v1/businesses/map")\
      .then((res) => res.json())\
      .then((data) => \{\
        if (data.features) \{\
          setBusinesses(data.features);\
          setFiltered(data.features);\
        \}\
      \})\
      .catch((err) => console.error("
\f7 \uc0\u10060 
\f1  Error cargando negocios:", err));\
  \}, []);\
\
  // Funci\'f3n de c\'e1lculo de distancia Haversine\
  const getDistanceKm = (lat1, lon1, lat2, lon2) => \{\
    const R = 6371; // Radio tierra km\
    const dLat = ((lat2 - lat1) * Math.PI) / 180;\
    const dLon = ((lon2 - lon1) * Math.PI) / 180;\
    const a =\
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\
      Math.cos((lat1 * Math.PI) / 180) *\
        Math.cos((lat2 * Math.PI) / 180) *\
        Math.sin(dLon / 2) *\
        Math.sin(dLon / 2);\
    return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\
  \};\
\
  // Filtro\
  useEffect(() => \{\
    let results = businesses;\
\
    if (category) \{\
      results = results.filter(\
        (biz) =>\
          biz.properties.category.toLowerCase() === category.toLowerCase()\
      );\
    \}\
\
    if (radius > 0 && userLocation) \{\
      results = results.filter((biz) => \{\
        const lat = biz.geometry.coordinates[1];\
        const lon = biz.geometry.coordinates[0];\
        const dist = getDistanceKm(\
          userLocation[0],\
          userLocation[1],\
          lat,\
          lon\
        );\
        return dist <= radius;\
      \});\
    \}\
\
    setFiltered(results);\
  \}, [category, radius, userLocation, businesses]);\
\
  const defaultIcon = new L.Icon(\{\
    iconUrl:\
      "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png",\
    iconSize: [25, 41],\
    iconAnchor: [12, 41],\
    popupAnchor: [1, -34],\
  \});\
\
  return (\
    <div style=\{\{ height: "100vh", width: "100%", display: "flex", flexDirection: "column" \}\}>\
      \{/* Barra de Filtros */\}\
      <div style=\{\{ padding: "10px", background: "#f4f4f4", zIndex: 1000 \}\}>\
        <label>\
          Categor\'eda:\{" "\}\
          <input\
            type="text"\
            value=\{category\}\
            onChange=\{(e) => setCategory(e.target.value)\}\
            placeholder="Ej: peluquer\'eda"\
          />\
        </label>\
        <label style=\{\{ marginLeft: "20px" \}\}>\
          Radio (km):\{" "\}\
          <input\
            type="number"\
            value=\{radius\}\
            onChange=\{(e) => setRadius(Number(e.target.value))\}\
            placeholder="0 = sin filtro"\
          />\
        </label>\
        <button onClick=\{() => \{ setCategory(""); setRadius(0); \}\}>\
          Reset\
        </button>\
      </div>\
\
      \{/* Mapa */\}\
      <MapContainer\
        center=\{[21.021, -89.704]\} // Caucel, M\'e9rida\
        zoom=\{14\}\
        style=\{\{ flex: 1 \}\}\
      >\
        <TileLayer\
          url="https://\{s\}.tile.openstreetmap.org/\{z\}/\{x\}/\{y\}.png"\
          attribution="&copy; OpenStreetMap contributors"\
        />\
        <MyLocation setUserLocation=\{setUserLocation\} />\
\
        \{filtered.map((biz) => (\
          <Marker\
            key=\{biz.properties.id\}\
            position=\{[\
              biz.geometry.coordinates[1],\
              biz.geometry.coordinates[0],\
            ]\}\
            icon=\{defaultIcon\}\
          >\
            <Popup>\
              <b>\{biz.properties.name\}</b>\
              <br />\
              \{biz.properties.category\}\
              <br />\
              \{biz.properties.address\}\
              <br />\
              
\f7 \uc0\u55357 \u56542 
\f1  \{biz.properties.phone || "N/A"\}\
              <br />\
              
\f7 \uc0\u11088 
\f1  \{biz.properties.rating || "\'97"\}\
            </Popup>\
          </Marker>\
        ))\}\
\
        \{/* Marcador de ubicaci\'f3n del usuario */\}\
        \{userLocation && (\
          <Marker\
            position=\{userLocation\}\
            icon=\{\
              new L.Icon(\{\
                iconUrl:\
                  "https://cdn-icons-png.flaticon.com/512/64/64113.png",\
                iconSize: [30, 30],\
                iconAnchor: [15, 30],\
              \})\
            \}\
          >\
            <Popup>
\f7 \uc0\u55357 \u56525 
\f1  Est\'e1s aqu\'ed</Popup>\
          </Marker>\
        )\}\
      </MapContainer>\
    </div>\
  );\
\};\
\
export default MapView;\
\

\f7\fs44 \cf2 2\uc0\u65039 \u8419 
\f4\b  Funcionalidades a\'f1adidas
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u9989 
\f1  Buscar negocios por 
\f2\b \cf2 categor\'eda exacta
\f1\b0 \cf2  (ejemplo: \'93farmacia\'94, \'93dentista\'94).\

\f7 \uc0\u9989 
\f1  Filtrar negocios por 
\f2\b \cf2 radio en kil\'f3metros
\f1\b0 \cf2  desde la ubicaci\'f3n actual del usuario.\

\f7 \uc0\u9989 
\f1  Bot\'f3n 
\f2\b \cf2 Reset
\f1\b0 \cf2  para limpiar filtros.\

\f7 \uc0\u9989 
\f1  Marcador especial que muestra d\'f3nde est\'e1 el usuario.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs44 \cf2 3\uc0\u65039 \u8419 
\f4\b  Pr\'f3ximos pasos sugeridos
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f7 \uc0\u55357 \u56589 
\f1  Autocompletado de categor\'edas (en lugar de escribir texto libre).\
	\'95	
\f7 \uc0\u55357 \u56522 
\f1  Panel lateral con lista de negocios filtrados adem\'e1s del mapa.\
	\'95	
\f7 \uc0\u55357 \u57314 
\f1  Diferenciar \'edconos por tipo de negocio.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 \'bfQuieres que arme 
\f2\b \cf2 el panel lateral con lista de negocios filtrados
\f1\b0 \cf2  (tipo directorio + mapa juntos) como siguiente mejora? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 . Ahora le vamos a meter un 
\f2\b \cf2 panel lateral tipo directorio
\f1\b0 \cf2  que se sincroniza con el mapa:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	A la izquierda \uc0\u8594  lista de negocios filtrados.\
	\'95	A la derecha \uc0\u8594  mapa con los mismos negocios.\
	\'95	Al hacer clic en un negocio en la lista, el mapa se centra en \'e9l y abre el popup.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs44 \cf2 1\uc0\u65039 \u8419 
\f4\b  Nuevo MapWithSidebar.jsx
\f1\b0\fs28 \cf2 \
\
Crea este componente en 
\f5 \cf2 frontend/src/components/MapWithSidebar.jsx
\f1 \cf2 :\
\
import \{ MapContainer, TileLayer, Marker, Popup, useMap \} from "react-leaflet";\
import \{ useEffect, useState, useRef \} from "react";\
import L from "leaflet";\
import "./MapWithSidebar.css";\
\
// Componente para ubicaci\'f3n del usuario\
function MyLocation(\{ setUserLocation \}) \{\
  const map = useMap();\
\
  useEffect(() => \{\
    if (navigator.geolocation) \{\
      navigator.geolocation.getCurrentPosition((pos) => \{\
        const \{ latitude, longitude \} = pos.coords;\
        setUserLocation([latitude, longitude]);\
        map.setView([latitude, longitude], 15);\
      \});\
    \}\
  \}, [map, setUserLocation]);\
\
  return null;\
\}\
\
const MapWithSidebar = () => \{\
  const [businesses, setBusinesses] = useState([]);\
  const [filtered, setFiltered] = useState([]);\
  const [category, setCategory] = useState("");\
  const [radius, setRadius] = useState(0);\
  const [userLocation, setUserLocation] = useState(null);\
  const markerRefs = useRef(\{\});\
\
  useEffect(() => \{\
    fetch("http://localhost:3000/api/v1/businesses/map")\
      .then((res) => res.json())\
      .then((data) => \{\
        if (data.features) \{\
          setBusinesses(data.features);\
          setFiltered(data.features);\
        \}\
      \})\
      .catch((err) => console.error("
\f7 \uc0\u10060 
\f1  Error cargando negocios:", err));\
  \}, []);\
\
  const getDistanceKm = (lat1, lon1, lat2, lon2) => \{\
    const R = 6371;\
    const dLat = ((lat2 - lat1) * Math.PI) / 180;\
    const dLon = ((lon2 - lon1) * Math.PI) / 180;\
    const a =\
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\
      Math.cos((lat1 * Math.PI) / 180) *\
        Math.cos((lat2 * Math.PI) / 180) *\
        Math.sin(dLon / 2) *\
        Math.sin(dLon / 2);\
    return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\
  \};\
\
  useEffect(() => \{\
    let results = businesses;\
\
    if (category) \{\
      results = results.filter(\
        (biz) =>\
          biz.properties.category.toLowerCase() === category.toLowerCase()\
      );\
    \}\
\
    if (radius > 0 && userLocation) \{\
      results = results.filter((biz) => \{\
        const lat = biz.geometry.coordinates[1];\
        const lon = biz.geometry.coordinates[0];\
        const dist = getDistanceKm(\
          userLocation[0],\
          userLocation[1],\
          lat,\
          lon\
        );\
        return dist <= radius;\
      \});\
    \}\
\
    setFiltered(results);\
  \}, [category, radius, userLocation, businesses]);\
\
  const defaultIcon = new L.Icon(\{\
    iconUrl:\
      "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png",\
    iconSize: [25, 41],\
    iconAnchor: [12, 41],\
    popupAnchor: [1, -34],\
  \});\
\
  const handleBusinessClick = (id, lat, lon) => \{\
    const marker = markerRefs.current[id];\
    if (marker) \{\
      marker.openPopup();\
    \}\
  \};\
\
  return (\
    <div className="map-sidebar-container">\
      \{/* Sidebar */\}\
      <div className="sidebar">\
        <h2>
\f7 \uc0\u55357 \u56525 
\f1  Negocios</h2>\
        <div className="filters">\
          <input\
            type="text"\
            value=\{category\}\
            onChange=\{(e) => setCategory(e.target.value)\}\
            placeholder="Categor\'eda (ej: farmacia)"\
          />\
          <input\
            type="number"\
            value=\{radius\}\
            onChange=\{(e) => setRadius(Number(e.target.value))\}\
            placeholder="Radio km"\
          />\
          <button onClick=\{() => \{ setCategory(""); setRadius(0); \}\}>\
            Reset\
          </button>\
        </div>\
\
        <ul>\
          \{filtered.length > 0 ? (\
            filtered.map((biz) => (\
              <li\
                key=\{biz.properties.id\}\
                onClick=\{() =>\
                  handleBusinessClick(\
                    biz.properties.id,\
                    biz.geometry.coordinates[1],\
                    biz.geometry.coordinates[0]\
                  )\
                \}\
              >\
                <b>\{biz.properties.name\}</b> <br />\
                \{biz.properties.category\} <br />\
                
\f7 \uc0\u11088 
\f1  \{biz.properties.rating || "\'97"\}\
              </li>\
            ))\
          ) : (\
            <p>No hay resultados</p>\
          )\}\
        </ul>\
      </div>\
\
      \{/* Mapa */\}\
      <div className="map-container">\
        <MapContainer center=\{[21.021, -89.704]\} zoom=\{14\} style=\{\{ height: "100%", width: "100%" \}\}>\
          <TileLayer\
            url="https://\{s\}.tile.openstreetmap.org/\{z\}/\{x\}/\{y\}.png"\
            attribution="&copy; OpenStreetMap contributors"\
          />\
          <MyLocation setUserLocation=\{setUserLocation\} />\
\
          \{filtered.map((biz) => (\
            <Marker\
              key=\{biz.properties.id\}\
              position=\{[\
                biz.geometry.coordinates[1],\
                biz.geometry.coordinates[0],\
              ]\}\
              icon=\{defaultIcon\}\
              ref=\{(ref) => (markerRefs.current[biz.properties.id] = ref)\}\
            >\
              <Popup>\
                <b>\{biz.properties.name\}</b>\
                <br />\
                \{biz.properties.category\}\
                <br />\
                \{biz.properties.address\}\
                <br />\
                
\f7 \uc0\u55357 \u56542 
\f1  \{biz.properties.phone || "N/A"\}\
                <br />\
                
\f7 \uc0\u11088 
\f1  \{biz.properties.rating || "\'97"\}\
              </Popup>\
            </Marker>\
          ))\}\
\
          \{userLocation && (\
            <Marker\
              position=\{userLocation\}\
              icon=\{\
                new L.Icon(\{\
                  iconUrl:\
                    "https://cdn-icons-png.flaticon.com/512/64/64113.png",\
                  iconSize: [30, 30],\
                  iconAnchor: [15, 30],\
                \})\
              \}\
            >\
              <Popup>
\f7 \uc0\u55357 \u56525 
\f1  Est\'e1s aqu\'ed</Popup>\
            </Marker>\
          )\}\
        </MapContainer>\
      </div>\
    </div>\
  );\
\};\
\
export default MapWithSidebar;\
\
	
\f7\fs44 \cf2 2\uc0\u65039 \u8419 
\f4\b  Estilos MapWithSidebar.css
\f1\b0\fs28 \cf2 \
\
Crea el archivo 
\f5 \cf2 frontend/src/components/MapWithSidebar.css
\f1 \cf2 :\
\
.map-sidebar-container \{\
  display: flex;\
  height: 100vh;\
  width: 100%;\
\}\
\
.sidebar \{\
  width: 300px;\
  background: #f9f9f9;\
  padding: 15px;\
  border-right: 1px solid #ddd;\
  overflow-y: auto;\
\}\
\
.sidebar h2 \{\
  margin-top: 0;\
\}\
\
.sidebar .filters \{\
  margin-bottom: 10px;\
\}\
\
.sidebar input \{\
  display: block;\
  width: 100%;\
  margin-bottom: 8px;\
  padding: 6px;\
\}\
\
.sidebar button \{\
  display: block;\
  margin-bottom: 12px;\
  padding: 6px;\
  width: 100%;\
\}\
\
.sidebar ul \{\
  list-style: none;\
  padding: 0;\
\}\
\
.sidebar li \{\
  padding: 8px;\
  border-bottom: 1px solid #ddd;\
  cursor: pointer;\
\}\
\
.sidebar li:hover \{\
  background: #eee;\
\}\
\
.map-container \{\
  flex: 1;\
\}\
\

\f7\fs44 \cf2 3\uc0\u65039 \u8419 
\f4\b  Uso
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 App.jsx
\f1 \cf2 , cambia la vista al nuevo componente:\
\
import MapWithSidebar from "./components/MapWithSidebar";\
\
function App() \{\
  return <MapWithSidebar />;\
\}\
\
export default App;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u55357 \u56393 
\f1  Con esto ya tienes 
\f2\b \cf2 un dashboard estilo directorio + mapa
\f1\b0 \cf2  al estilo Google Maps.\
\'bfQuieres que el 
\f2\b \cf2 listado tambi\'e9n muestre la distancia (km) desde la ubicaci\'f3n del usuario
\f1\b0 \cf2  en cada negocio? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56613 
\f1 , le vamos a a\'f1adir la 
\f2\b \cf2 distancia en km desde tu ubicaci\'f3n
\f1\b0 \cf2  a cada negocio, directamente en la lista lateral.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 1\uc0\u65039 \u8419 
\f4\b  Editar MapWithSidebar.jsx
\f1\b0\fs28 \cf2 \
\
Modificamos la parte del render de la lista (
\f5 \cf2 <ul>...</ul>
\f1 \cf2 ). Agregamos el c\'e1lculo de la distancia usando la funci\'f3n 
\f5 \cf2 getDistanceKm
\f1 \cf2  y la mostramos:\
\
<ul>\
  \{filtered.length > 0 ? (\
    filtered.map((biz) => \{\
      const lat = biz.geometry.coordinates[1];\
      const lon = biz.geometry.coordinates[0];\
      let distance = null;\
\
      if (userLocation) \{\
        distance = getDistanceKm(\
          userLocation[0],\
          userLocation[1],\
          lat,\
          lon\
        ).toFixed(2); // 2 decimales\
      \}\
\
      return (\
        <li\
          key=\{biz.properties.id\}\
          onClick=\{() =>\
            handleBusinessClick(\
              biz.properties.id,\
              lat,\
              lon\
            )\
          \}\
        >\
          <b>\{biz.properties.name\}</b> <br />\
          \{biz.properties.category\} <br />\
          
\f7 \uc0\u11088 
\f1  \{biz.properties.rating || "\'97"\} <br />\
          \{distance ? `
\f7 \uc0\u55357 \u56527 
\f1  $\{distance\} km` : ""\}\
        </li>\
      );\
    \})\
  ) : (\
    <p>No hay resultados</p>\
  )\}\
</ul>\
\

\f7\fs30 \cf2 2\uc0\u65039 \u8419 
\f4\b  En el popup tambi\'e9n (opcional)
\f1\b0\fs28 \cf2 \
\
Si quieres que la distancia aparezca tambi\'e9n dentro del 
\f2\b \cf2 Popup
\f1\b0 \cf2  del mapa, edita el 
\f5 \cf2 Popup
\f1 \cf2  dentro de 
\f5 \cf2 <Marker>
\f1 \cf2 :\
\
<Popup>\
  <b>\{biz.properties.name\}</b>\
  <br />\
  \{biz.properties.category\}\
  <br />\
  \{biz.properties.address\}\
  <br />\
  
\f7 \uc0\u55357 \u56542 
\f1  \{biz.properties.phone || "N/A"\}\
  <br />\
  
\f7 \uc0\u11088 
\f1  \{biz.properties.rating || "\'97"\}\
  <br />\
  \{userLocation &&\
    `
\f7 \uc0\u55357 \u56527 
\f1  $\{getDistanceKm(\
      userLocation[0],\
      userLocation[1],\
      biz.geometry.coordinates[1],\
      biz.geometry.coordinates[0]\
    ).toFixed(2)\} km`\}\
</Popup>\
\

\f7\fs30 \cf2 3\uc0\u65039 \u8419 
\f4\b  Resultado
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	En la lista lateral cada negocio mostrar\'e1:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u55357 \u56527 
\f5 \cf2  1.23 km
\f1 \cf2  (distancia desde tu ubicaci\'f3n).\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	En el popup del mapa, tambi\'e9n se ver\'e1 la distancia.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 \'bfQuieres que la 
\f2\b \cf2 lista se ordene autom\'e1ticamente por cercan\'eda
\f1\b0 \cf2  (el negocio m\'e1s cercano arriba) cada vez que detecte tu ubicaci\'f3n? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  entonces vamos a ordenar la lista lateral por 
\f2\b \cf2 cercan\'eda al usuario
\f1\b0 \cf2  autom\'e1ticamente.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 1\uc0\u65039 \u8419 
\f4\b  Modificar el render de negocios ordenados
\f1\b0\fs28 \cf2 \
\
Dentro de 
\f5 \cf2 MapWithSidebar.jsx
\f1 \cf2 , justo antes de renderizar la lista, ordenamos los negocios usando la funci\'f3n 
\f5 \cf2 getDistanceKm
\f1 \cf2 :\
\
// Negocios filtrados\
let filtered = businesses.filter((biz) => \{\
  const matchesCategory =\
    selectedCategory === "all" ||\
    biz.properties.category === selectedCategory;\
  const matchesSearch = biz.properties.name\
    .toLowerCase()\
    .includes(search.toLowerCase());\
  return matchesCategory && matchesSearch;\
\});\
\
// Ordenar por distancia si el usuario comparti\'f3 ubicaci\'f3n\
if (userLocation) \{\
  filtered = filtered.sort((a, b) => \{\
    const distA = getDistanceKm(\
      userLocation[0],\
      userLocation[1],\
      a.geometry.coordinates[1],\
      a.geometry.coordinates[0]\
    );\
    const distB = getDistanceKm(\
      userLocation[0],\
      userLocation[1],\
      b.geometry.coordinates[1],\
      b.geometry.coordinates[0]\
    );\
    return distA - distB; // m\'e1s cerca primero\
  \});\
\}\
\

\f7\fs30 \cf2 2\uc0\u65039 \u8419 
\f4\b  El resto del c\'f3digo queda igual
\f1\b0\fs28 \cf2 \
\
La lista ahora usar\'e1 
\f5 \cf2 filtered.map(...)
\f1 \cf2  como ya lo ten\'edamos, pero ahora aparecer\'e1n los negocios 
\f2\b \cf2 m\'e1s cercanos primero
\f1\b0 \cf2  
\f7 \uc0\u55357 \u56525 
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 3\uc0\u65039 \u8419 
\f4\b  Resultado
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Si 
\f2\b no hay ubicaci\'f3n del usuario
\f1\b0  \uc0\u8594  lista sin ordenar (solo filtro + b\'fasqueda).\
	\'95	Si 
\f2\b el usuario permite ubicaci\'f3n
\f1\b0  \uc0\u8594  lista ordenada de 
\f2\b m\'e1s cercano a m\'e1s lejano
\f1\b0 .\
	\'95	En la lista y el popup se muestra la distancia (
\f7 \uc0\u55357 \u56527 
\f5  x.xx km
\f1 ).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que adem\'e1s pongamos un 
\f2\b \cf2 filtro por distancia
\f1\b0 \cf2  (ejemplo: \'93mostrar solo negocios a menos de 5 km\'94)? Si\
\
\'a1Genial! 
\f7 \uc0\u55357 \u56613 
\f1  Vamos a a\'f1adir un 
\f2\b \cf2 filtro por distancia
\f1\b0 \cf2  (ejemplo: \'93solo negocios a menos de 5 km\'94).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Agregar un selector de radio en la barra lateral
\f1\b0\fs28 \cf2 \
\
En tu 
\f5 \cf2 <div className="sidebar">
\f1 \cf2 , debajo de la b\'fasqueda, pon algo as\'ed:\
\
<div>\
  <label>Filtrar por distancia:</label>\
  <select\
    value=\{maxDistance || ""\}\
    onChange=\{(e) =>\
      setMaxDistance(e.target.value ? parseFloat(e.target.value) : null)\
    \}\
  >\
    <option value="">Todas</option>\
    <option value="1">\uc0\u8804  1 km</option>\
    <option value="3">\uc0\u8804  3 km</option>\
    <option value="5">\uc0\u8804  5 km</option>\
    <option value="10">\uc0\u8804  10 km</option>\
  </select>\
</div>\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  A\'f1adir estado para la distancia m\'e1xima
\f1\b0\fs28 \cf2 \
\
En la parte superior de tu componente (
\f5 \cf2 MapWithSidebar
\f1 \cf2 ):\
\
const [maxDistance, setMaxDistance] = useState(null);\
\

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Aplicar filtro de distancia
\f1\b0\fs28 \cf2 \
\
Modifica el bloque de filtrado antes de ordenar:\
\
let filtered = businesses.filter((biz) => \{\
  const matchesCategory =\
    selectedCategory === "all" ||\
    biz.properties.category === selectedCategory;\
  const matchesSearch = biz.properties.name\
    .toLowerCase()\
    .includes(search.toLowerCase());\
\
  let matchesDistance = true;\
  if (userLocation && maxDistance) \{\
    const dist = getDistanceKm(\
      userLocation[0],\
      userLocation[1],\
      biz.geometry.coordinates[1],\
      biz.geometry.coordinates[0]\
    );\
    matchesDistance = dist <= maxDistance;\
  \}\
\
  return matchesCategory && matchesSearch && matchesDistance;\
\});\
\

\f7\fs34 \cf2 4\uc0\u65039 \u8419 
\f4\b  Ordenar despu\'e9s de filtrar
\f1\b0\fs28 \cf2 \
\
El bloque de ordenar por cercan\'eda sigue igual, justo despu\'e9s de este filtro.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u9989 
\f4\b  Resultado
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Ahora puedes elegir:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	\'93Todas\'94 (sin filtro de distancia).\
	\'95	\'93\uc0\u8804  1 km\'94, \'93\u8804  3 km\'94, \'93\u8804  5 km\'94, \'93\u8804  10 km\'94.\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Los negocios 
\f2\b fuera del rango
\f1\b0  desaparecen de la lista y del mapa.\
	\'95	La lista se mantiene 
\f2\b ordenada por cercan\'eda
\f1\b0  dentro de ese rango.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que el 
\f2\b \cf2 radio de distancia se dibuje en el mapa
\f1\b0 \cf2  (ejemplo: un c\'edrculo alrededor del usuario mostrando el l\'edmite de 5 km)? Si\
\
\'a1Perfecto! 
\f7 \uc0\u55357 \u56960 
\f1  Vamos a dibujar un 
\f2\b \cf2 radio de distancia en el mapa
\f1\b0 \cf2  para que el usuario vea el \'e1rea de cobertura (ej. 5 km).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Importar Circle de react-leaflet
\f1\b0\fs28 \cf2 \
\
En la cabecera del archivo 
\f5 \cf2 MapWithSidebar.jsx
\f1 \cf2  agrega:\
\
import \{ MapContainer, TileLayer, Marker, Popup, Circle \} from "react-leaflet";\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Dibujar el c\'edrculo alrededor del usuario
\f1\b0\fs28 \cf2 \
\
En el JSX del mapa (dentro de 
\f5 \cf2 <MapContainer>...</MapContainer>
\f1 \cf2 ), justo despu\'e9s de renderizar el marcador de ubicaci\'f3n del usuario, a\'f1ade:\
\
\{userLocation && maxDistance && (\
  <Circle\
    center=\{userLocation\}\
    radius=\{maxDistance * 1000\} // convertir km a metros\
    pathOptions=\{\{ color: "blue", fillColor: "blue", fillOpacity: 0.1 \}\}\
  />\
)\}\
\

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Resultado
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Si el usuario comparte ubicaci\'f3n y selecciona un filtro de distancia (ej: 5 km):\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Se dibuja un c\'edrculo azul alrededor de su posici\'f3n con ese radio.\
	\'95	Los negocios fuera del c\'edrculo 
\f2\b \cf2 no aparecen en la lista ni en el mapa
\f1\b0 \cf2 .\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Si el usuario selecciona \'93Todas\'94 (sin filtro):\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	No se dibuja ning\'fan c\'edrculo.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que adem\'e1s los 
\f2\b \cf2 markers fuera del c\'edrculo aparezcan grises/desactivados
\f1\b0 \cf2  en lugar de desaparecer? Si\
\
\'a1Excelente! 
\f7 \uc0\u55357 \u56908 
\f1  Vamos a hacer que los negocios 
\f2\b \cf2 fuera del radio de distancia
\f1\b0 \cf2  sigan apareciendo en el mapa, pero con 
\f2\b \cf2 markers grises y desactivados
\f1\b0 \cf2 , mientras que en la 
\f2\b \cf2 lista lateral
\f1\b0 \cf2  solo veremos los que est\'e1n dentro del rango.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Separar la l\'f3gica de filtrado
\f1\b0\fs28 \cf2 \
\
Ahora vamos a tener 
\f2\b \cf2 dos listas
\f1\b0 \cf2 :\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 filteredBusinesses
\f1  \uc0\u8594  los que cumplen con categor\'eda, b\'fasqueda y distancia (se muestran en lista + mapa en color normal).\
	\'95	
\f5 allBusinessesWithStatus
\f1  \uc0\u8594  todos los negocios, pero marcando cu\'e1les est\'e1n 
\f2\b dentro
\f1\b0  y cu\'e1les 
\f2\b fuera
\f1\b0  del rango.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs30 \cf2 C\'f3digo de filtrado y marcado:\
\
let filteredBusinesses = businesses.filter((biz) => \{\
  const matchesCategory =\
    selectedCategory === "all" ||\
    biz.properties.category === selectedCategory;\
  const matchesSearch = biz.properties.name\
    .toLowerCase()\
    .includes(search.toLowerCase());\
\
  let matchesDistance = true;\
  if (userLocation && maxDistance) \{\
    const dist = getDistanceKm(\
      userLocation[0],\
      userLocation[1],\
      biz.geometry.coordinates[1],\
      biz.geometry.coordinates[0]\
    );\
    matchesDistance = dist <= maxDistance;\
  \}\
\
  return matchesCategory && matchesSearch && matchesDistance;\
\});\
\
// Lista extendida para saber qui\'e9n est\'e1 fuera del rango\
let allBusinessesWithStatus = businesses.map((biz) => \{\
  let withinDistance = true;\
  if (userLocation && maxDistance) \{\
    const dist = getDistanceKm(\
      userLocation[0],\
      userLocation[1],\
      biz.geometry.coordinates[1],\
      biz.geometry.coordinates[0]\
    );\
    withinDistance = dist <= maxDistance;\
  \}\
  return \{ ...biz, withinDistance \};\
\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Mostrar markers con colores distintos
\f1\b0\fs28 \cf2 \
\
Dentro de tu 
\f5 \cf2 <MapContainer>
\f1 \cf2 , al renderizar los negocios:\
\
\{allBusinessesWithStatus.map((biz) => (\
  <Marker\
    key=\{biz.properties.id\}\
    position=\{[\
      biz.geometry.coordinates[1],\
      biz.geometry.coordinates[0],\
    ]\}\
    pathOptions=\{\{\
      color: biz.withinDistance ? "green" : "gray",\
    \}\}\
    opacity=\{biz.withinDistance ? 1 : 0.5\}\
  >\
    <Popup>\
      <strong>\{biz.properties.name\}</strong>\
      <br />\
      \{biz.properties.address\}\
      \{!biz.withinDistance && <em> (fuera del rango)</em>\}\
    </Popup>\
  </Marker>\
))\}\
\

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Resultado
\f1\b0\fs28 \cf2 \
\

\f7 \uc0\u9989 
\f1  En el 
\f2\b \cf2 mapa
\f1\b0 \cf2 :\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Los negocios dentro del rango \uc0\u8594  aparecen con markers verdes (o normales).\
	\'95	Los negocios fuera del rango \uc0\u8594  aparecen con markers grises y m\'e1s transparentes.\
\

\f7 \uc0\u9989 
\f1  En la 
\f2\b lista lateral
\f1\b0 :\
	\'95	Solo se listan los negocios que est\'e1n dentro del rango.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que en la 
\f2\b \cf2 lista lateral
\f1\b0 \cf2  haya una pesta\'f1a opcional tipo \'93Ver todos\'94 para mostrar tambi\'e9n los que est\'e1n fuera del rango (con un \'edcono gris)? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1  entonces vamos a mejorar la 
\f2\b \cf2 lista lateral
\f1\b0 \cf2  agregando una 
\f2\b \cf2 pesta\'f1a/selector
\f1\b0 \cf2  que permita alternar entre:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f7 \uc0\u55357 \u56633 
\f1  
\f2\b \'93Dentro del rango\'94
\f1\b0  (negocios filtrados por distancia, la vista actual).\
	\'95	
\f7 \uc0\u55357 \u56633 
\f1  
\f2\b \'93Todos los negocios\'94
\f1\b0  (incluyendo los fuera de rango, marcados en gris).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Nuevo estado en React
\f1\b0\fs28 \cf2 \
\
Agregamos un estado para controlar la pesta\'f1a seleccionada:\
\
const [showAll, setShowAll] = useState(false);\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Selector de pesta\'f1as en la UI
\f1\b0\fs28 \cf2 \
\
Arriba de la lista lateral, a\'f1adimos botones para alternar:\
\
<div style=\{\{ display: "flex", gap: "10px", marginBottom: "10px" \}\}>\
  <button\
    onClick=\{() => setShowAll(false)\}\
    style=\{\{\
      background: showAll ? "#eee" : "#007bff",\
      color: showAll ? "#000" : "#fff",\
      padding: "6px 12px",\
      borderRadius: "4px",\
      border: "none",\
      cursor: "pointer"\
    \}\}\
  >\
    Dentro del rango\
  </button>\
  <button\
    onClick=\{() => setShowAll(true)\}\
    style=\{\{\
      background: showAll ? "#007bff" : "#eee",\
      color: showAll ? "#fff" : "#000",\
      padding: "6px 12px",\
      borderRadius: "4px",\
      border: "none",\
      cursor: "pointer"\
    \}\}\
  >\
    Ver todos\
  </button>\
</div>\
\

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Mostrar la lista seg\'fan la pesta\'f1a\
\
const listToShow = showAll ? allBusinessesWithStatus : filteredBusinesses;\
\

\f1\b0\fs28 \cf2 Y en el renderizado de la lista:\
\
<ul>\
  \{listToShow.map((biz) => (\
    <li key=\{biz.properties.id\}>\
      <strong>\{biz.properties.name\}</strong>\
      <br />\
      \{biz.properties.address\}\
      \{showAll && !biz.withinDistance && (\
        <span style=\{\{ color: "gray" \}\}> (fuera del rango)</span>\
      )\}\
    </li>\
  ))\}\
</ul>\
\

\f7\fs34 \cf2 4\uc0\u65039 \u8419 
\f4\b  Resultado
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Si el usuario est\'e1 en 
\f2\b \'93Dentro del rango\'94
\f1\b0  \uc0\u8594  solo ve negocios cercanos.\
	\'95	Si cambia a 
\f2\b \'93Ver todos\'94
\f1\b0  \uc0\u8594  aparecen todos los negocios, y los que est\'e1n fuera del rango se muestran en gris con la etiqueta 
\f2\b (fuera del rango)
\f1\b0 .\
	\'95	El 
\f2\b mapa ya tiene markers verdes/grises
\f1\b0  seg\'fan el alcance.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que esos negocios \'93fuera de rango\'94 en la lista tambi\'e9n tengan un 
\f2\b \cf2 bot\'f3n \'93C\'f3mo llegar\'94
\f1\b0 \cf2  que abra Google Maps aunque est\'e9n lejos? Si\
\
\'a1Excelente! 
\f7 \uc0\u55357 \u56960 
\f1  Vamos a darle a cada negocio un bot\'f3n 
\f2\b \cf2 \'93C\'f3mo llegar\'94
\f1\b0 \cf2  que abra Google Maps, tanto para los 
\f2\b \cf2 cercanos
\f1\b0 \cf2  como para los 
\f2\b \cf2 fuera del rango
\f1\b0 \cf2  (grises).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Generar URL de Google Maps
\f1\b0\fs28 \cf2 \
\
Con latitud y longitud de cada negocio:\
\
const getGoogleMapsUrl = (lat, lng) => \{\
  return `https://www.google.com/maps/dir/?api=1&destination=$\{lat\},$\{lng\}`;\
\};\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Agregar el bot\'f3n en la lista
\f1\b0\fs28 \cf2 \
\
Dentro del 
\f5 \cf2 map()
\f1 \cf2  que renderiza cada negocio:\
\
<ul>\
  \{listToShow.map((biz) => (\
    <li key=\{biz.properties.id\} style=\{\{ marginBottom: "12px" \}\}>\
      <strong>\{biz.properties.name\}</strong>\
      <br />\
      \{biz.properties.address\}\
      \{showAll && !biz.withinDistance && (\
        <span style=\{\{ color: "gray" \}\}> (fuera del rango)</span>\
      )\}\
      <br />\
      <a\
        href=\{getGoogleMapsUrl(\
          biz.geometry.coordinates[1],\
          biz.geometry.coordinates[0]\
        )\}\
        target="_blank"\
        rel="noopener noreferrer"\
        style=\{\{\
          display: "inline-block",\
          marginTop: "5px",\
          padding: "5px 10px",\
          background: "#28a745",\
          color: "white",\
          borderRadius: "4px",\
          textDecoration: "none",\
          fontSize: "0.9em"\
        \}\}\
      >\
        C\'f3mo llegar\
      </a>\
    </li>\
  ))\}\
</ul>\
\

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Resultado
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f7 \uc0\u55357 \u56525 
\f1  Si el negocio est\'e1 
\f2\b cerca
\f1\b0 , aparece con su nombre, direcci\'f3n y bot\'f3n 
\f2\b verde
\f1\b0  \'93C\'f3mo llegar\'94.\
	\'95	
\f7 \uc0\u55357 \u56525 
\f1  Si est\'e1 
\f2\b fuera de rango
\f1\b0 , se muestra en gris con la etiqueta 
\f5 (fuera del rango)
\f1  pero 
\f2\b igual tiene su bot\'f3n
\f1\b0  para abrir Google Maps.\
	\'95	Al hacer clic \uc0\u8594  abre Google Maps directamente con la ruta desde la ubicaci\'f3n actual del usuario.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que adem\'e1s ese bot\'f3n \'93C\'f3mo llegar\'94 tambi\'e9n est\'e9 disponible 
\f2\b \cf2 dentro del Popup de cada marker en el mapa
\f1\b0 \cf2 ? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 , vamos a agregar el bot\'f3n 
\f2\b \cf2 \'93C\'f3mo llegar\'94
\f1\b0 \cf2  tambi\'e9n dentro de los 
\f2\b \cf2 Popups de los markers en el mapa
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Reutilizamos la funci\'f3n de URL de Google Maps\
\
const getGoogleMapsUrl = (lat, lng) => \{\
  return `https://www.google.com/maps/dir/?api=1&destination=$\{lat\},$\{lng\}`;\
\};\
\

\f7\b0 2\uc0\u65039 \u8419 
\f4\b  Bot\'f3n en el Popup de cada marker
\f1\b0\fs28 \cf2 \
\
Dentro del 
\f5 \cf2 Marker
\f1 \cf2  donde ya tienes 
\f5 \cf2 <Popup>
\f1 \cf2 , quedar\'eda as\'ed:\
\
<Marker\
  key=\{biz.properties.id\}\
  position=\{[\
    biz.geometry.coordinates[1],\
    biz.geometry.coordinates[0],\
  ]\}\
  icon=\{biz.withinDistance ? defaultIcon : grayIcon\} // para diferenciar cercanos y lejanos\
>\
  <Popup>\
    <div style=\{\{ textAlign: "center" \}\}>\
      <strong>\{biz.properties.name\}</strong>\
      <br />\
      \{biz.properties.address\}\
      \{showAll && !biz.withinDistance && (\
        <span style=\{\{ color: "gray" \}\}> (fuera del rango)</span>\
      )\}\
      <br />\
      <a\
        href=\{getGoogleMapsUrl(\
          biz.geometry.coordinates[1],\
          biz.geometry.coordinates[0]\
        )\}\
        target="_blank"\
        rel="noopener noreferrer"\
        style=\{\{\
          display: "inline-block",\
          marginTop: "8px",\
          padding: "5px 10px",\
          background: "#28a745",\
          color: "white",\
          borderRadius: "4px",\
          textDecoration: "none",\
          fontSize: "0.85em"\
        \}\}\
      >\
        C\'f3mo llegar\
      </a>\
    </div>\
  </Popup>\
</Marker>\
\

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Resultado esperado
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f7 \uc0\u55357 \u56525 
\f1  Cada negocio en el mapa ahora muestra su 
\f2\b nombre + direcci\'f3n
\f1\b0  dentro del Popup.\
	\'95	
\f7 \uc0\u55357 \u56998 
\f1  Si est\'e1 
\f2\b fuera del rango
\f1\b0 , aparece en 
\f2\b gris
\f1\b0  pero igual con el bot\'f3n activo.\
	\'95	
\f7 \uc0\u55357 \u57314 
\f1  Al dar clic en 
\f2\b \'93C\'f3mo llegar\'94
\f1\b0 , se abre Google Maps con la ruta desde la ubicaci\'f3n del usuario hasta el negocio.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que el 
\f2\b \cf2 Google Maps se abra dentro de la app (WebView)
\f1\b0 \cf2  en lugar de redirigir al navegador, cuando lo usemos en iOS/Android? Cual es la mejor opci\'f3n\
\
Muy buena pregunta 
\f7 \uc0\u55357 \u56396 
\f1  \'97 aqu\'ed entramos en 
\f2\b \cf2 decisiones de experiencia de usuario (UX/UI)
\f1\b0 \cf2 .\
Para un 
\f2\b \cf2 MVP zonal tipo p\'e1ginas amarillas
\f1\b0 \cf2 , las mejores pr\'e1cticas son estas:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Opci\'f3n 1: Abrir en Google Maps App / Navegador (m\'e1s simple)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Ventajas:
\f1\b0 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Cero desarrollo extra, usas 
\f5 \cf2 target="_blank"
\f1 \cf2  y listo.\
	\'95	El usuario puede iniciar navegaci\'f3n inmediata con 
\f2\b \cf2 GPS en segundo plano
\f1\b0 \cf2 .\
	\'95	Flujo natural: la mayor\'eda ya conf\'eda en Google Maps/Waze.\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Desventaja:
\f1\b0 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	El usuario \'93sale\'94 de tu app (aunque siempre puede volver).\
\

\f7 \uc0\u55357 \u56393 
\f1  Esta es la opci\'f3n m\'e1s com\'fan en directorios, porque aprovechas que 
\f2\b \cf2 Google Maps ya est\'e1 instalado en casi todos los tel\'e9fonos
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Opci\'f3n 2: Abrir en WebView dentro de la app (m\'e1s inmersivo)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Ventajas:
\f1\b0 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	El usuario no abandona tu app.\
	\'95	Puedes mostrar la ruta directamente en tu interfaz.\
	\'95	Se siente m\'e1s \'93premium\'94.\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Desventajas:
\f1\b0 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Necesitas integrar un 
\f2\b \cf2 Google Maps Embed API
\f1\b0 \cf2  (requiere 
\f2\b \cf2 API Key
\f1\b0 \cf2 ).\
	\'95	No permite navegaci\'f3n giro a giro con GPS en tiempo real, solo mostrar la ruta.\
	\'95	Aumenta complejidad (manejo de permisos, vistas, rendimiento).\
\

\f7 \uc0\u55357 \u56393 
\f1  Esta opci\'f3n la suelen usar apps con 
\f2\b \cf2 alto presupuesto o que quieren controlar todo el viaje del usuario
\f1\b0 \cf2 , como Uber o Rappi.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Opci\'f3n 3: Doble bot\'f3n (Mejor UX para MVP escalable)
\f1\b0\fs28 \cf2 \
\
En cada negocio \uc0\u8594 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Bot\'f3n 
\f2\b \'93C\'f3mo llegar\'94
\f1\b0  \uc0\u8594  abre directamente 
\f2\b Google Maps App
\f1\b0 .\
	\'95	Bot\'f3n secundario 
\f2\b \'93Ver en el mapa dentro de la app\'94
\f1\b0  \uc0\u8594  abre un WebView con el mapa embebido.\
\

\f7 \uc0\u9989 
\f1  Esto combina 
\f2\b simplicidad + inmersi\'f3n
\f1\b0 , y te da margen de crecer en el futuro.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56524 
\f1  
\f2\b \cf2 Recomendaci\'f3n para tu MVP en Caucel:
\f1\b0 \cf2 \
Empieza con 
\f2\b \cf2 Opci\'f3n 1 (abrir Google Maps externo)
\f1\b0 \cf2  \uc0\u8594  r\'e1pido, gratis y confiable.\
Cuando valides usuarios y tengas tracci\'f3n, puedes iterar hacia la 
\f2\b \cf2 Opci\'f3n 3
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te arme el c\'f3digo para dejar lista la 
\f2\b \cf2 Opci\'f3n 1 ahora
\f1\b0 \cf2  y estructurar la 
\f2\b \cf2 Opci\'f3n 3
\f1\b0 \cf2  como \'93feature futura\'94 en el roadmap? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 , armemos primero la 
\f2\b \cf2 Opci\'f3n 1 (abrir Google Maps externo)
\f1\b0 \cf2  y dejamos lista la estructura para que en el futuro escale a la 
\f2\b \cf2 Opci\'f3n 3
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  1. Bot\'f3n en la lista de negocios (Sidebar.jsx o donde renderizas cada negocio)
\f1\b0\fs28 \cf2 \
\
Agrega dentro del loop donde pintas cada negocio:\
\
<button\
  onClick=\{() =>\
    window.open(\
      `https://www.google.com/maps/dir/?api=1&destination=$\{business.lat\},$\{business.lng\}`,\
      "_blank"\
    )\
  \}\
  className="mt-2 bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 transition"\
>\
  C\'f3mo llegar\
</button>\
\

\f7 \uc0\u55357 \u56615 
\f1  Este bot\'f3n abre 
\f2\b \cf2 Google Maps
\f1\b0 \cf2  directamente en navegador o app (si el usuario la tiene instalada).\
El 
\f5 \cf2 destination
\f1 \cf2  recibe las coordenadas del negocio (
\f5 \cf2 business.lat
\f1 \cf2 , 
\f5 \cf2 business.lng
\f1 \cf2 ).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  2. Bot\'f3n en el popup del marcador del mapa (MapWithSidebar.jsx)
\f1\b0\fs28 \cf2 \
\
Dentro del 
\f5 \cf2 <Popup>
\f1 \cf2  de cada 
\f5 \cf2 <Marker>
\f1 \cf2  agrega:\
\
<button\
  onClick=\{() =>\
    window.open(\
      `https://www.google.com/maps/dir/?api=1&destination=$\{business.lat\},$\{business.lng\}`,\
      "_blank"\
    )\
  \}\
  className="mt-2 bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600 transition"\
>\
  Ir en Google Maps\
</button>\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  3. Preparar feature futura (Opci\'f3n 3: abrir dentro de la app en WebView)
\f1\b0\fs28 \cf2 \
\
En el futuro, en lugar de 
\f5 \cf2 window.open
\f1 \cf2 , puedes abrir un 
\f2\b \cf2 componente <DirectionsMap>
\f1\b0 \cf2  que reciba 
\f5 \cf2 lat, lng
\f1 \cf2  como props y renderice un 
\f2\b \cf2 Google Maps Embed
\f1\b0 \cf2  dentro de tu app. Ejemplo placeholder:\
\
\{showDirections && (\
  <DirectionsMap destination=\{selectedBusiness\} onClose=\{() => setShowDirections(false)\} />\
)\}\
\
Ese componente tendr\'eda un 
\f2\b \cf2 iframe de Google Maps Embed API
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u9989 
\f1  Con esto ya tienes la versi\'f3n lista para 
\f2\b \cf2 MVP funcional
\f1\b0 \cf2  y el camino abierto para 
\f2\b \cf2 escalar a experiencia inmersiva
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te arme tambi\'e9n el componente 
\f5 \cf2 DirectionsMap
\f1 \cf2  con iframe (aunque no se use ahora) para dejarlo preparado en el c\'f3digo base? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 , armemos el 
\f2\b \cf2 componente DirectionsMap
\f1\b0 \cf2  como un 
\f2\b \cf2 iframe embebido de Google Maps
\f1\b0 \cf2  para que quede listo, aunque el MVP use 
\f5 \cf2 window.open
\f1 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  1. Crear componente DirectionsMap.jsx
\f1\b0\fs28 \cf2 \
\
En tu carpeta 
\f5 \cf2 components/
\f1 \cf2  crea:\
\
import React from "react";\
\
export default function DirectionsMap(\{ destination, onClose \}) \{\
  if (!destination) return null;\
\
  const \{ lat, lng, name \} = destination;\
\
  return (\
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">\
      <div className="bg-white rounded-lg shadow-lg w-[90%] h-[80%] relative overflow-hidden">\
        \{/* Bot\'f3n cerrar */\}\
        <button\
          onClick=\{onClose\}\
          className="absolute top-3 right-3 bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 z-10"\
        >\
          
\f15 \uc0\u10005 
\f1 \
        </button>\
\
        \{/* Encabezado */\}\
        <div className="p-4 border-b font-bold text-lg">\
          C\'f3mo llegar a \{name\}\
        </div>\
\
        \{/* Mapa embebido */\}\
        <iframe\
          title="Google Maps Directions"\
          width="100%"\
          height="100%"\
          style=\{\{ border: 0 \}\}\
          loading="lazy"\
          allowFullScreen\
          src=\{`https://www.google.com/maps/embed/v1/directions?key=$\{\
            import.meta.env.VITE_GOOGLE_MAPS_KEY\
          \}&origin=current+location&destination=$\{lat\},$\{lng\}`\}\
        />\
      </div>\
    </div>\
  );\
\}\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  2. Uso en MapWithSidebar.jsx
\f1\b0\fs28 \cf2 \
\
Define un estado:\
\
const [showDirections, setShowDirections] = useState(false);\
const [selectedBusiness, setSelectedBusiness] = useState(null);\
\
En el bot\'f3n 
\f2\b \cf2 \'93Ir en Google Maps\'94
\f1\b0 \cf2 , cambia 
\f5 \cf2 window.open(...)
\f1 \cf2  por:\
\
onClick=\{() => \{\
  setSelectedBusiness(business);\
  setShowDirections(true);\
\}\}\
\
Y al final del JSX del mapa a\'f1ade:\
\
\{showDirections && (\
  <DirectionsMap\
    destination=\{selectedBusiness\}\
    onClose=\{() => setShowDirections(false)\}\
  />\
)\}\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  3. API Key de Google Maps Embed API
\f1\b0\fs28 \cf2 \
\
Necesitas activar en Google Cloud la 
\f2\b \cf2 Maps Embed API
\f1\b0 \cf2  y guardar tu API Key en 
\f5 \cf2 .env
\f1 \cf2 :\
\
VITE_GOOGLE_MAPS_KEY=TU_API_KEY_AQUI\
\

\f7 \uc0\u9989 
\f1  Con esto tienes:\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 MVP inmediato
\f1\b0 \cf2  (abre Google Maps externo).\

\f6 \cf2 	2.	
\f2\b \cf2 Modo embebido listo
\f1\b0 \cf2  (se abre un modal dentro de la app con el mapa y rutas).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que preparemos tambi\'e9n la 
\f2\b \cf2 versi\'f3n mobile (React Native con Expo)
\f1\b0 \cf2  del 
\f5 \cf2 DirectionsMap
\f1 \cf2  usando 
\f2\b \cf2 WebView
\f1\b0 \cf2 , para que se vea igual en iOS/Android? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1 , avancemos con la 
\f2\b \cf2 versi\'f3n mobile (iOS + Android con Expo / React Native)
\f1\b0 \cf2  de nuestro componente 
\f5 \cf2 DirectionsMap
\f1 \cf2 .\
\
En mobile no podemos usar directamente el 
\f5 \cf2 iframe
\f1 \cf2 , as\'ed que usaremos 
\f2\b \cf2 react-native-webview
\f1\b0 \cf2  para embeber la URL de Google Maps Directions.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  1. Instalar dependencia
\f1\b0\fs28 \cf2 \
\
En tu proyecto Expo, instala:\
\
expo install react-native-webview\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  2. Crear componente DirectionsMap.js
\f1\b0\fs28 \cf2 \
\
En tu carpeta 
\f5 \cf2 components/
\f1 \cf2 :\
\
import React from "react";\
import \{ Modal, View, Text, TouchableOpacity, StyleSheet, Dimensions \} from "react-native";\
import \{ WebView \} from "react-native-webview";\
\
export default function DirectionsMap(\{ visible, destination, onClose \}) \{\
  if (!destination) return null;\
\
  const \{ lat, lng, name \} = destination;\
  const mapsUrl = `https://www.google.com/maps/dir/?api=1&origin=current+location&destination=$\{lat\},$\{lng\}`;\
\
  return (\
    <Modal visible=\{visible\} animationType="slide" transparent=\{true\}>\
      <View style=\{styles.container\}>\
        \{/* Header con bot\'f3n cerrar */\}\
        <View style=\{styles.header\}>\
          <Text style=\{styles.title\}>C\'f3mo llegar a \{name\}</Text>\
          <TouchableOpacity onPress=\{onClose\} style=\{styles.closeButton\}>\
            <Text style=\{styles.closeText\}>
\f15 \uc0\u10005 
\f1 </Text>\
          </TouchableOpacity>\
        </View>\
\
        \{/* WebView con el mapa */\}\
        <WebView source=\{\{ uri: mapsUrl \}\} style=\{styles.webview\} />\
      </View>\
    </Modal>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    backgroundColor: "#fff",\
    marginTop: 50,\
    borderRadius: 12,\
    overflow: "hidden"\
  \},\
  header: \{\
    flexDirection: "row",\
    justifyContent: "space-between",\
    alignItems: "center",\
    padding: 12,\
    backgroundColor: "#f5f5f5",\
    borderBottomWidth: 1,\
    borderColor: "#ddd",\
  \},\
  title: \{\
    fontSize: 16,\
    fontWeight: "bold",\
    flex: 1,\
  \},\
  closeButton: \{\
    paddingHorizontal: 10,\
  \},\
  closeText: \{\
    fontSize: 18,\
    color: "red",\
  \},\
  webview: \{\
    flex: 1,\
    width: Dimensions.get("window").width,\
  \},\
\});\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  3. Uso en tu lista o mapa (BusinessList.js o MapScreen.js)
\f1\b0\fs28 \cf2 \
\
Ejemplo en un bot\'f3n:\
\
const [showDirections, setShowDirections] = useState(false);\
const [selectedBusiness, setSelectedBusiness] = useState(null);\
\
// Al dar clic en "Ir en Google Maps"\
<TouchableOpacity\
  onPress=\{() => \{\
    setSelectedBusiness(business);\
    setShowDirections(true);\
  \}\}\
>\
  <Text style=\{\{ color: "blue" \}\}>Ir en Google Maps</Text>\
</TouchableOpacity>\
\
// Renderizar modal\
<DirectionsMap\
  visible=\{showDirections\}\
  destination=\{selectedBusiness\}\
  onClose=\{() => setShowDirections(false)\}\
/>\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  4. Beneficios de esta implementaci\'f3n
\f1\b0\fs28 \cf2 \
\

\f7 \uc0\u9989 
\f1  Se ve igual en 
\f2\b \cf2 iOS y Android
\f1\b0 \cf2 .\

\f7 \uc0\u9989 
\f1  Usa el mismo flujo de datos que la versi\'f3n web (
\f5 \cf2 lat, lng, name
\f1 \cf2 ).\

\f7 \uc0\u9989 
\f1  Aprovecha Google Maps con direcciones reales (usando 
\f5 \cf2 api=1
\f1 \cf2 ).\

\f7 \uc0\u9989 
\f1  Mantiene consistencia con el MVP de escritorio.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que lo preparemos para que 
\f2\b \cf2 detecte autom\'e1ticamente la ubicaci\'f3n actual del usuario
\f1\b0 \cf2  (en vez de 
\f5 \cf2 current+location
\f1 \cf2 ), usando 
\f5 \cf2 expo-location
\f1 \cf2 ? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Vamos a mejorar el flujo para que 
\f2\b \cf2 detecte la ubicaci\'f3n real del usuario
\f1\b0 \cf2  usando {\field{\*\fldinst{HYPERLINK "https://docs.expo.dev/versions/latest/sdk/location/"}}{\fldrslt 
\f5 \cf2 expo-location}}.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  1. Instalar expo-location
\f1\b0\fs28 \cf2 \
\
En tu proyecto:\
\
expo install expo-location\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  2. Actualizar DirectionsMap.js
\f1\b0\fs28 \cf2 \
\
Aqu\'ed ya no usamos 
\f5 \cf2 "current+location"
\f1 \cf2 , sino las coordenadas actuales obtenidas con 
\f5 \cf2 expo-location
\f1 \cf2 .\
\
import React, \{ useEffect, useState \} from "react";\
import \{ Modal, View, Text, TouchableOpacity, StyleSheet, Dimensions, ActivityIndicator \} from "react-native";\
import \{ WebView \} from "react-native-webview";\
import * as Location from "expo-location";\
\
export default function DirectionsMap(\{ visible, destination, onClose \}) \{\
  const [origin, setOrigin] = useState(null);\
  const [loading, setLoading] = useState(true);\
\
  useEffect(() => \{\
    if (visible) \{\
      (async () => \{\
        setLoading(true);\
        let \{ status \} = await Location.requestForegroundPermissionsAsync();\
        if (status !== "granted") \{\
          console.log("Permiso denegado para acceder a la ubicaci\'f3n");\
          setLoading(false);\
          return;\
        \}\
\
        let location = await Location.getCurrentPositionAsync(\{\});\
        setOrigin(\{\
          lat: location.coords.latitude,\
          lng: location.coords.longitude,\
        \});\
        setLoading(false);\
      \})();\
    \}\
  \}, [visible]);\
\
  if (!destination) return null;\
\
  const \{ lat, lng, name \} = destination;\
\
  let mapsUrl = null;\
  if (origin) \{\
    mapsUrl = `https://www.google.com/maps/dir/?api=1&origin=$\{origin.lat\},$\{origin.lng\}&destination=$\{lat\},$\{lng\}`;\
  \}\
\
  return (\
    <Modal visible=\{visible\} animationType="slide" transparent=\{true\}>\
      <View style=\{styles.container\}>\
        \{/* Header con bot\'f3n cerrar */\}\
        <View style=\{styles.header\}>\
          <Text style=\{styles.title\}>C\'f3mo llegar a \{name\}</Text>\
          <TouchableOpacity onPress=\{onClose\} style=\{styles.closeButton\}>\
            <Text style=\{styles.closeText\}>
\f15 \uc0\u10005 
\f1 </Text>\
          </TouchableOpacity>\
        </View>\
\
        \{/* Loader mientras se obtiene la ubicaci\'f3n */\}\
        \{loading && (\
          <View style=\{styles.loader\}>\
            <ActivityIndicator size="large" color="#000" />\
            <Text>Obteniendo tu ubicaci\'f3n...</Text>\
          </View>\
        )\}\
\
        \{/* WebView con Google Maps */\}\
        \{!loading && mapsUrl && (\
          <WebView source=\{\{ uri: mapsUrl \}\} style=\{styles.webview\} />\
        )\}\
      </View>\
    </Modal>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    backgroundColor: "#fff",\
    marginTop: 50,\
    borderRadius: 12,\
    overflow: "hidden",\
  \},\
  header: \{\
    flexDirection: "row",\
    justifyContent: "space-between",\
    alignItems: "center",\
    padding: 12,\
    backgroundColor: "#f5f5f5",\
    borderBottomWidth: 1,\
    borderColor: "#ddd",\
  \},\
  title: \{\
    fontSize: 16,\
    fontWeight: "bold",\
    flex: 1,\
  \},\
  closeButton: \{\
    paddingHorizontal: 10,\
  \},\
  closeText: \{\
    fontSize: 18,\
    color: "red",\
  \},\
  webview: \{\
    flex: 1,\
    width: Dimensions.get("window").width,\
  \},\
  loader: \{\
    flex: 1,\
    justifyContent: "center",\
    alignItems: "center",\
  \},\
\});\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  3. Flujo del usuario
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	El usuario da clic en 
\f2\b \cf2 \'93Ir en Google Maps\'94
\f1\b0 \cf2  desde la lista o mapa.\

\f6 \cf2 	2.	El modal abre y solicita permiso de ubicaci\'f3n.\
	3.	Si el usuario lo concede, se obtiene lat/lng actual.\
	4.	Se abre Google Maps Directions 
\f2\b \cf2 con origen = ubicaci\'f3n real del usuario
\f1\b0 \cf2  y 
\f2\b \cf2 destino = negocio seleccionado
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que lo arme tambi\'e9n con un 
\f2\b \cf2 fallback
\f1\b0 \cf2  que abra directamente la app nativa de Google Maps / Apple Maps si el usuario la tiene instalada (con 
\f5 \cf2 Linking.openURL
\f1 \cf2 )? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56613 
\f1 \
Vamos a 
\f2\b \cf2 mejorar la UX
\f1\b0 \cf2 : si el usuario tiene instalada la app de 
\f2\b \cf2 Google Maps
\f1\b0 \cf2  (Android/iOS) o 
\f2\b \cf2 Apple Maps
\f1\b0 \cf2  (iOS), abrimos esa app nativa en vez de forzar el WebView. Si no, usamos el modal con el WebView como fallback.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  1. Usaremos Linking de React Native\
\
import \{ Linking, Platform \} from "react-native";\
\

\f7\b0 \uc0\u55357 \u56633 
\f4\b  2. Actualizar DirectionsMap.js\
\
import React, \{ useEffect, useState \} from "react";\
import \{ Modal, View, Text, TouchableOpacity, StyleSheet, Dimensions, ActivityIndicator, Linking, Platform \} from "react-native";\
import \{ WebView \} from "react-native-webview";\
import * as Location from "expo-location";\
\
export default function DirectionsMap(\{ visible, destination, onClose \}) \{\
  const [origin, setOrigin] = useState(null);\
  const [loading, setLoading] = useState(true);\
  const [useWebView, setUseWebView] = useState(false);\
\
  useEffect(() => \{\
    if (visible) \{\
      (async () => \{\
        setLoading(true);\
        let \{ status \} = await Location.requestForegroundPermissionsAsync();\
        if (status !== "granted") \{\
          console.log("Permiso denegado para acceder a la ubicaci\'f3n");\
          setLoading(false);\
          return;\
        \}\
\
        let location = await Location.getCurrentPositionAsync(\{\});\
        setOrigin(\{\
          lat: location.coords.latitude,\
          lng: location.coords.longitude,\
        \});\
        setLoading(false);\
      \})();\
    \}\
  \}, [visible]);\
\
  if (!destination) return null;\
\
  const \{ lat, lng, name \} = destination;\
\
  const openNativeMaps = () => \{\
    if (!origin) return;\
\
    const gmapsUrl = `https://www.google.com/maps/dir/?api=1&origin=$\{origin.lat\},$\{origin.lng\}&destination=$\{lat\},$\{lng\}`;\
    const appleUrl = `http://maps.apple.com/?saddr=$\{origin.lat\},$\{origin.lng\}&daddr=$\{lat\},$\{lng\}`;\
\
    const url = Platform.OS === "ios" ? appleUrl : gmapsUrl;\
\
    Linking.canOpenURL(url)\
      .then((supported) => \{\
        if (supported) \{\
          Linking.openURL(url);\
          onClose(); // cerramos el modal porque ya abrimos la app nativa\
        \} else \{\
          // fallback: usar WebView\
          setUseWebView(true);\
        \}\
      \})\
      .catch(() => setUseWebView(true));\
  \};\
\
  useEffect(() => \{\
    if (origin && visible) \{\
      openNativeMaps();\
    \}\
  \}, [origin, visible]);\
\
  let mapsUrl = null;\
  if (origin) \{\
    mapsUrl = `https://www.google.com/maps/dir/?api=1&origin=$\{origin.lat\},$\{origin.lng\}&destination=$\{lat\},$\{lng\}`;\
  \}\
\
  return (\
    <Modal visible=\{visible\} animationType="slide" transparent=\{true\}>\
      <View style=\{styles.container\}>\
        \{/* Header con bot\'f3n cerrar */\}\
        <View style=\{styles.header\}>\
          <Text style=\{styles.title\}>C\'f3mo llegar a \{name\}</Text>\
          <TouchableOpacity onPress=\{onClose\} style=\{styles.closeButton\}>\
            <Text style=\{styles.closeText\}>
\f15\b0 \uc0\u10005 
\f4\b </Text>\
          </TouchableOpacity>\
        </View>\
\
        \{/* Loader mientras se obtiene la ubicaci\'f3n */\}\
        \{loading && (\
          <View style=\{styles.loader\}>\
            <ActivityIndicator size="large" color="#000" />\
            <Text>Obteniendo tu ubicaci\'f3n...</Text>\
          </View>\
        )\}\
\
        \{/* WebView solo si no hay app de mapas */\}\
        \{!loading && useWebView && mapsUrl && (\
          <WebView source=\{\{ uri: mapsUrl \}\} style=\{styles.webview\} />\
        )\}\
      </View>\
    </Modal>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    backgroundColor: "#fff",\
    marginTop: 50,\
    borderRadius: 12,\
    overflow: "hidden",\
  \},\
  header: \{\
    flexDirection: "row",\
    justifyContent: "space-between",\
    alignItems: "center",\
    padding: 12,\
    backgroundColor: "#f5f5f5",\
    borderBottomWidth: 1,\
    borderColor: "#ddd",\
  \},\
  title: \{\
    fontSize: 16,\
    fontWeight: "bold",\
    flex: 1,\
  \},\
  closeButton: \{\
    paddingHorizontal: 10,\
  \},\
  closeText: \{\
    fontSize: 18,\
    color: "red",\
  \},\
  webview: \{\
    flex: 1,\
    width: Dimensions.get("window").width,\
  \},\
  loader: \{\
    flex: 1,\
    justifyContent: "center",\
    alignItems: "center",\
  \},\
\});\
\

\f7\b0 \uc0\u55357 \u56633 
\f4\b  Flujo ahora
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	El usuario abre \'93Ir en Google Maps\'94.\
	2.	Se pide permiso de ubicaci\'f3n y se obtiene lat/lng.\
	3.	Si el dispositivo soporta 
\f2\b \cf2 Google Maps (Android) o Apple Maps (iOS)
\f1\b0 \cf2  \uc0\u8594  se abre directamente la app nativa.\

\f6 \cf2 	4.	Si no hay app \uc0\u8594  se muestra el modal con el 
\f2\b \cf2 WebView de Google Maps
\f1\b0 \cf2  como fallback.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que lo prepare para que 
\f2\b \cf2 el usuario elija manualmente
\f1\b0 \cf2  entre \'93Abrir en app nativa\'94 o \'93Ver en la app (WebView)\'94? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Vamos a dar la opci\'f3n al usuario con un 
\f2\b \cf2 mini men\'fa
\f1\b0 \cf2  dentro del modal:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Bot\'f3n 
\f2\b Abrir en Google/Apple Maps
\f1\b0  \uc0\u8594  abre la app nativa.\
	\'95	Bot\'f3n 
\f2\b Ver aqu\'ed en la app
\f1\b0  \uc0\u8594  carga el WebView con Google Maps.\
	\'95	Bot\'f3n 
\f2\b Cerrar
\f1\b0  \uc0\u8594  cierra el modal.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  DirectionsMap.js (versi\'f3n con opciones)\
\
import React, \{ useEffect, useState \} from "react";\
import \{ Modal, View, Text, TouchableOpacity, StyleSheet, Dimensions, ActivityIndicator, Linking, Platform \} from "react-native";\
import \{ WebView \} from "react-native-webview";\
import * as Location from "expo-location";\
\
export default function DirectionsMap(\{ visible, destination, onClose \}) \{\
  const [origin, setOrigin] = useState(null);\
  const [loading, setLoading] = useState(true);\
  const [showWebView, setShowWebView] = useState(false);\
\
  useEffect(() => \{\
    if (visible) \{\
      (async () => \{\
        setLoading(true);\
        let \{ status \} = await Location.requestForegroundPermissionsAsync();\
        if (status !== "granted") \{\
          console.log("Permiso denegado para acceder a la ubicaci\'f3n");\
          setLoading(false);\
          return;\
        \}\
\
        let location = await Location.getCurrentPositionAsync(\{\});\
        setOrigin(\{\
          lat: location.coords.latitude,\
          lng: location.coords.longitude,\
        \});\
        setLoading(false);\
      \})();\
    \} else \{\
      setShowWebView(false); // reset cuando se cierra el modal\
    \}\
  \}, [visible]);\
\
  if (!destination) return null;\
\
  const \{ lat, lng, name \} = destination;\
\
  const openNativeMaps = () => \{\
    if (!origin) return;\
\
    const gmapsUrl = `https://www.google.com/maps/dir/?api=1&origin=$\{origin.lat\},$\{origin.lng\}&destination=$\{lat\},$\{lng\}`;\
    const appleUrl = `http://maps.apple.com/?saddr=$\{origin.lat\},$\{origin.lng\}&daddr=$\{lat\},$\{lng\}`;\
\
    const url = Platform.OS === "ios" ? appleUrl : gmapsUrl;\
\
    Linking.canOpenURL(url).then((supported) => \{\
      if (supported) \{\
        Linking.openURL(url);\
        onClose();\
      \} else \{\
        setShowWebView(true);\
      \}\
    \});\
  \};\
\
  let mapsUrl = null;\
  if (origin) \{\
    mapsUrl = `https://www.google.com/maps/dir/?api=1&origin=$\{origin.lat\},$\{origin.lng\}&destination=$\{lat\},$\{lng\}`;\
  \}\
\
  return (\
    <Modal visible=\{visible\} animationType="slide" transparent=\{true\}>\
      <View style=\{styles.container\}>\
        \{/* Header */\}\
        <View style=\{styles.header\}>\
          <Text style=\{styles.title\}>C\'f3mo llegar a \{name\}</Text>\
          <TouchableOpacity onPress=\{onClose\} style=\{styles.closeButton\}>\
            <Text style=\{styles.closeText\}>
\f15\b0 \uc0\u10005 
\f4\b </Text>\
          </TouchableOpacity>\
        </View>\
\
        \{loading && (\
          <View style=\{styles.loader\}>\
            <ActivityIndicator size="large" color="#000" />\
            <Text>Obteniendo tu ubicaci\'f3n...</Text>\
          </View>\
        )\}\
\
        \{!loading && origin && !showWebView && (\
          <View style=\{styles.menu\}>\
            <TouchableOpacity style=\{styles.optionButton\} onPress=\{openNativeMaps\}>\
              <Text style=\{styles.optionText\}>\
                Abrir en \{Platform.OS === "ios" ? "Apple Maps" : "Google Maps"\}\
              </Text>\
            </TouchableOpacity>\
\
            <TouchableOpacity style=\{styles.optionButton\} onPress=\{() => setShowWebView(true)\}>\
              <Text style=\{styles.optionText\}>Ver aqu\'ed en la app</Text>\
            </TouchableOpacity>\
\
            <TouchableOpacity style=\{styles.cancelButton\} onPress=\{onClose\}>\
              <Text style=\{styles.cancelText\}>Cancelar</Text>\
            </TouchableOpacity>\
          </View>\
        )\}\
\
        \{showWebView && mapsUrl && (\
          <WebView source=\{\{ uri: mapsUrl \}\} style=\{styles.webview\} />\
        )\}\
      </View>\
    </Modal>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    backgroundColor: "#fff",\
    marginTop: 50,\
    borderRadius: 12,\
    overflow: "hidden",\
  \},\
  header: \{\
    flexDirection: "row",\
    justifyContent: "space-between",\
    alignItems: "center",\
    padding: 12,\
    backgroundColor: "#f5f5f5",\
    borderBottomWidth: 1,\
    borderColor: "#ddd",\
  \},\
  title: \{\
    fontSize: 16,\
    fontWeight: "bold",\
    flex: 1,\
  \},\
  closeButton: \{\
    paddingHorizontal: 10,\
  \},\
  closeText: \{\
    fontSize: 18,\
    color: "red",\
  \},\
  loader: \{\
    flex: 1,\
    justifyContent: "center",\
    alignItems: "center",\
  \},\
  menu: \{\
    flex: 1,\
    justifyContent: "center",\
    alignItems: "center",\
    gap: 15,\
  \},\
  optionButton: \{\
    backgroundColor: "#007bff",\
    padding: 15,\
    borderRadius: 8,\
    width: "80%",\
    alignItems: "center",\
  \},\
  optionText: \{\
    color: "#fff",\
    fontWeight: "bold",\
  \},\
  cancelButton: \{\
    marginTop: 20,\
  \},\
  cancelText: \{\
    color: "red",\
    fontWeight: "bold",\
  \},\
  webview: \{\
    flex: 1,\
    width: Dimensions.get("window").width,\
  \},\
\});\
\

\f7\b0\fs28 \cf2 \uc0\u9989 
\f1  Ahora el flujo es mucho m\'e1s 
\f2\b \cf2 UX friendly
\f1\b0 \cf2 :\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Modal se abre \uc0\u8594  se obtiene ubicaci\'f3n.\
	2.	El usuario elige: 
\f2\b \cf2 abrir en app nativa
\f1\b0 \cf2  o 
\f2\b \cf2 ver dentro de la app
\f1\b0 \cf2 .\

\f6 \cf2 	3.	Si no tiene instalada la app \uc0\u8594  igual funciona porque cae en WebView.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1 \cf2 \'bfQuieres que te arme tambi\'e9n la 
\f2\b \cf2 UI del bot\'f3n en la pantalla de Negocio
\f1\b0 \cf2  para abrir este modal? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56613 
\f1  vamos a armar la 
\f2\b \cf2 UI del bot\'f3n en la pantalla de Negocio
\f1\b0 \cf2  para que abra el modal con las rutas.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Ejemplo en BusinessScreen.js\
\
import React, \{ useState \} from "react";\
import \{ View, Text, TouchableOpacity, StyleSheet \} from "react-native";\
import DirectionsMap from "./DirectionsMap";\
\
export default function BusinessScreen() \{\
  const [showMap, setShowMap] = useState(false);\
\
  // 
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Ejemplo: negocio con nombre y coordenadas\
  const negocio = \{\
    name: "Restaurante El Yucateco",\
    lat: 21.1619,\
    lng: -86.8515,\
  \};\
\
  return (\
    <View style=\{styles.container\}>\
      \{/* Info del negocio */\}\
      <Text style=\{styles.name\}>\{negocio.name\}</Text>\
      <Text style=\{styles.address\}>Av. Principal #123, Canc\'fan, QR</Text>\
\
      \{/* Bot\'f3n para abrir el modal de mapas */\}\
      <TouchableOpacity style=\{styles.button\} onPress=\{() => setShowMap(true)\}>\
        <Text style=\{styles.buttonText\}>C\'f3mo llegar 
\f7\b0 \uc0\u55357 \u56983 
\f4\b </Text>\
      </TouchableOpacity>\
\
      \{/* Modal con el mapa */\}\
      <DirectionsMap\
        visible=\{showMap\}\
        destination=\{negocio\}\
        onClose=\{() => setShowMap(false)\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    padding: 20,\
    justifyContent: "center",\
    alignItems: "center",\
    backgroundColor: "#fff",\
  \},\
  name: \{\
    fontSize: 22,\
    fontWeight: "bold",\
  \},\
  address: \{\
    fontSize: 14,\
    color: "#555",\
    marginVertical: 8,\
  \},\
  button: \{\
    marginTop: 20,\
    backgroundColor: "#007bff",\
    paddingVertical: 12,\
    paddingHorizontal: 20,\
    borderRadius: 8,\
  \},\
  buttonText: \{\
    color: "#fff",\
    fontSize: 16,\
    fontWeight: "bold",\
  \},\
\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs30 \cf2 \uc0\u55357 \u56633 
\f4\b  Flujo completo
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Usuario abre la pantalla del negocio.\
	2.	Ve nombre, direcci\'f3n y bot\'f3n 
\f2\b \cf2 \'93C\'f3mo llegar 
\f7\b0 \uc0\u55357 \u56983 
\f2\b \'94
\f1\b0 \cf2 .\

\f6 \cf2 	3.	Al tocarlo \uc0\u8594  se abre el 
\f2\b \cf2 modal con opciones
\f1\b0 \cf2 :\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Abrir en Google Maps / Apple Maps.\
	\'95	Ver dentro de la app (WebView).\
	\'95	Cancelar.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que te arme tambi\'e9n la versi\'f3n con 
\f2\b \cf2 varios negocios en lista
\f1\b0 \cf2  (por ejemplo, desde un FlatList), para que cada uno abra su propio modal de direcciones? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  vamos a armar la 
\f2\b \cf2 lista de negocios con bot\'f3n \'93C\'f3mo llegar 
\f7\b0 \cf2 \uc0\u55357 \u56983 
\f2\b \cf2 \'94 en cada item
\f1\b0 \cf2 , usando un 
\f5 \cf2 FlatList
\f1 \cf2 .\
\
As\'ed tendr\'e1s el flujo tipo directorio, donde cada negocio abre su modal de direcciones.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  BusinessListScreen.js\
\
import React, \{ useState \} from "react";\
import \{ View, Text, FlatList, TouchableOpacity, StyleSheet \} from "react-native";\
import DirectionsMap from "./DirectionsMap";\
\
export default function BusinessListScreen() \{\
  const [selectedBusiness, setSelectedBusiness] = useState(null);\
\
  // 
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Lista de negocios (ejemplo con 3)\
  const businesses = [\
    \{ id: "1", name: "Peluquer\'eda Caucel", address: "Calle 20 #123, Caucel", lat: 21.0201, lng: -89.7055 \},\
    \{ id: "2", name: "Pasteler\'eda Dulce Amor", address: "Av. 2000 #45, Caucel", lat: 21.0211, lng: -89.7020 \},\
    \{ id: "3", name: "Taller Mec\'e1nico El Turbo", address: "Calle 25 #78, Caucel", lat: 21.0195, lng: -89.7075 \},\
  ];\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>Directorio de Caucel 
\f7\b0 \uc0\u55357 \u56534 
\f4\b </Text>\
\
      <FlatList\
        data=\{businesses\}\
        keyExtractor=\{(item) => item.id\}\
        renderItem=\{(\{ item \}) => (\
          <View style=\{styles.card\}>\
            <Text style=\{styles.name\}>\{item.name\}</Text>\
            <Text style=\{styles.address\}>\{item.address\}</Text>\
\
            <TouchableOpacity\
              style=\{styles.button\}\
              onPress=\{() => setSelectedBusiness(item)\}\
            >\
              <Text style=\{styles.buttonText\}>C\'f3mo llegar 
\f7\b0 \uc0\u55357 \u56983 
\f4\b </Text>\
            </TouchableOpacity>\
          </View>\
        )\}\
      />\
\
      \{/* Modal din\'e1mico */\}\
      \{selectedBusiness && (\
        <DirectionsMap\
          visible=\{!!selectedBusiness\}\
          destination=\{selectedBusiness\}\
          onClose=\{() => setSelectedBusiness(null)\}\
        />\
      )\}\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    paddingTop: 50,\
    paddingHorizontal: 16,\
    backgroundColor: "#f9f9f9",\
  \},\
  title: \{\
    fontSize: 22,\
    fontWeight: "bold",\
    marginBottom: 20,\
    textAlign: "center",\
  \},\
  card: \{\
    backgroundColor: "#fff",\
    padding: 16,\
    marginBottom: 12,\
    borderRadius: 10,\
    elevation: 2,\
  \},\
  name: \{\
    fontSize: 18,\
    fontWeight: "bold",\
  \},\
  address: \{\
    fontSize: 14,\
    color: "#555",\
    marginVertical: 4,\
  \},\
  button: \{\
    marginTop: 10,\
    backgroundColor: "#007bff",\
    paddingVertical: 10,\
    borderRadius: 6,\
    alignItems: "center",\
  \},\
  buttonText: \{\
    color: "#fff",\
    fontWeight: "bold",\
  \},\
\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs30 \cf2 \uc0\u55357 \u56633 
\f4\b  Flujo
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	El usuario ve el 
\f2\b \cf2 directorio completo
\f1\b0 \cf2  en formato lista.\

\f6 \cf2 	2.	Cada negocio tiene su 
\f2\b \cf2 nombre, direcci\'f3n y bot\'f3n \'93C\'f3mo llegar 
\f7\b0 \uc0\u55357 \u56983 
\f2\b \'94
\f1\b0 \cf2 .\

\f6 \cf2 	3.	Al tocarlo \uc0\u8594  se abre el 
\f5 \cf2 DirectionsMap
\f1  modal con opciones (Google Maps / Apple Maps / WebView).\

\f6 \cf2 	4.	Puede cerrar y volver a la lista.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que arme tambi\'e9n el 
\f2\b \cf2 archivo DirectionsMap.js completo
\f1\b0 \cf2  con el modal y las opciones de abrir en Maps o dentro de la app (para que ya lo conectemos con esta lista)? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1  ahora te armo el componente 
\f2\b \cf2 DirectionsMap.js
\f1\b0 \cf2  que se conecta con la lista.\
\
Este modal te permite:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Mostrar el nombre y direcci\'f3n del negocio.\
	\'95	Abrir Google Maps (Android / iOS).\
	\'95	Abrir Apple Maps (solo iOS).\
	\'95	(Opcional) Mostrar un mapa embebido con 
\f5 react-native-maps
\f1  si quieres navegaci\'f3n dentro de la app.\
\
import React from "react";\
import \{ View, Text, Modal, TouchableOpacity, StyleSheet, Linking, Platform \} from "react-native";\
\
export default function DirectionsMap(\{ visible, destination, onClose \}) \{\
  if (!destination) return null;\
\
  const \{ name, address, lat, lng \} = destination;\
\
  const openGoogleMaps = () => \{\
    const url = `https://www.google.com/maps/dir/?api=1&destination=$\{lat\},$\{lng\}&travelmode=driving`;\
    Linking.openURL(url);\
  \};\
\
  const openAppleMaps = () => \{\
    if (Platform.OS === "ios") \{\
      const url = `http://maps.apple.com/?daddr=$\{lat\},$\{lng\}`;\
      Linking.openURL(url);\
    \}\
  \};\
\
  return (\
    <Modal\
      visible=\{visible\}\
      animationType="slide"\
      transparent=\{true\}\
      onRequestClose=\{onClose\}\
    >\
      <View style=\{styles.overlay\}>\
        <View style=\{styles.modal\}>\
          <Text style=\{styles.title\}>C\'f3mo llegar 
\f7 \uc0\u55357 \u56983 
\f1 </Text>\
          <Text style=\{styles.business\}>\{name\}</Text>\
          <Text style=\{styles.address\}>\{address\}</Text>\
\
          <TouchableOpacity style=\{styles.btn\} onPress=\{openGoogleMaps\}>\
            <Text style=\{styles.btnText\}>Abrir en Google Maps</Text>\
          </TouchableOpacity>\
\
          \{Platform.OS === "ios" && (\
            <TouchableOpacity style=\{styles.btn\} onPress=\{openAppleMaps\}>\
              <Text style=\{styles.btnText\}>Abrir en Apple Maps</Text>\
            </TouchableOpacity>\
          )\}\
\
          <TouchableOpacity\
            style=\{[styles.btn, styles.closeBtn]\}\
            onPress=\{onClose\}\
          >\
            <Text style=\{styles.btnText\}>Cerrar 
\f7 \uc0\u10006 \u65039 
\f1 </Text>\
          </TouchableOpacity>\
        </View>\
      </View>\
    </Modal>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  overlay: \{\
    flex: 1,\
    justifyContent: "flex-end",\
    backgroundColor: "rgba(0,0,0,0.4)",\
  \},\
  modal: \{\
    backgroundColor: "#fff",\
    padding: 20,\
    borderTopLeftRadius: 16,\
    borderTopRightRadius: 16,\
  \},\
  title: \{\
    fontSize: 20,\
    fontWeight: "bold",\
    marginBottom: 12,\
    textAlign: "center",\
  \},\
  business: \{\
    fontSize: 18,\
    fontWeight: "600",\
    marginBottom: 4,\
    textAlign: "center",\
  \},\
  address: \{\
    fontSize: 14,\
    color: "#555",\
    marginBottom: 16,\
    textAlign: "center",\
  \},\
  btn: \{\
    backgroundColor: "#007bff",\
    paddingVertical: 12,\
    marginBottom: 10,\
    borderRadius: 8,\
    alignItems: "center",\
  \},\
  btnText: \{\
    color: "#fff",\
    fontWeight: "bold",\
  \},\
  closeBtn: \{\
    backgroundColor: "#6c757d",\
  \},\
\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 \uc0\u55357 \u56633 
\f4\b  Flujo completo ya armado:
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	El usuario abre el 
\f2\b \cf2 directorio
\f1\b0 \cf2  (
\f5 BusinessListScreen
\f1 ).\

\f6 \cf2 	2.	Toca 
\f2\b \cf2 \'93C\'f3mo llegar 
\f7\b0 \uc0\u55357 \u56983 
\f2\b \'94
\f1\b0 \cf2  en un negocio.\

\f6 \cf2 	3.	Se abre el 
\f2\b \cf2 modal DirectionsMap
\f1\b0 \cf2 .\

\f6 \cf2 	4.	Elige entre:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Google Maps\
	\'95	Apple Maps (iOS)\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0
\cf2 	5.	Puede cerrar el modal y volver al listado.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que adem\'e1s te prepare una 
\f2\b \cf2 versi\'f3n embebida con react-native-maps
\f1\b0 \cf2  para que dentro del modal se vea el mapa con un marcador y ruta r\'e1pida (sin salir a otra app)? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Entonces vamos a extender el 
\f2\b \cf2 DirectionsMap.js
\f1\b0 \cf2  para que no solo abra Google/Apple Maps, sino que tambi\'e9n muestre un 
\f2\b \cf2 mapa embebido con marcador
\f1\b0 \cf2  dentro de la app usando 
\f5 \cf2 react-native-maps
\f1 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Versi\'f3n con react-native-maps embebido
\f1\b0\fs28 \cf2 \
\
Primero instala la librer\'eda:\
\
npm install react-native-maps\
\
En iOS recuerda correr:\
\
cd ios && pod install && cd ..\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 \uc0\u55357 \u56633 
\f4\b  DirectionsMap.js actualizado\
\
import React from "react";\
import \{ View, Text, Modal, TouchableOpacity, StyleSheet, Linking, Platform \} from "react-native";\
import MapView, \{ Marker \} from "react-native-maps";\
\
export default function DirectionsMap(\{ visible, destination, onClose \}) \{\
  if (!destination) return null;\
\
  const \{ name, address, lat, lng \} = destination;\
\
  const openGoogleMaps = () => \{\
    const url = `https://www.google.com/maps/dir/?api=1&destination=$\{lat\},$\{lng\}&travelmode=driving`;\
    Linking.openURL(url);\
  \};\
\
  const openAppleMaps = () => \{\
    if (Platform.OS === "ios") \{\
      const url = `http://maps.apple.com/?daddr=$\{lat\},$\{lng\}`;\
      Linking.openURL(url);\
    \}\
  \};\
\
  return (\
    <Modal\
      visible=\{visible\}\
      animationType="slide"\
      transparent=\{true\}\
      onRequestClose=\{onClose\}\
    >\
      <View style=\{styles.overlay\}>\
        <View style=\{styles.modal\}>\
          <Text style=\{styles.title\}>C\'f3mo llegar 
\f7\b0 \uc0\u55357 \u56983 
\f4\b </Text>\
          <Text style=\{styles.business\}>\{name\}</Text>\
          <Text style=\{styles.address\}>\{address\}</Text>\
\
          \{/* Mapa embebido */\}\
          <MapView\
            style=\{styles.map\}\
            initialRegion=\{\{\
              latitude: lat,\
              longitude: lng,\
              latitudeDelta: 0.01,\
              longitudeDelta: 0.01,\
            \}\}\
          >\
            <Marker\
              coordinate=\{\{ latitude: lat, longitude: lng \}\}\
              title=\{name\}\
              description=\{address\}\
            />\
          </MapView>\
\
          <TouchableOpacity style=\{styles.btn\} onPress=\{openGoogleMaps\}>\
            <Text style=\{styles.btnText\}>Abrir en Google Maps</Text>\
          </TouchableOpacity>\
\
          \{Platform.OS === "ios" && (\
            <TouchableOpacity style=\{styles.btn\} onPress=\{openAppleMaps\}>\
              <Text style=\{styles.btnText\}>Abrir en Apple Maps</Text>\
            </TouchableOpacity>\
          )\}\
\
          <TouchableOpacity\
            style=\{[styles.btn, styles.closeBtn]\}\
            onPress=\{onClose\}\
          >\
            <Text style=\{styles.btnText\}>Cerrar 
\f7\b0 \uc0\u10006 \u65039 
\f4\b </Text>\
          </TouchableOpacity>\
        </View>\
      </View>\
    </Modal>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  overlay: \{\
    flex: 1,\
    justifyContent: "flex-end",\
    backgroundColor: "rgba(0,0,0,0.4)",\
  \},\
  modal: \{\
    backgroundColor: "#fff",\
    padding: 20,\
    borderTopLeftRadius: 16,\
    borderTopRightRadius: 16,\
    maxHeight: "90%",\
  \},\
  title: \{\
    fontSize: 20,\
    fontWeight: "bold",\
    marginBottom: 12,\
    textAlign: "center",\
  \},\
  business: \{\
    fontSize: 18,\
    fontWeight: "600",\
    marginBottom: 4,\
    textAlign: "center",\
  \},\
  address: \{\
    fontSize: 14,\
    color: "#555",\
    marginBottom: 16,\
    textAlign: "center",\
  \},\
  map: \{\
    width: "100%",\
    height: 200,\
    borderRadius: 12,\
    marginBottom: 16,\
  \},\
  btn: \{\
    backgroundColor: "#007bff",\
    paddingVertical: 12,\
    marginBottom: 10,\
    borderRadius: 8,\
    alignItems: "center",\
  \},\
  btnText: \{\
    color: "#fff",\
    fontWeight: "bold",\
  \},\
  closeBtn: \{\
    backgroundColor: "#6c757d",\
  \},\
\});\
\

\f7\b0 \uc0\u55357 \u56633 
\f4\b  Flujo visual ahora
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	El usuario abre el modal.\
	2.	Se muestra el nombre + direcci\'f3n.\
	3.	Se carga un 
\f2\b \cf2 mapa interactivo con marcador
\f1\b0 \cf2  
\f7 \cf2 \uc0\u55357 \u56525 
\f1 \cf2 .\

\f6 \cf2 	4.	Puede mover/zoom dentro del modal.\
	5.	Decide si abre la ruta completa en Google/Apple Maps.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que tambi\'e9n le agreguemos 
\f2\b \cf2 la ruta dibujada en el mapa
\f1\b0 \cf2  (desde ubicaci\'f3n actual hasta el negocio) usando la API de Google Directions? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Entonces vamos a mejorar el modal para que adem\'e1s de mostrar el 
\f2\b \cf2 mapa embebido con marcador
\f1\b0 \cf2 , muestre tambi\'e9n la 
\f2\b \cf2 ruta desde la ubicaci\'f3n actual del usuario hasta el negocio
\f1\b0 \cf2 .\
\
Para esto necesitamos:\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f7 \cf2 \uc0\u55357 \u56525 
\f6 \cf2  Obtener la ubicaci\'f3n actual del usuario (
\f5 \cf2 react-native-geolocation-service
\f1  o 
\f5 expo-location
\f1 ).\

\f6 \cf2 	2.	
\f7 \cf2 \uc0\u55357 \u56826 \u65039 
\f6 \cf2  Usar 
\f5 \cf2 react-native-maps-directions
\f1  (un wrapper de Google Directions API) para dibujar la ruta.\

\f6 \cf2 	3.	
\f7 \cf2 \uc0\u55357 \u56593 
\f6 \cf2  Contar con una API Key de Google Maps habilitada para 
\f2\b \cf2 Directions API
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Instalaci\'f3n\
\
npm install react-native-maps react-native-maps-directions react-native-geolocation-service\
\

\f1\b0\fs28 \cf2 Si usas 
\f2\b \cf2 Expo
\f1\b0 \cf2 , puedes instalar:\
\
expo install react-native-maps expo-location\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  C\'f3digo con ruta dibujada\
\
import React, \{ useEffect, useState \} from "react";\
import \{ View, Text, Modal, TouchableOpacity, StyleSheet, Linking, Platform, PermissionsAndroid \} from "react-native";\
import MapView, \{ Marker \} from "react-native-maps";\
import MapViewDirections from "react-native-maps-directions";\
import Geolocation from "react-native-geolocation-service";\
\
const GOOGLE_MAPS_APIKEY = "TU_API_KEY_DE_GOOGLE"; // 
\f7\b0 \uc0\u55357 \u57000 
\f4\b  Reemplaza con tu API Key\
\
export default function DirectionsMap(\{ visible, destination, onClose \}) \{\
  const [currentLocation, setCurrentLocation] = useState(null);\
\
  useEffect(() => \{\
    const requestLocationPermission = async () => \{\
      if (Platform.OS === "android") \{\
        const granted = await PermissionsAndroid.request(\
          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION\
        );\
        if (granted !== PermissionsAndroid.RESULTS.GRANTED) \{\
          console.log("Permiso de ubicaci\'f3n denegado");\
          return;\
        \}\
      \}\
      Geolocation.getCurrentPosition(\
        (position) => \{\
          setCurrentLocation(\{\
            latitude: position.coords.latitude,\
            longitude: position.coords.longitude,\
          \});\
        \},\
        (error) => \{\
          console.log(error);\
        \},\
        \{ enableHighAccuracy: true, timeout: 15000, maximumAge: 10000 \}\
      );\
    \};\
\
    requestLocationPermission();\
  \}, []);\
\
  if (!destination) return null;\
\
  const \{ name, address, lat, lng \} = destination;\
\
  const openGoogleMaps = () => \{\
    const url = `https://www.google.com/maps/dir/?api=1&destination=$\{lat\},$\{lng\}&travelmode=driving`;\
    Linking.openURL(url);\
  \};\
\
  const openAppleMaps = () => \{\
    if (Platform.OS === "ios") \{\
      const url = `http://maps.apple.com/?daddr=$\{lat\},$\{lng\}`;\
      Linking.openURL(url);\
    \}\
  \};\
\
  return (\
    <Modal\
      visible=\{visible\}\
      animationType="slide"\
      transparent=\{true\}\
      onRequestClose=\{onClose\}\
    >\
      <View style=\{styles.overlay\}>\
        <View style=\{styles.modal\}>\
          <Text style=\{styles.title\}>C\'f3mo llegar 
\f7\b0 \uc0\u55357 \u56983 
\f4\b </Text>\
          <Text style=\{styles.business\}>\{name\}</Text>\
          <Text style=\{styles.address\}>\{address\}</Text>\
\
          <MapView\
            style=\{styles.map\}\
            initialRegion=\{\{\
              latitude: lat,\
              longitude: lng,\
              latitudeDelta: 0.05,\
              longitudeDelta: 0.05,\
            \}\}\
          >\
            \{/* Marcador del negocio */\}\
            <Marker\
              coordinate=\{\{ latitude: lat, longitude: lng \}\}\
              title=\{name\}\
              description=\{address\}\
            />\
\
            \{/* Ubicaci\'f3n actual */\}\
            \{currentLocation && (\
              <Marker\
                coordinate=\{currentLocation\}\
                pinColor="blue"\
                title="Mi ubicaci\'f3n"\
              />\
            )\}\
\
            \{/* Ruta */\}\
            \{currentLocation && (\
              <MapViewDirections\
                origin=\{currentLocation\}\
                destination=\{\{ latitude: lat, longitude: lng \}\}\
                apikey=\{GOOGLE_MAPS_APIKEY\}\
                strokeWidth=\{5\}\
                strokeColor="blue"\
                mode="DRIVING"\
              />\
            )\}\
          </MapView>\
\
          <TouchableOpacity style=\{styles.btn\} onPress=\{openGoogleMaps\}>\
            <Text style=\{styles.btnText\}>Abrir en Google Maps</Text>\
          </TouchableOpacity>\
\
          \{Platform.OS === "ios" && (\
            <TouchableOpacity style=\{styles.btn\} onPress=\{openAppleMaps\}>\
              <Text style=\{styles.btnText\}>Abrir en Apple Maps</Text>\
            </TouchableOpacity>\
          )\}\
\
          <TouchableOpacity\
            style=\{[styles.btn, styles.closeBtn]\}\
            onPress=\{onClose\}\
          >\
            <Text style=\{styles.btnText\}>Cerrar 
\f7\b0 \uc0\u10006 \u65039 
\f4\b </Text>\
          </TouchableOpacity>\
        </View>\
      </View>\
    </Modal>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  overlay: \{\
    flex: 1,\
    justifyContent: "flex-end",\
    backgroundColor: "rgba(0,0,0,0.4)",\
  \},\
  modal: \{\
    backgroundColor: "#fff",\
    padding: 20,\
    borderTopLeftRadius: 16,\
    borderTopRightRadius: 16,\
    maxHeight: "90%",\
  \},\
  title: \{\
    fontSize: 20,\
    fontWeight: "bold",\
    marginBottom: 12,\
    textAlign: "center",\
  \},\
  business: \{\
    fontSize: 18,\
    fontWeight: "600",\
    marginBottom: 4,\
    textAlign: "center",\
  \},\
  address: \{\
    fontSize: 14,\
    color: "#555",\
    marginBottom: 16,\
    textAlign: "center",\
  \},\
  map: \{\
    width: "100%",\
    height: 250,\
    borderRadius: 12,\
    marginBottom: 16,\
  \},\
  btn: \{\
    backgroundColor: "#007bff",\
    paddingVertical: 12,\
    marginBottom: 10,\
    borderRadius: 8,\
    alignItems: "center",\
  \},\
  btnText: \{\
    color: "#fff",\
    fontWeight: "bold",\
  \},\
  closeBtn: \{\
    backgroundColor: "#6c757d",\
  \},\
\});\
\

\f7\b0 \uc0\u55357 \u56633 
\f4\b  Flujo visual ahora
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Muestra la ubicaci\'f3n actual del usuario (marcador azul).\
	2.	Muestra el destino (marcador rojo).\
	3.	Dibuja la 
\f2\b \cf2 ruta en azul
\f1\b0 \cf2  
\f7 \cf2 \uc0\u55357 \u56985 
\f1 \cf2  usando Google Directions.\

\f6 \cf2 	4.	Permite abrir la navegaci\'f3n en Google Maps o Apple Maps.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que prepare tambi\'e9n la 
\f2\b \cf2 configuraci\'f3n del API Key de Google Maps
\f1\b0 \cf2  (AndroidManifest, AppDelegate, permisos, etc.) para que funcione sin errores en ambas plataformas?\
Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1  vamos a preparar 
\f2\b \cf2 toda la configuraci\'f3n del API Key de Google Maps
\f1\b0 \cf2  para que tu componente funcione en 
\f2\b \cf2 iOS y Android
\f1\b0 \cf2  sin errores.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56593 
\f4\b  1. Crear y habilitar API Key en Google Cloud
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Entra a 
\f7 \cf2 \uc0\u55357 \u56393 
\f6 \cf2  {\field{\*\fldinst{HYPERLINK "https://console.cloud.google.com/"}}{\fldrslt \cf2 Google Cloud Console}}.\
	2.	Crea un proyecto nuevo o selecciona uno existente.\
	3.	Ve a 
\f2\b \cf2 APIs & Services 
\f3 \uc0\u8594 
\f2  Credentials
\f1\b0 \cf2 .\

\f6 \cf2 	4.	Crea una 
\f2\b \cf2 API Key
\f1\b0 \cf2 .\

\f6 \cf2 	5.	Habilita estas APIs:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b \cf2 Maps SDK for Android
\f1\b0 \cf2 \
	\'95	
\f2\b \cf2 Maps SDK for iOS
\f1\b0 \cf2 \
	\'95	
\f2\b \cf2 Directions API
\f1\b0 \cf2 \
	\'95	(Opcional: 
\f2\b \cf2 Places API
\f1\b0 \cf2  si quieres autocompletado de direcciones).\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	6.	Copia tu API Key y gu\'e1rdala.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56561 
\f4\b  2. Configuraci\'f3n en Android
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs30 \cf2 a) Agregar permisos en AndroidManifest.xml
\f1\b0\fs28 \cf2 \
\
Ubicado en 
\f5 \cf2 android/app/src/main/AndroidManifest.xml
\f1 \cf2 :\
\
<manifest xmlns:android="http://schemas.android.com/apk/res/android"\
    package="com.tuapp">\
\
    <!-- Permisos de ubicaci\'f3n -->\
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />\
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />\
\
    <application\
        android:name=".MainApplication"\
        android:label="@string/app_name"\
        android:icon="@mipmap/ic_launcher"\
        android:allowBackup="true"\
        android:theme="@style/AppTheme">\
\
        <!-- API Key de Google Maps -->\
        <meta-data\
            android:name="com.google.android.geo.API_KEY"\
            android:value="TU_API_KEY_AQUI"/>\
    </application>\
</manifest>\
\

\f4\b\fs30 \cf2 b) Gradle (asegurar dependencias)
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 android/build.gradle
\f1 \cf2  debe estar el repositorio:\
\
allprojects \{\
    repositories \{\
        google()\
        mavenCentral()\
    \}\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55356 \u57167 
\f4\b  3. Configuraci\'f3n en iOS
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs30 \cf2 a) Instalar dependencias
\f1\b0\fs28 \cf2 \
\
Si usas 
\f2\b \cf2 Expo
\f1\b0 \cf2  no necesitas esto, pero en bare React Native:\
\
cd ios && pod install\
\

\f4\b\fs30 \cf2 b) API Key en AppDelegate.m
\f1\b0\fs28 \cf2 \
\
Abre 
\f5 \cf2 ios/tuApp/AppDelegate.m
\f1 \cf2  y agrega:\
\
#import <GoogleMaps/GoogleMaps.h>\
\
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\
\{\
  [GMSServices provideAPIKey:@"TU_API_KEY_AQUI"];\
  return YES;\
\}\
\

\f4\b\fs30 \cf2 c) Permisos de ubicaci\'f3n en Info.plist
\f1\b0\fs28 \cf2 \
\
Ubicado en 
\f5 \cf2 ios/tuApp/Info.plist
\f1 \cf2 :\
\
<key>NSLocationWhenInUseUsageDescription</key>\
<string>Necesitamos tu ubicaci\'f3n para mostrar la ruta hacia el destino.</string>\
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\
<string>Necesitamos tu ubicaci\'f3n para mostrar la ruta hacia el destino.</string>\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55358 \u56813 
\f4\b  4. Expo (si no ejectaste el proyecto)
\f1\b0\fs28 \cf2 \
\
Si trabajas con 
\f2\b \cf2 Expo Managed Workflow
\f1\b0 \cf2 , la configuraci\'f3n es diferente:\
\
En 
\f5 \cf2 app.json
\f1 \cf2 :\
\
\{\
  "expo": \{\
    "ios": \{\
      "config": \{\
        "googleMapsApiKey": "TU_API_KEY_AQUI"\
      \}\
    \},\
    "android": \{\
      "config": \{\
        "googleMaps": \{\
          "apiKey": "TU_API_KEY_AQUI"\
        \}\
      \}\
    \}\
  \}\
\}\
\
Y no necesitas modificar 
\f5 \cf2 AppDelegate
\f1 \cf2  ni 
\f5 \cf2 AndroidManifest
\f1 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u9989 
\f4\b  Con esto ya tienes:
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Google Maps funcionando en iOS y Android.\
	\'95	Permisos de ubicaci\'f3n.\
	\'95	Direcci\'f3n dibujada con 
\f5 react-native-maps-directions
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te prepare tambi\'e9n un 
\f2\b \cf2 checklist paso a paso
\f1\b0 \cf2  (con comandos y archivos en orden) para que lo pegues en tu proyecto y no se te pase nada?\
\
Si\
Excelente 
\f7 \uc0\u55357 \u56960 
\f1  te armo un 
\f2\b \cf2 checklist paso a paso
\f1\b0 \cf2  con comandos y modificaciones de archivos, listo para que lo subas a GitHub y cualquiera pueda correr el proyecto sin perderse.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs44 \cf2 \uc0\u9989 
\f4\b  Checklist Configuraci\'f3n Google Maps en React Native (iOS + Android + Web)
\f1\b0\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f4\b\fs34 \cf2 1. Crear API Key en Google Cloud
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Crear proyecto en 
\f7 \uc0\u55357 \u56393 
\f1  {\field{\*\fldinst{HYPERLINK "https://console.cloud.google.com/"}}{\fldrslt \cf2 Google Cloud Console}}\
	\'95	Habilitar APIs:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Maps SDK for Android\
	\'95	Maps SDK for iOS\
	\'95	Directions API\
	\'95	(Opcional) Places API\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Crear 
\f2\b API Key
\f1\b0 \
	\'95	Restringir la API Key a 
\f2\b iOS, Android y Web
\f1\b0  (seguridad)\
	\'95	Guardar la API Key en un 
\f5 .env
\f1  (ejemplo: 
\f5 GOOGLE_MAPS_API_KEY=XXXX
\f1 )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f4\b\fs34 \cf2 2. Instalar dependencias\
\
npm install react-native-maps react-native-maps-directions react-native-dotenv\
\

\f1\b0\fs28 \cf2 (Si usas Expo Managed):\
\
expo install react-native-maps\
expo install react-native-maps-directions\
\

\f4\b\fs34 \cf2 3. Configuraci\'f3n Android
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs30 \cf2 a) Permisos de ubicaci\'f3n
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 android/app/src/main/AndroidManifest.xml
\f1 \cf2 :\
\
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />\
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />\
\
<application>\
  <meta-data\
    android:name="com.google.android.geo.API_KEY"\
    android:value="$\{GOOGLE_MAPS_API_KEY\}"/>\
</application>\
\

\f4\b\fs30 \cf2 b) Repositorios en android/build.gradle\
\
allprojects \{\
    repositories \{\
        google()\
        mavenCentral()\
    \}\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\fs34 \cf2 4. Configuraci\'f3n iOS
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs30 \cf2 a) Instalar Pods\
\
cd ios && pod install && cd ..\
\
b) API Key en AppDelegate.m\
\
#import <GoogleMaps/GoogleMaps.h>\
\
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\
\{\
  [GMSServices provideAPIKey:@"$(GOOGLE_MAPS_API_KEY)"];\
  return YES;\
\}\
\
c) Permisos en Info.plist\
\
<key>NSLocationWhenInUseUsageDescription</key>\
<string>Necesitamos tu ubicaci\'f3n para mostrar la ruta.</string>\
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\
<string>Necesitamos tu ubicaci\'f3n para mostrar la ruta.</string>\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\fs34 \cf2 5. Configuraci\'f3n Expo Managed (alternativa m\'e1s simple)
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 app.json
\f1 \cf2 :\
\
\{\
  "expo": \{\
    "ios": \{\
      "config": \{\
        "googleMapsApiKey": "TU_API_KEY_AQUI"\
      \}\
    \},\
    "android": \{\
      "config": \{\
        "googleMaps": \{\
          "apiKey": "TU_API_KEY_AQUI"\
        \}\
      \}\
    \}\
  \}\
\}\
\

\f4\b\fs34 \cf2 6. Uso en el c\'f3digo\
\
import MapView, \{ Marker \} from "react-native-maps";\
import MapViewDirections from "react-native-maps-directions";\
import \{ GOOGLE_MAPS_API_KEY \} from "@env";\
\
<MapView\
  style=\{\{ flex: 1 \}\}\
  initialRegion=\{\{\
    latitude: 20.985,\
    longitude: -89.65,\
    latitudeDelta: 0.05,\
    longitudeDelta: 0.05,\
  \}\}\
>\
  <Marker coordinate=\{\{ latitude: 20.985, longitude: -89.65 \}\} title="Inicio" />\
  <Marker coordinate=\{\{ latitude: 20.99, longitude: -89.62 \}\} title="Destino" />\
\
  <MapViewDirections\
    origin=\{\{ latitude: 20.985, longitude: -89.65 \}\}\
    destination=\{\{ latitude: 20.99, longitude: -89.62 \}\}\
    apikey=\{GOOGLE_MAPS_API_KEY\}\
    strokeWidth=\{4\}\
    strokeColor="blue"\
  />\
</MapView>\
\
7. Subida a GitHub
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\b\fs30 \cf2 a) Crear .gitignore
\f1\b0\fs28 \cf2 \
\
Incluye tu 
\f5 \cf2 .env
\f1 \cf2  para no exponer la API Key:\
\
node_modules/\
.env\
android/app/google-services.json\
ios/Pods/\
\

\f4\b\fs30 \cf2 b) Guardar credenciales
\f1\b0\fs28 \cf2 \
\
Crea 
\f5 \cf2 .env.example
\f1 \cf2  con la variable vac\'eda:\
\
GOOGLE_MAPS_API_KEY=\
\
As\'ed los dem\'e1s sabr\'e1n que deben poner su propia Key.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f4\b\fs34 \cf2 8. Checklist de Test
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 npm run android
\f1  \uc0\u8594  abre en Android con mapa cargado.\
	\'95	
\f5 npm run ios
\f1  \uc0\u8594  abre en iOS con mapa cargado.\
	\'95	Prueba zoom, markers y rutas.\
	\'95	Verifica que la API Key est\'e1 tomando desde 
\f5 .env
\f1 .\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te arme directamente un 
\f2\b \cf2 README.md listo para tu repo en GitHub
\f1\b0 \cf2  con este checklist (formato bonito con instrucciones y c\'f3digo)? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1  aqu\'ed tienes el 
\f2\b \cf2 README.md listo para tu repo en GitHub
\f1\b0 \cf2 , con todo el checklist y c\'f3digo necesario para que cualquiera pueda clonar y correr el proyecto:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs44 \cf2 \uc0\u55357 \u56960 
\f4\b  React Native Google Maps + Directions
\f1\b0\fs28 \cf2 \
\
Este proyecto implementa Google Maps en 
\f2\b \cf2 React Native
\f1\b0 \cf2  con soporte para 
\f2\b \cf2 Android, iOS y Expo
\f1\b0 \cf2 , incluyendo 
\f2\b \cf2 marcadores, rutas y direcciones
\f1\b0 \cf2  usando la API de Google.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56550 
\f4\b  Instalaci\'f3n\
\
git clone https://github.com/tuusuario/tu-repo.git\
cd tu-repo\
npm install\
\

\f7\b0 \uc0\u55357 \u56593 
\f4\b  Configuraci\'f3n API Key
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Crea un proyecto en 
\f7 \cf2 \uc0\u55357 \u56393 
\f6 \cf2  {\field{\*\fldinst{HYPERLINK "https://console.cloud.google.com/"}}{\fldrslt \cf2 Google Cloud Console}}.\
	2.	Habilita estas APIs:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b \cf2 Maps SDK for Android
\f1\b0 \cf2 \
	\'95	
\f2\b \cf2 Maps SDK for iOS
\f1\b0 \cf2 \
	\'95	
\f2\b \cf2 Directions API
\f1\b0 \cf2 \
	\'95	(Opcional) 
\f2\b \cf2 Places API
\f1\b0 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	3.	Crea una 
\f2\b \cf2 API Key
\f1\b0 \cf2  y restr\'edngela a iOS, Android y Web.\

\f6 \cf2 	4.	Crea un archivo 
\f5 \cf2 .env
\f1  en la ra\'edz del proyecto:\
GOOGLE_MAPS_API_KEY=TU_API_KEY_AQUI\

\f6 \cf2 	5.	Aseg\'farate de tener un 
\f5 \cf2 .env.example
\f1  en el repo para guiar a otros devs:\
GOOGLE_MAPS_API_KEY=\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u9881 \u65039 
\f4\b  Configuraci\'f3n por Plataforma
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 \uc0\u55357 \u56633 
\f4\b  Android
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 android/app/src/main/AndroidManifest.xml
\f1 \cf2  agrega:\
\
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />\
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />\
\
<application>\
  <meta-data\
    android:name="com.google.android.geo.API_KEY"\
    android:value="$\{GOOGLE_MAPS_API_KEY\}"/>\
</application>\
\
En 
\f5 \cf2 android/build.gradle
\f1 \cf2  aseg\'farate de tener:\
\
allprojects \{\
    repositories \{\
        google()\
        mavenCentral()\
    \}\
\}\
\

\f7\fs30 \cf2 \uc0\u55357 \u56633 
\f4\b  iOS
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Instala Pods:\
cd ios && pod install && cd ..\
2.	En 
\f5 \cf2 AppDelegate.m
\f1  agrega:\
#import <GoogleMaps/GoogleMaps.h>\
\
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\
\{\
  [GMSServices provideAPIKey:@"$(GOOGLE_MAPS_API_KEY)"];\
  return YES;\
\}\
\

\f6 \cf2 	3.	En 
\f5 \cf2 ios/Info.plist
\f1  agrega permisos de ubicaci\'f3n:\
<key>NSLocationWhenInUseUsageDescription</key>\
<string>Necesitamos tu ubicaci\'f3n para mostrar la ruta.</string>\
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\
<string>Necesitamos tu ubicaci\'f3n para mostrar la ruta.</string>\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 \uc0\u55357 \u56633 
\f4\b  Expo (Managed Workflow)
\f1\b0\fs28 \cf2 \
\
En 
\f5 \cf2 app.json
\f1 \cf2 :\
\{\
  "expo": \{\
    "ios": \{\
      "config": \{\
        "googleMapsApiKey": "TU_API_KEY_AQUI"\
      \}\
    \},\
    "android": \{\
      "config": \{\
        "googleMaps": \{\
          "apiKey": "TU_API_KEY_AQUI"\
        \}\
      \}\
    \}\
  \}\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55357 \u56826 \u65039 
\f4\b  Ejemplo de Uso\
\
import MapView, \{ Marker \} from "react-native-maps";\
import MapViewDirections from "react-native-maps-directions";\
import \{ GOOGLE_MAPS_API_KEY \} from "@env";\
\
<MapView\
  style=\{\{ flex: 1 \}\}\
  initialRegion=\{\{\
    latitude: 20.985,\
    longitude: -89.65,\
    latitudeDelta: 0.05,\
    longitudeDelta: 0.05,\
  \}\}\
>\
  <Marker coordinate=\{\{ latitude: 20.985, longitude: -89.65 \}\} title="Inicio" />\
  <Marker coordinate=\{\{ latitude: 20.99, longitude: -89.62 \}\} title="Destino" />\
\
  <MapViewDirections\
    origin=\{\{ latitude: 20.985, longitude: -89.65 \}\}\
    destination=\{\{ latitude: 20.99, longitude: -89.62 \}\}\
    apikey=\{GOOGLE_MAPS_API_KEY\}\
    strokeWidth=\{4\}\
    strokeColor="blue"\
  />\
</MapView>\
\

\f7\b0 \uc0\u55357 \u56541 
\f4\b  .gitignore recomendado\
\
node_modules/\
.env\
android/app/google-services.json\
ios/Pods/\
\

\f7\b0 \uc0\u9989 
\f4\b  Checklist de Test
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 npm run android
\f1  \uc0\u8594  abre en Android con mapa cargado\
	\'95	
\f5 npm run ios
\f1  \uc0\u8594  abre en iOS con mapa cargado\
	\'95	Verifica que aparecen markers y rutas\
	\'95	API Key funcionando desde 
\f5 .env
\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56424 \u8205 \u55357 \u56507 
\f1  Autor: {\field{\*\fldinst{HYPERLINK "https://github.com/tuusuario"}}{\fldrslt \cf2 Tu Nombre}}\
\

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que adem\'e1s te prepare un 
\f2\b \cf2 commit inicial con estructura de carpetas + este README listo para subir
\f1\b0 \cf2  (con comandos git incluidos)? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Aqu\'ed te dejo todo el 
\f2\b \cf2 commit inicial con la estructura del proyecto + README listo para GitHub
\f1\b0 \cf2 . Solo tienes que ejecutar los comandos en tu terminal.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 1: Crear proyecto
\f1\b0\fs28 \cf2 \
\
Si quieres usar 
\f2\b \cf2 Expo
\f1\b0 \cf2  (m\'e1s f\'e1cil para dev/testing):\
\
npx create-expo-app react-native-maps-directions\
cd react-native-maps-directions\
\
Si prefieres 
\f2\b \cf2 React Native CLI
\f1\b0 \cf2 :\
\
npx react-native init ReactNativeMapsDirections\
cd ReactNativeMapsDirections\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 2: Instalar dependencias\
\
npm install react-native-maps react-native-maps-directions react-native-dotenv\
\

\f7\b0 \uc0\u55357 \u56633 
\f4\b  Paso 3: Crear estructura de carpetas\
\
mkdir src\
mkdir src/components\
mkdir src/screens\
mkdir src/config\
touch src/screens/MapScreen.js\
touch src/config/env.js\
\

\f1\b0\fs28 \cf2 Ejemplo de 
\f5 \cf2 src/screens/MapScreen.js
\f1 \cf2  (versi\'f3n b\'e1sica):\
\
import React from "react";\
import MapView, \{ Marker \} from "react-native-maps";\
import MapViewDirections from "react-native-maps-directions";\
import \{ GOOGLE_MAPS_API_KEY \} from "@env";\
\
export default function MapScreen() \{\
  const origin = \{ latitude: 20.985, longitude: -89.65 \};\
  const destination = \{ latitude: 20.99, longitude: -89.62 \};\
\
  return (\
    <MapView\
      style=\{\{ flex: 1 \}\}\
      initialRegion=\{\{\
        ...origin,\
        latitudeDelta: 0.05,\
        longitudeDelta: 0.05,\
      \}\}\
    >\
      <Marker coordinate=\{origin\} title="Inicio" />\
      <Marker coordinate=\{destination\} title="Destino" />\
\
      <MapViewDirections\
        origin=\{origin\}\
        destination=\{destination\}\
        apikey=\{GOOGLE_MAPS_API_KEY\}\
        strokeWidth=\{4\}\
        strokeColor="blue"\
      />\
    </MapView>\
  );\
\}\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 4: Configurar .env
\f1\b0\fs28 \cf2 \
\
Crea el archivo 
\f5 \cf2 .env
\f1 \cf2  en la ra\'edz:\
\
GOOGLE_MAPS_API_KEY=TU_API_KEY_AQUI\
\
Y el archivo 
\f5 \cf2 .env.example
\f1 \cf2 :\
\
GOOGLE_MAPS_API_KEY=\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 5: Crear .gitignore\
\
touch .gitignore\
\

\f1\b0\fs28 \cf2 Contenido recomendado:\
\
node_modules/\
.env\
android/app/google-services.json\
ios/Pods/\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 6: Agregar el README
\f1\b0\fs28 \cf2 \
\
Ya tienes el README que te arm\'e9 antes 
\f7 \uc0\u9989 
\f1 \
Solo guarda ese texto en 
\f5 \cf2 README.md
\f1 \cf2 .\

\f6 \cf2 \
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 7: Primer Commit y Push a GitHub\
\
git init\
git add .\
git commit -m "
\f7\b0 \uc0\u55357 \u56960 
\f4\b  Initial commit: React Native Maps + Directions setup"\
git branch -M main\
git remote add origin https://github.com/TU_USUARIO/react-native-maps-directions.git\
git push -u origin main\
\

\f1\b0\fs28 \cf2 Con eso tendr\'e1s el repo 
\f2\b \cf2 listo para compartir y testear
\f1\b0 \cf2  en Android, iOS y Expo 
\f7 \uc0\u55357 \u56396 
\f1 \
\

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te arme tambi\'e9n un 
\f2\b \cf2 package.json base con los scripts listos
\f1\b0 \cf2  (android, ios, start) para que quede todav\'eda m\'e1s f\'e1cil de correr? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1 \
Aqu\'ed tienes un 
\f2\b \cf2 package.json base completo
\f1\b0 \cf2 , listo para usar en tu proyecto (funciona tanto con 
\f2\b \cf2 Expo
\f1\b0 \cf2  como con React Native CLI**).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  package.json\
\
\{\
  "name": "react-native-maps-directions",\
  "version": "1.0.0",\
  "private": true,\
  "scripts": \{\
    "start": "expo start",\
    "android": "expo run:android",\
    "ios": "expo run:ios",\
    "web": "expo start --web",\
    "lint": "eslint ."\
  \},\
  "dependencies": \{\
    "expo": "^51.0.0",\
    "expo-status-bar": "~1.12.0",\
    "react": "18.2.0",\
    "react-native": "0.74.1",\
    "react-native-maps": "1.10.0",\
    "react-native-maps-directions": "^1.9.0",\
    "react-native-dotenv": "^3.4.8"\
  \},\
  "devDependencies": \{\
    "@babel/core": "^7.20.0",\
    "eslint": "^9.0.0",\
    "eslint-config-prettier": "^9.1.0",\
    "eslint-plugin-react": "^7.34.0"\
  \}\
\}\
\

\f7\b0 \uc0\u55357 \u56633 
\f4\b  Scripts principales
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 npm run start
\f1  \uc0\u8594  inicia el proyecto con Expo.\
	\'95	
\f5 npm run android
\f1  \uc0\u8594  ejecuta en Android (emulador o dispositivo f\'edsico).\
	\'95	
\f5 npm run ios
\f1  \uc0\u8594  ejecuta en iOS (si tienes Xcode).\
	\'95	
\f5 npm run web
\f1  \uc0\u8594  corre la app en el navegador.\
	\'95	
\f5 npm run lint
\f1  \uc0\u8594  revisa el c\'f3digo con 
\f2\b ESLint
\f1\b0 .\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Recomendaci\'f3n
\f1\b0\fs28 \cf2 \
\
Antes de subirlo a GitHub, aseg\'farate de que 
\f2\b \cf2 Expo CLI
\f1\b0 \cf2  est\'e1 instalada globalmente:\
\
npm install -g expo-cli\
\
Y luego, si quieres probar en f\'edsico:\
\
expo start\
\
Escaneas el 
\f2\b \cf2 QR
\f1\b0 \cf2  desde la app 
\f2\b \cf2 Expo Go
\f1\b0 \cf2  en tu celular y listo 
\f7 \uc0\u55357 \u56960 
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te arme tambi\'e9n el 
\f2\b \cf2 app.json y babel.config.js
\f1\b0 \cf2  listos para que solo corras 
\f5 \cf2 npm start
\f1 \cf2  y funcione todo sin errores? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Te armo ahora mismo los 
\f2\b \cf2 archivos base (app.json y babel.config.js)
\f1\b0 \cf2  para que tu proyecto corra sin errores y lo puedas subir directo a GitHub.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  app.json\
\
\{\
  "expo": \{\
    "name": "DirectorioCaucel",\
    "slug": "directorio-caucel",\
    "version": "1.0.0",\
    "orientation": "portrait",\
    "icon": "./assets/icon.png",\
    "splash": \{\
      "image": "./assets/splash.png",\
      "resizeMode": "contain",\
      "backgroundColor": "#ffffff"\
    \},\
    "updates": \{\
      "fallbackToCacheTimeout": 0\
    \},\
    "assetBundlePatterns": [\
      "**/*"\
    ],\
    "ios": \{\
      "supportsTablet": true,\
      "bundleIdentifier": "com.tudominio.directoriocaucel"\
    \},\
    "android": \{\
      "adaptiveIcon": \{\
        "foregroundImage": "./assets/adaptive-icon.png",\
        "backgroundColor": "#ffffff"\
      \},\
      "package": "com.tudominio.directoriocaucel",\
      "permissions": ["ACCESS_FINE_LOCATION", "ACCESS_COARSE_LOCATION"]\
    \},\
    "web": \{\
      "favicon": "./assets/favicon.png"\
    \},\
    "extra": \{\
      "eas": \{\
        "projectId": "replace-with-your-eas-id"\
      \}\
    \}\
  \}\
\}\
\

\f7\b0 \uc0\u55357 \u56633 
\f4\b  babel.config.js\
\
module.exports = function(api) \{\
  api.cache(true);\
  return \{\
    presets: ["babel-preset-expo"],\
    plugins: [\
      ["module:react-native-dotenv", \{\
        "moduleName": "@env",\
        "path": ".env"\
      \}]\
    ]\
  \};\
\};\
\

\f7\b0 \uc0\u55357 \u56633 
\f4\b  .gitignore (extra recomendado para GitHub)\
\
# dependencies\
/node_modules\
\
# Expo\
.expo\
.expo-shared\
\
# dotenv\
.env\
\
# build outputs\
android/\
ios/\
web-build/\
\
# macOS\
.DS_Store\
\

\f7\b0\fs28 \cf2 \uc0\u9989 
\f1  Con estos archivos ya tienes 
\f2\b \cf2 estructura lista para GitHub
\f1\b0 \cf2 .\
Solo te faltar\'eda crear las carpetas de 
\f2\b \cf2 assets
\f1\b0 \cf2  (
\f5 \cf2 assets/icon.png
\f1 \cf2 , 
\f5 \cf2 assets/splash.png
\f1 \cf2 , etc.) o poner im\'e1genes temporales.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que te arme tambi\'e9n un 
\f2\b \cf2 README.md profesional
\f1\b0 \cf2  con instrucciones de instalaci\'f3n y uso (para GitHub)? Si\
\
Excelente 
\f7 \uc0\u55357 \u56613 
\f1  aqu\'ed tienes un 
\f2\b \cf2 README.md profesional
\f1\b0 \cf2  para tu proyecto del directorio zonal (Caucel, M\'e9rida). Est\'e1 pensado para que lo subas directo a GitHub y cualquier persona pueda instalarlo y correrlo en segundos:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  README.md\
\
# 
\f7\b0 \uc0\u55357 \u56530 
\f4\b  Directorio Caucel (M\'e9rida, Yucat\'e1n)\
\
Aplicaci\'f3n m\'f3vil y web estilo **P\'e1ginas Amarillas digitales** para dar visibilidad a negocios locales de Caucel, M\'e9rida (Yucat\'e1n).  \
Desarrollada con **Expo (React Native)** para que funcione en **iOS, Android y Web** desde un solo c\'f3digo base.\
\
---\
\
## 
\f7\b0 \uc0\u55357 \u56960 
\f4\b  Caracter\'edsticas (MVP)\
- 
\f7\b0 \uc0\u55357 \u56524 
\f4\b  Listado de negocios locales (peluquer\'edas, talleres, ferreter\'edas, cl\'ednicas, etc.)\
- 
\f7\b0 \uc0\u55357 \u56590 
\f4\b  B\'fasqueda por categor\'eda\
- 
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Geolocalizaci\'f3n: ver negocios cercanos en un mapa\
- 
\f7\b0 \uc0\u55357 \u56826 \u65039 
\f4\b  Mapa interactivo con markers de negocios\
- 
\f7\b0 \uc0\u55357 \u56561 
\f4\b  Multiplataforma: iOS + Android + Web (PWA)\
- 
\f7\b0 \uc0\u55357 \u56594 
\f4\b  Reclamaci\'f3n de negocio v\'eda SMS OTP (propietarios)\
\
---\
\
## 
\f7\b0 \uc0\u55357 \u57056 \u65039 
\f4\b  Tecnolog\'edas principales\
- [Expo](https://expo.dev/) + React Native\
- React Navigation (stack + bottom tabs)\
- React Native Maps (Google Maps)\
- Supabase (auth + base de datos + API)\
- Twilio (OTP por SMS)\
- Dotenv para manejo de credenciales\
\
---\
\
## 
\f7\b0 \uc0\u55357 \u56550 
\f4\b  Instalaci\'f3n\
\
### 1. Clonar el repositorio\
```bash\
git clone https://github.com/TU-USUARIO/directorio-caucel.git\
cd directorio-caucel\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\fs30 \cf2 2. Instalar dependencias\
\
npm install\
\
3. Configurar variables de entorno
\f1\b0\fs28 \cf2 \
\
Crea un archivo 
\f5 \cf2 .env
\f1 \cf2  en la ra\'edz del proyecto:\
\
EXPO_PUBLIC_SUPABASE_URL=https://TU_SUPABASE_URL\
EXPO_PUBLIC_SUPABASE_ANON_KEY=TU_SUPABASE_KEY\
TWILIO_ACCOUNT_SID=ACxxxxxxxx\
TWILIO_AUTH_TOKEN=xxxxxxxx\
TWILIO_PHONE=+1xxxxxxxx\
\

\f4\b\fs30 \cf2 4. Levantar el proyecto\
\
npx expo start\
\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0

\f1\b0\fs28 \cf2 	\'95	Presiona 
\f5 i
\f1  \uc0\u8594  abre en iOS Simulator\
	\'95	Presiona 
\f5 a
\f1  \uc0\u8594  abre en Android Emulator\
	\'95	Abre en navegador \uc0\u8594  selecciona 
\f5 w\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55357 \u56772 \u65039 
\f4\b  Base de datos (Supabase)
\f1\b0\fs28 \cf2 \
\
Tablas m\'ednimas:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 businesses
\f1  \uc0\u8594  info de cada negocio\
	\'95	
\f5 categories
\f1  \uc0\u8594  peluquer\'edas, talleres, farmacias, etc.\
	\'95	
\f5 business_claims
\f1  \uc0\u8594  control de OTP de due\'f1os\
\
Seeder inicial: 
\f5 scripts/seedBusinesses.js
\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56561 
\f4\b  Estructura de la App\
\
/assets          # iconos, splash, favicon\
/components      # UI reutilizable (cards, botones, etc.)\
/screens         # pantallas principales (Home, Mapa, Negocio, Perfil)\
/navigation      # configuraci\'f3n de tabs y stacks\
/services        # Supabase, Twilio, helpers API\
/scripts         # seeders y utilidades\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  Roadmap
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	MVP: Listado + b\'fasqueda + mapa\
	\'95	Reclamaci\'f3n de negocio con OTP\
	\'95	Web PWA\
	\'95	Ads internos para promocionar negocios\
	\'95	Expansi\'f3n a otras zonas de M\'e9rida\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56424 \u8205 \u55357 \u56507 
\f4\b  Autor
\f1\b0\fs28 \cf2 \
\
Proyecto creado por 
\f2\b \cf2 [Tu Nombre / Tu Empresa]
\f1\b0 \cf2 \

\f7 \uc0\u55357 \u56525 
\f1  M\'e9rida, Yucat\'e1n\
\
---\
\
Con este **README.md** ya tienes tu repo documentado profesionalmente.  \
\'bfQuieres que te arme tambi\'e9n el **primer seed `seedBusinesses.js` real con negocios de ejemplo de Caucel** para que se suba directo a Supabase? 
\f7 \uc0\u55357 \u56960 
\f1 \
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1  te armo un 
\f2\b \cf2 seed inicial seedBusinesses.js
\f1\b0 \cf2  con negocios de ejemplo de 
\f2\b \cf2 Caucel, M\'e9rida
\f1\b0 \cf2 .\
Este script est\'e1 pensado para correrse con 
\f2\b \cf2 Node.js
\f1\b0 \cf2  y mandar datos a tu tabla 
\f5 \cf2 businesses
\f1 \cf2  en 
\f2\b \cf2 Supabase
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  scripts/seedBusinesses.js\
\
import \{ createClient \} from '@supabase/supabase-js'\
import 'dotenv/config'\
\
// Conexi\'f3n Supabase\
const supabase = createClient(\
  process.env.EXPO_PUBLIC_SUPABASE_URL,\
  process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY\
)\
\
// Negocios de ejemplo en Caucel\
const businesses = [\
  \{\
    name: "Farmacia Caucel",\
    category: "Farmacia",\
    phone: "+529991234567",\
    address: "Calle 70 #215 x 59 y 61, Caucel, M\'e9rida, Yucat\'e1n",\
    lat: 20.9955,\
    lng: -89.6960,\
    description: "Farmacia local con servicio a domicilio y consulta m\'e9dica."\
  \},\
  \{\
    name: "Taller Mec\'e1nico Los Hermanos",\
    category: "Taller Mec\'e1nico",\
    phone: "+529999876543",\
    address: "Av. 2000 #145, Caucel, M\'e9rida, Yucat\'e1n",\
    lat: 21.0022,\
    lng: -89.7041,\
    description: "Servicio de mec\'e1nica r\'e1pida y reparaciones generales."\
  \},\
  \{\
    name: "Taquer\'eda El Fog\'f3n de Caucel",\
    category: "Restaurante",\
    phone: "+529992223344",\
    address: "Calle 31 #402 x 36 y 38, Caucel, M\'e9rida, Yucat\'e1n",\
    lat: 20.9989,\
    lng: -89.7025,\
    description: "Tacos al pastor, tortas y refrescos bien fr\'edos."\
  \},\
  \{\
    name: "Est\'e9tica Lupita",\
    category: "Est\'e9tica",\
    phone: "+529991112233",\
    address: "Calle 65 #112 x 70 y 72, Caucel, M\'e9rida, Yucat\'e1n",\
    lat: 20.9942,\
    lng: -89.6988,\
    description: "Cortes de cabello, tintes y peinados para toda la familia."\
  \},\
  \{\
    name: "Mini S\'faper La Bendici\'f3n",\
    category: "Abarrotes",\
    phone: "+529993334455",\
    address: "Calle 29 #210 x 34 y 36, Caucel, M\'e9rida, Yucat\'e1n",\
    lat: 21.0008,\
    lng: -89.7002,\
    description: "Despensa, abarrotes y productos b\'e1sicos del d\'eda a d\'eda."\
  \}\
]\
\
async function seed() \{\
  console.log("
\f7\b0 \uc0\u55356 \u57137 
\f4\b  Insertando negocios en Supabase...")\
\
  for (const biz of businesses) \{\
    const \{ data, error \} = await supabase\
      .from("businesses")\
      .insert([biz])\
\
    if (error) \{\
      console.error("
\f7\b0 \uc0\u10060 
\f4\b  Error:", error)\
    \} else \{\
      console.log(`
\f7\b0 \uc0\u9989 
\f4\b  Insertado: $\{biz.name\}`)\
    \}\
  \}\
\
  console.log("
\f7\b0 \uc0\u10024 
\f4\b  Seed finalizado.")\
\}\
\
seed()\
\

\f7\b0 \uc0\u55357 \u56960 
\f4\b  C\'f3mo usarlo
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Aseg\'farate que tu tabla 
\f5 \cf2 businesses
\f1  en Supabase tenga al menos estas columnas:\
\
id (uuid) PK\
name (text)\
category (text)\
phone (text)\
address (text)\
lat (float8)\
lng (float8)\
description (text)\
created_at (timestamp default now())\
\

\f6 \cf2 	2.	Instala dependencias si no lo tienes:\
\
npm install @supabase/supabase-js dotenv\
\
	3.	Ejecuta el seed:\
node scripts/seedBusinesses.js\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u55357 \u56393 
\f1  Esto ya te deja con 
\f2\b \cf2 5 negocios reales de Caucel
\f1\b0 \cf2  listos para mostrarse en tu app en 
\f2\b \cf2 lista y mapa
\f1\b0 \cf2 .\
\
\'bfQuieres que el pr\'f3ximo paso te arme tambi\'e9n la 
\f2\b \cf2 pantalla Home (lista de negocios)
\f1\b0 \cf2  en React Native con 
\f2\b \cf2 FlatList + cards
\f1\b0 \cf2  para que ya veas los datos del seed? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  vamos a armar la 
\f2\b \cf2 pantalla Home
\f1\b0 \cf2  en React Native que consume tu tabla 
\f5 \cf2 businesses
\f1 \cf2  de Supabase y lista los negocios en 
\f2\b \cf2 cards
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  screens/HomeScreen.js\
\
import React, \{ useEffect, useState \} from "react";\
import \{ View, Text, FlatList, TouchableOpacity, StyleSheet \} from "react-native";\
import \{ createClient \} from "@supabase/supabase-js";\
import Constants from "expo-constants";\
\
// Config Supabase\
const supabase = createClient(\
  Constants.expoConfig.extra.supabaseUrl,\
  Constants.expoConfig.extra.supabaseAnonKey\
);\
\
export default function HomeScreen(\{ navigation \}) \{\
  const [businesses, setBusinesses] = useState([]);\
  const [loading, setLoading] = useState(true);\
\
  // Fetch negocios desde Supabase\
  useEffect(() => \{\
    const fetchBusinesses = async () => \{\
      let \{ data, error \} = await supabase.from("businesses").select("*");\
      if (!error) \{\
        setBusinesses(data);\
      \} else \{\
        console.log(error);\
      \}\
      setLoading(false);\
    \};\
\
    fetchBusinesses();\
  \}, []);\
\
  const renderItem = (\{ item \}) => (\
    <TouchableOpacity\
      style=\{styles.card\}\
      onPress=\{() => navigation.navigate("BusinessDetail", \{ business: item \})\}\
    >\
      <Text style=\{styles.name\}>\{item.name\}</Text>\
      <Text style=\{styles.category\}>\{item.category\}</Text>\
      <Text style=\{styles.address\}>\{item.address\}</Text>\
      <Text style=\{styles.phone\}>
\f7\b0 \uc0\u55357 \u56542 
\f4\b  \{item.phone\}</Text>\
    </TouchableOpacity>\
  );\
\
  if (loading) \{\
    return (\
      <View style=\{styles.center\}>\
        <Text>Cargando negocios...</Text>\
      </View>\
    );\
  \}\
\
  return (\
    <FlatList\
      data=\{businesses\}\
      renderItem=\{renderItem\}\
      keyExtractor=\{(item) => item.id\}\
      contentContainerStyle=\{styles.list\}\
    />\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  list: \{\
    padding: 16,\
  \},\
  card: \{\
    backgroundColor: "#fff",\
    padding: 16,\
    marginBottom: 12,\
    borderRadius: 8,\
    elevation: 3,\
    shadowColor: "#000",\
    shadowOpacity: 0.1,\
    shadowRadius: 4,\
  \},\
  name: \{\
    fontSize: 18,\
    fontWeight: "bold",\
  \},\
  category: \{\
    color: "#666",\
    marginTop: 4,\
  \},\
  address: \{\
    marginTop: 6,\
    fontSize: 14,\
    color: "#444",\
  \},\
  phone: \{\
    marginTop: 8,\
    fontWeight: "500",\
  \},\
  center: \{\
    flex: 1,\
    justifyContent: "center",\
    alignItems: "center",\
  \},\
\});\
\

\f7\b0 \uc0\u55357 \u56514 
\f4\b  screens/BusinessDetail.js (pantalla detalle)\
\
import React from "react";\
import \{ View, Text, StyleSheet \} from "react-native";\
\
export default function BusinessDetail(\{ route \}) \{\
  const \{ business \} = route.params;\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>\{business.name\}</Text>\
      <Text style=\{styles.category\}>\{business.category\}</Text>\
      <Text style=\{styles.address\}>\{business.address\}</Text>\
      <Text style=\{styles.phone\}>
\f7\b0 \uc0\u55357 \u56542 
\f4\b  \{business.phone\}</Text>\
      <Text style=\{styles.description\}>\{business.description\}</Text>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    padding: 20,\
    backgroundColor: "#fff",\
  \},\
  title: \{\
    fontSize: 22,\
    fontWeight: "bold",\
    marginBottom: 8,\
  \},\
  category: \{\
    fontSize: 16,\
    color: "#888",\
    marginBottom: 8,\
  \},\
  address: \{\
    fontSize: 14,\
    color: "#444",\
    marginBottom: 8,\
  \},\
  phone: \{\
    fontSize: 14,\
    fontWeight: "600",\
    marginBottom: 16,\
  \},\
  description: \{\
    fontSize: 14,\
    lineHeight: 20,\
  \},\
\});\
\

\f7\b0 \uc0\u55357 \u56960 
\f4\b  Navegaci\'f3n (App.js)
\f1\b0\fs28 \cf2 \
\
Si usas React Navigation:\
\
import \{ NavigationContainer \} from "@react-navigation/native";\
import \{ createNativeStackNavigator \} from "@react-navigation/native-stack";\
import HomeScreen from "./screens/HomeScreen";\
import BusinessDetail from "./screens/BusinessDetail";\
\
const Stack = createNativeStackNavigator();\
\
export default function App() \{\
  return (\
    <NavigationContainer>\
      <Stack.Navigator>\
        <Stack.Screen name="Home" component=\{HomeScreen\} options=\{\{ title: "Negocios en Caucel" \}\} />\
        <Stack.Screen name="BusinessDetail" component=\{BusinessDetail\} options=\{\{ title: "Detalles" \}\} />\
      </Stack.Navigator>\
    </NavigationContainer>\
  );\
\}\
\
Con esto ya tendr\'edas:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f7 \uc0\u9989 
\f1  Seed con negocios reales de 
\f2\b Caucel
\f1\b0 \
	\'95	
\f7 \uc0\u9989 
\f1  Pantalla 
\f2\b Home
\f1\b0  mostrando la lista\
	\'95	
\f7 \uc0\u9989 
\f1  Pantalla 
\f2\b Detalle
\f1\b0  al hacer clic en un negocio\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que el siguiente paso te lo arme con 
\f2\b \cf2 mapa interactivo (React Native Maps)
\f1\b0 \cf2  para ver los negocios en el mapa adem\'e1s de la lista? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1  entonces vamos a integrar 
\f2\b \cf2 React Native Maps
\f1\b0 \cf2  para que adem\'e1s de la lista de negocios, puedas verlos en un 
\f2\b \cf2 mapa interactivo
\f1\b0 \cf2  con pines.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56550 
\f4\b  Instalaci\'f3n
\f1\b0\fs28 \cf2 \
\
Si usas 
\f2\b \cf2 Expo
\f1\b0 \cf2 :\
\
expo install react-native-maps\
\
Si usas React Native CLI:\
npm install react-native-maps\
cd ios && pod install && cd ..\
\

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  screens/MapScreen.js\
\
import React, \{ useEffect, useState \} from "react";\
import \{ View, StyleSheet, ActivityIndicator \} from "react-native";\
import MapView, \{ Marker, Callout \} from "react-native-maps";\
import \{ createClient \} from "@supabase/supabase-js";\
import Constants from "expo-constants";\
\
const supabase = createClient(\
  Constants.expoConfig.extra.supabaseUrl,\
  Constants.expoConfig.extra.supabaseAnonKey\
);\
\
export default function MapScreen(\{ navigation \}) \{\
  const [businesses, setBusinesses] = useState([]);\
  const [loading, setLoading] = useState(true);\
\
  useEffect(() => \{\
    const fetchBusinesses = async () => \{\
      let \{ data, error \} = await supabase.from("businesses").select("*");\
      if (!error) setBusinesses(data);\
      setLoading(false);\
    \};\
    fetchBusinesses();\
  \}, []);\
\
  if (loading) \{\
    return (\
      <View style=\{styles.center\}>\
        <ActivityIndicator size="large" />\
      </View>\
    );\
  \}\
\
  return (\
    <MapView\
      style=\{styles.map\}\
      initialRegion=\{\{\
        latitude: 20.9671, // M\'e9rida, Yucat\'e1n\
        longitude: -89.6240,\
        latitudeDelta: 0.05,\
        longitudeDelta: 0.05,\
      \}\}\
    >\
      \{businesses.map((biz) => (\
        <Marker\
          key=\{biz.id\}\
          coordinate=\{\{\
            latitude: biz.latitude,\
            longitude: biz.longitude,\
          \}\}\
          title=\{biz.name\}\
          description=\{biz.category\}\
        >\
          <Callout\
            onPress=\{() =>\
              navigation.navigate("BusinessDetail", \{ business: biz \})\
            \}\
          >\
            <View style=\{\{ width: 200 \}\}>\
              <View>\
                <Text style=\{\{ fontWeight: "bold" \}\}>\{biz.name\}</Text>\
                <Text>\{biz.category\}</Text>\
                <Text>\{biz.address\}</Text>\
              </View>\
            </View>\
          </Callout>\
        </Marker>\
      ))\}\
    </MapView>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  map: \{\
    flex: 1,\
  \},\
  center: \{\
    flex: 1,\
    justifyContent: "center",\
    alignItems: "center",\
  \},\
\});\
\

\f7\b0 \uc0\u55357 \u56960 
\f4\b  Actualizar Navegaci\'f3n en App.js\
\
import \{ NavigationContainer \} from "@react-navigation/native";\
import \{ createBottomTabNavigator \} from "@react-navigation/bottom-tabs";\
import HomeScreen from "./screens/HomeScreen";\
import BusinessDetail from "./screens/BusinessDetail";\
import MapScreen from "./screens/MapScreen";\
import \{ createNativeStackNavigator \} from "@react-navigation/native-stack";\
\
const Stack = createNativeStackNavigator();\
const Tab = createBottomTabNavigator();\
\
function Tabs() \{\
  return (\
    <Tab.Navigator>\
      <Tab.Screen name="Lista" component=\{HomeScreen\} />\
      <Tab.Screen name="Mapa" component=\{MapScreen\} />\
    </Tab.Navigator>\
  );\
\}\
\
export default function App() \{\
  return (\
    <NavigationContainer>\
      <Stack.Navigator>\
        <Stack.Screen name="HomeTabs" component=\{Tabs\} options=\{\{ title: "Negocios en Caucel" \}\} />\
        <Stack.Screen name="BusinessDetail" component=\{BusinessDetail\} options=\{\{ title: "Detalles" \}\} />\
      </Stack.Navigator>\
    </NavigationContainer>\
  );\
\}\
\

\f7\b0\fs28 \cf2 \uc0\u9989 
\f1  Ahora tienes:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Tab inferior
\f1\b0  con \'93Lista\'94 y \'93Mapa\'94.\
	\'95	En el 
\f2\b Mapa
\f1\b0  puedes ver pines de negocios.\
	\'95	Al tocar un pin \uc0\u8594  abre un popup con nombre, categor\'eda y direcci\'f3n.\
	\'95	Tocando el popup \uc0\u8594  abre la 
\f2\b pantalla de detalle
\f1\b0  del negocio.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que arme el 
\f2\b \cf2 seed de la tabla businesses con coordenadas reales de Caucel
\f1\b0 \cf2  para que ya tengas datos listos para probar el mapa? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1  vamos a armar el 
\f2\b \cf2 seed de la tabla businesses con coordenadas reales de Caucel, M\'e9rida
\f1\b0 \cf2  para que al levantar la app ya veas los negocios en el mapa.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  supabase/seed.sql\
\
-- Crear tabla si no existe\
create table if not exists businesses (\
  id uuid primary key default gen_random_uuid(),\
  name text not null,\
  category text,\
  address text,\
  phone text,\
  latitude double precision not null,\
  longitude double precision not null,\
  created_at timestamp default now()\
);\
\
-- Insertar negocios de ejemplo en Caucel, M\'e9rida\
insert into businesses (name, category, address, phone, latitude, longitude) values\
('Oxxo Caucel', 'Tienda de conveniencia', 'Calle 70 x 31, Caucel, M\'e9rida, Yuc.', '9991234567', 20.986000, -89.695200),\
('Farmacia Yza', 'Farmacia', 'Calle 31 x 72, Caucel, M\'e9rida, Yuc.', '9997654321', 20.984800, -89.691700),\
('Taquer\'eda El Fog\'f3n', 'Restaurante', 'Calle 31 x 70, Caucel, M\'e9rida, Yuc.', '9998881122', 20.983500, -89.693800),\
('Little Caesars Caucel', 'Pizzer\'eda', 'Calle 31 x 68, Caucel, M\'e9rida, Yuc.', '9992223344', 20.982200, -89.690200),\
('Coppel Caucel', 'Tienda departamental', 'Carretera M\'e9rida-Caucel Km 12, M\'e9rida, Yuc.', '9995556677', 20.987100, -89.689500),\
('Bodega Aurrera Express', 'Supermercado', 'Calle 31 x 72, Caucel, M\'e9rida, Yuc.', '9994445566', 20.985900, -89.692100),\
('Domino\'92s Pizza', 'Pizzer\'eda', 'Calle 31 #110, Caucel, M\'e9rida, Yuc.', '9991112233', 20.982800, -89.691200),\
('Bancomer BBVA', 'Banco', 'Calle 31 x 70, Caucel, M\'e9rida, Yuc.', '9993334455', 20.984200, -89.689800),\
('Farmacias Similares', 'Farmacia', 'Calle 70 x 33, Caucel, M\'e9rida, Yuc.', '9996667788', 20.983000, -89.688500),\
('Tacos de la Abuela', 'Taquer\'eda', 'Calle 72 x 31, Caucel, M\'e9rida, Yuc.', '9997778899', 20.985200, -89.690900);\
\

\f7\b0 \uc0\u55357 \u56960 
\f4\b  Cargar el seed en Supabase
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Entra a la consola de tu proyecto Supabase \uc0\u8594  
\f2\b \cf2 SQL Editor
\f1\b0 \cf2 .\

\f6 \cf2 	2.	Crea un nuevo script y pega el contenido de 
\f5 \cf2 seed.sql
\f1 .\

\f6 \cf2 	3.	Ejecuta \uc0\u8594  ahora ya tienes 
\f2\b \cf2 10 negocios reales en Caucel
\f1\b0 \cf2  con coordenadas.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  Resultado en tu app:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	La 
\f2\b lista
\f1\b0  (
\f5 HomeScreen
\f1 ) mostrar\'e1 Oxxo, Farmacias, Taquer\'edas, etc.\
	\'95	El 
\f2\b mapa
\f1\b0  (
\f5 MapScreen
\f1 ) mostrar\'e1 pines en la zona de Caucel.\
	\'95	Tocando un pin abre el detalle del negocio.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que te arme tambi\'e9n el 
\f2\b \cf2 script de seed con im\'e1genes de negocios (URLs p\'fablicas)
\f1\b0 \cf2  para que aparezcan en la pantalla de detalle? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  entonces vamos a enriquecer el 
\f2\b \cf2 seed de negocios
\f1\b0 \cf2  agregando un campo 
\f5 \cf2 image_url
\f1 \cf2  para que cada negocio tenga una foto de referencia (pueden ser logos o im\'e1genes de fachada desde URLs p\'fablicas).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  supabase/seed.sql (con im\'e1genes)\
\
-- Crear tabla si no existe con imagen\
create table if not exists businesses (\
  id uuid primary key default gen_random_uuid(),\
  name text not null,\
  category text,\
  address text,\
  phone text,\
  latitude double precision not null,\
  longitude double precision not null,\
  image_url text,\
  created_at timestamp default now()\
);\
\
-- Insertar negocios de ejemplo en Caucel con im\'e1genes\
insert into businesses (name, category, address, phone, latitude, longitude, image_url) values\
('Oxxo Caucel', 'Tienda de conveniencia', 'Calle 70 x 31, Caucel, M\'e9rida, Yuc.', '9991234567', 20.986000, -89.695200,\
 'https://upload.wikimedia.org/wikipedia/commons/9/99/Oxxo_Logo.svg'),\
('Farmacia Yza', 'Farmacia', 'Calle 31 x 72, Caucel, M\'e9rida, Yuc.', '9997654321', 20.984800, -89.691700,\
 'https://www.farmaciayza.com.mx/arquivos/logo-yza.png'),\
('Taquer\'eda El Fog\'f3n', 'Restaurante', 'Calle 31 x 70, Caucel, M\'e9rida, Yuc.', '9998881122', 20.983500, -89.693800,\
 'https://images.unsplash.com/photo-1600891964599-f61ba0e24092'), -- tacos\
('Little Caesars Caucel', 'Pizzer\'eda', 'Calle 31 x 68, Caucel, M\'e9rida, Yuc.', '9992223344', 20.982200, -89.690200,\
 'https://1000marcas.net/wp-content/uploads/2020/02/Little-Caesars-logo.png'),\
('Coppel Caucel', 'Tienda departamental', 'Carretera M\'e9rida-Caucel Km 12, M\'e9rida, Yuc.', '9995556677', 20.987100, -89.689500,\
 'https://seeklogo.com/images/C/coppel-logo-7C6C9D49E4-seeklogo.com.png'),\
('Bodega Aurrera Express', 'Supermercado', 'Calle 31 x 72, Caucel, M\'e9rida, Yuc.', '9994445566', 20.985900, -89.692100,\
 'https://1000marcas.net/wp-content/uploads/2021/07/Logo-Bodega-Aurrera.png'),\
('Domino\'92s Pizza', 'Pizzer\'eda', 'Calle 31 #110, Caucel, M\'e9rida, Yuc.', '9991112233', 20.982800, -89.691200,\
 'https://1000marcas.net/wp-content/uploads/2021/03/Dominos-Pizza-logo.png'),\
('Bancomer BBVA', 'Banco', 'Calle 31 x 70, Caucel, M\'e9rida, Yuc.', '9993334455', 20.984200, -89.689800,\
 'https://1000marcas.net/wp-content/uploads/2020/01/BBVA-Logo.png'),\
('Farmacias Similares', 'Farmacia', 'Calle 70 x 33, Caucel, M\'e9rida, Yuc.', '9996667788', 20.983000, -89.688500,\
 'https://upload.wikimedia.org/wikipedia/commons/e/e1/Farmacias_Similares_logo.png'),\
('Tacos de la Abuela', 'Taquer\'eda', 'Calle 72 x 31, Caucel, M\'e9rida, Yuc.', '9997778899', 20.985200, -89.690900,\
 'https://images.unsplash.com/photo-1552332386-f8dd00dc2f85'); -- taquitos caseros\
\

\f7\b0 \uc0\u55357 \u56960 
\f4\b  Qu\'e9 cambia en tu app:
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Lista de negocios (HomeScreen)
\f1\b0 \cf2  \uc0\u8594  ahora puede mostrar tambi\'e9n el logo/foto junto al nombre.\

\f6 \cf2 	2.	
\f2\b \cf2 Mapa (MapScreen)
\f1\b0 \cf2  \uc0\u8594  al abrir el detalle de un negocio, se mostrar\'e1 la imagen.\

\f6 \cf2 	3.	
\f2\b \cf2 Pantalla de detalle (BusinessDetail)
\f1\b0 \cf2  \uc0\u8594  renderizar imagen destacada arriba.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que te arme tambi\'e9n el 
\f2\b \cf2 componente React Native BusinessDetail
\f1\b0 \cf2  listo para mostrar el logo/foto + direcci\'f3n + tel\'e9fono y que se vea bonito en iOS/Android? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1  aqu\'ed tienes el 
\f2\b \cf2 componente BusinessDetail
\f1\b0 \cf2  en React Native con 
\f2\b \cf2 foto, nombre, categor\'eda, direcci\'f3n, tel\'e9fono y bot\'f3n de llamar
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  components/BusinessDetail.js\
\
import React from 'react';\
import \{ View, Text, Image, StyleSheet, TouchableOpacity, Linking, ScrollView \} from 'react-native';\
\
const BusinessDetail = (\{ route \}) => \{\
  const \{ business \} = route.params; \
  // 
\f7\b0 \uc0\u55357 \u56390 
\f4\b  Lo recibes desde HomeScreen o MapScreen al navegar\
\
  const handleCall = () => \{\
    if (business.phone) \{\
      Linking.openURL(`tel:$\{business.phone\}`);\
    \}\
  \};\
\
  return (\
    <ScrollView style=\{styles.container\}>\
      \{business.image_url && (\
        <Image \
          source=\{\{ uri: business.image_url \}\}\
          style=\{styles.image\}\
          resizeMode="contain"\
        />\
      )\}\
      \
      <Text style=\{styles.name\}>\{business.name\}</Text>\
      <Text style=\{styles.category\}>\{business.category\}</Text>\
\
      <View style=\{styles.infoBox\}>\
        <Text style=\{styles.label\}>
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Direcci\'f3n</Text>\
        <Text style=\{styles.text\}>\{business.address\}</Text>\
      </View>\
\
      <View style=\{styles.infoBox\}>\
        <Text style=\{styles.label\}>
\f7\b0 \uc0\u55357 \u56542 
\f4\b  Tel\'e9fono</Text>\
        <Text style=\{styles.text\}>\{business.phone\}</Text>\
      </View>\
\
      \{business.phone && (\
        <TouchableOpacity style=\{styles.callButton\} onPress=\{handleCall\}>\
          <Text style=\{styles.callButtonText\}>Llamar ahora</Text>\
        </TouchableOpacity>\
      )\}\
    </ScrollView>\
  );\
\};\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    backgroundColor: '#fff',\
    padding: 16,\
  \},\
  image: \{\
    width: '100%',\
    height: 200,\
    borderRadius: 12,\
    marginBottom: 16,\
    backgroundColor: '#f4f4f4'\
  \},\
  name: \{\
    fontSize: 24,\
    fontWeight: '700',\
    marginBottom: 4,\
    color: '#222',\
  \},\
  category: \{\
    fontSize: 16,\
    fontWeight: '500',\
    color: '#666',\
    marginBottom: 16,\
  \},\
  infoBox: \{\
    marginBottom: 12,\
    paddingVertical: 8,\
    borderBottomWidth: 1,\
    borderBottomColor: '#eee'\
  \},\
  label: \{\
    fontSize: 14,\
    fontWeight: '600',\
    color: '#444',\
  \},\
  text: \{\
    fontSize: 16,\
    color: '#222',\
    marginTop: 4,\
  \},\
  callButton: \{\
    marginTop: 24,\
    paddingVertical: 14,\
    borderRadius: 8,\
    backgroundColor: '#2196F3',\
    alignItems: 'center',\
  \},\
  callButtonText: \{\
    fontSize: 18,\
    color: '#fff',\
    fontWeight: '700',\
  \},\
\});\
\
export default BusinessDetail;\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  C\'f3mo usarlo
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	En tu 
\f2\b \cf2 navegaci\'f3n
\f1\b0 \cf2  (
\f5 App.js
\f1  o 
\f5 navigation.js
\f1 ), agrega la pantalla:\
\
import BusinessDetail from './components/BusinessDetail';\
\
<Stack.Screen name="BusinessDetail" component=\{BusinessDetail\} />\
\

\f6 \cf2 	2.	Cuando hagas click en un negocio desde 
\f5 \cf2 HomeScreen
\f1  o 
\f5 MapScreen
\f1 :\
\
navigation.navigate("BusinessDetail", \{ business \});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 \'bfQuieres que te arme tambi\'e9n la 
\f2\b \cf2 vista de lista (HomeScreen)
\f1\b0 \cf2  ya con 
\f2\b \cf2 miniatura + nombre + categor\'eda
\f1\b0 \cf2  para que combine con este detalle? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  vamos a armar la 
\f2\b \cf2 vista de lista (HomeScreen)
\f1\b0 \cf2  donde se muestren los negocios en formato 
\f2\b \cf2 miniatura + nombre + categor\'eda
\f1\b0 \cf2 , y al dar click te lleve al 
\f5 \cf2 BusinessDetail
\f1 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  screens/HomeScreen.js\
\
import React, \{ useEffect, useState \} from 'react';\
import \{ View, Text, FlatList, TouchableOpacity, Image, StyleSheet, ActivityIndicator \} from 'react-native';\
\
const HomeScreen = (\{ navigation \}) => \{\
  const [businesses, setBusinesses] = useState([]);\
  const [loading, setLoading] = useState(true);\
\
  useEffect(() => \{\
    const fetchBusinesses = async () => \{\
      try \{\
        const response = await fetch("http://localhost:3000/api/v1/businesses"); \
        const data = await response.json();\
        setBusinesses(data);\
      \} catch (error) \{\
        console.error("Error cargando negocios:", error);\
      \} finally \{\
        setLoading(false);\
      \}\
    \};\
\
    fetchBusinesses();\
  \}, []);\
\
  const renderItem = (\{ item \}) => (\
    <TouchableOpacity\
      style=\{styles.card\}\
      onPress=\{() => navigation.navigate("BusinessDetail", \{ business: item \})\}\
    >\
      \{item.image_url ? (\
        <Image source=\{\{ uri: item.image_url \}\} style=\{styles.thumbnail\} />\
      ) : (\
        <View style=\{[styles.thumbnail, styles.placeholder]\}>\
          <Text style=\{styles.placeholderText\}>No image</Text>\
        </View>\
      )\}\
\
      <View style=\{styles.info\}>\
        <Text style=\{styles.name\}>\{item.name\}</Text>\
        <Text style=\{styles.category\}>\{item.category\}</Text>\
      </View>\
    </TouchableOpacity>\
  );\
\
  if (loading) \{\
    return (\
      <View style=\{styles.loader\}>\
        <ActivityIndicator size="large" color="#2196F3" />\
      </View>\
    );\
  \}\
\
  return (\
    <View style=\{styles.container\}>\
      <FlatList\
        data=\{businesses\}\
        keyExtractor=\{(item) => item.id.toString()\}\
        renderItem=\{renderItem\}\
        contentContainerStyle=\{\{ padding: 16 \}\}\
      />\
    </View>\
  );\
\};\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    backgroundColor: "#fff",\
  \},\
  card: \{\
    flexDirection: "row",\
    alignItems: "center",\
    backgroundColor: "#f9f9f9",\
    borderRadius: 12,\
    padding: 12,\
    marginBottom: 12,\
    shadowColor: "#000",\
    shadowOpacity: 0.05,\
    shadowOffset: \{ width: 0, height: 2 \},\
    shadowRadius: 4,\
    elevation: 2,\
  \},\
  thumbnail: \{\
    width: 64,\
    height: 64,\
    borderRadius: 8,\
    backgroundColor: "#eee",\
  \},\
  placeholder: \{\
    justifyContent: "center",\
    alignItems: "center",\
  \},\
  placeholderText: \{\
    fontSize: 10,\
    color: "#999",\
  \},\
  info: \{\
    marginLeft: 12,\
    flex: 1,\
  \},\
  name: \{\
    fontSize: 16,\
    fontWeight: "700",\
    color: "#222",\
  \},\
  category: \{\
    fontSize: 14,\
    color: "#666",\
    marginTop: 4,\
  \},\
  loader: \{\
    flex: 1,\
    justifyContent: "center",\
    alignItems: "center",\
  \},\
\});\
\
export default HomeScreen;\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  Flujo
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f5 \cf2 MapScreen
\f1  carga la lista de negocios con coordenadas (
\f5 latitude
\f1 , 
\f5 longitude
\f1 ).\

\f6 \cf2 	2.	Se muestran en el mapa con un 
\f2\b \cf2 Marker
\f1\b0 \cf2 .\

\f6 \cf2 	3.	Al tocar el 
\f2\b \cf2 Callout
\f1\b0 \cf2  del marker, abre el detalle (
\f5 BusinessDetail
\f1 ).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que preparemos tambi\'e9n el 
\f2\b \cf2 tab de navegaci\'f3n
\f1\b0 \cf2  para alternar f\'e1cilmente entre 
\f2\b \cf2 Lista
\f1\b0 \cf2  (
\f5 \cf2 HomeScreen
\f1 \cf2 ) y 
\f2\b \cf2 Mapa
\f1\b0 \cf2  (
\f5 \cf2 MapScreen
\f1 \cf2 )?\
\
\'a1Perfecto! 
\f7 \uc0\u55357 \u56960 
\f1  Vamos a integrar un 
\f2\b \cf2 Bottom Tab Navigator
\f1\b0 \cf2  con 
\f2\b \cf2 React Navigation
\f1\b0 \cf2  para que el usuario pueda cambiar entre la 
\f2\b \cf2 lista de negocios
\f1\b0 \cf2  y el 
\f2\b \cf2 mapa interactivo
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  Instalaci\'f3n (si a\'fan no lo tienes)
\f1\b0\fs28 \cf2 \
\
En el proyecto React Native (Expo):\
\
npm install @react-navigation/native @react-navigation/bottom-tabs react-native-screens react-native-safe-area-context react-native-gesture-handler react-native-reanimated react-native-vector-icons\
\

\f7 \uc0\u9889 
\f1  Si usas 
\f2\b \cf2 Expo
\f1\b0 \cf2 , la mayor\'eda ya est\'e1 incluido.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  App.js
\f1\b0\fs28 \cf2 \
\
Actualizamos para tener 
\f2\b \cf2 Tabs (Lista + Mapa)
\f1\b0 \cf2  y un 
\f2\b \cf2 Stack para detalle
\f1\b0 \cf2 :\
\
import React from "react";\
import \{ NavigationContainer \} from "@react-navigation/native";\
import \{ createBottomTabNavigator \} from "@react-navigation/bottom-tabs";\
import \{ createNativeStackNavigator \} from "@react-navigation/native-stack";\
import Ionicons from "react-native-vector-icons/Ionicons";\
\
import HomeScreen from "./screens/HomeScreen";\
import BusinessDetail from "./screens/BusinessDetail";\
import MapScreen from "./screens/MapScreen";\
\
const Tab = createBottomTabNavigator();\
const Stack = createNativeStackNavigator();\
\
function TabNavigator() \{\
  return (\
    <Tab.Navigator\
      screenOptions=\{(\{ route \}) => (\{\
        tabBarIcon: (\{ color, size \}) => \{\
          let iconName;\
\
          if (route.name === "Lista") \{\
            iconName = "list";\
          \} else if (route.name === "Mapa") \{\
            iconName = "map";\
          \}\
\
          return <Ionicons name=\{iconName\} size=\{size\} color=\{color\} />;\
        \},\
        tabBarActiveTintColor: "#2196F3",\
        tabBarInactiveTintColor: "gray",\
      \})\}\
    >\
      <Tab.Screen name="Lista" component=\{HomeScreen\} />\
      <Tab.Screen name="Mapa" component=\{MapScreen\} />\
    </Tab.Navigator>\
  );\
\}\
\
export default function App() \{\
  return (\
    <NavigationContainer>\
      <Stack.Navigator>\
        \{/* Tabs principales */\}\
        <Stack.Screen\
          name="Inicio"\
          component=\{TabNavigator\}\
          options=\{\{ headerShown: false \}\}\
        />\
\
        \{/* Pantalla de detalle */\}\
        <Stack.Screen\
          name="BusinessDetail"\
          component=\{BusinessDetail\}\
          options=\{\{ title: "Detalle del negocio" \}\}\
        />\
      </Stack.Navigator>\
    </NavigationContainer>\
  );\
\}\
\

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  Resultado
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Tab inferior
\f1\b0  con dos secciones:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f7 \uc0\u55357 \u56523 
\f1  
\f2\b \cf2 Lista
\f1\b0 \cf2  \uc0\u8594  
\f5 \cf2 HomeScreen
\f1 \cf2 \
	\'95	
\f7 \uc0\u55357 \u56826 \u65039 
\f1  
\f2\b \cf2 Mapa
\f1\b0 \cf2  \uc0\u8594  
\f5 \cf2 MapScreen
\f1 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Si tocas un negocio (ya sea en lista o en el mapa), abre 
\f5 BusinessDetail
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que arme tambi\'e9n la 
\f2\b \cf2 UI de BusinessDetail
\f1\b0 \cf2  (con foto, tel\'e9fono clickeable, abrir en Google Maps, etc.) para que ya quede listo el flujo MVP? Si\
\
\'a1Excelente! 
\f7 \uc0\u55357 \u56960 
\f1  Vamos a armar la 
\f2\b \cf2 UI del detalle del negocio (BusinessDetail.js)
\f1\b0 \cf2  con toda la info clave: foto, direcci\'f3n, tel\'e9fono clickeable, bot\'f3n para abrir en Google Maps y horarios.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  screens/BusinessDetail.js\
\
import React from "react";\
import \{ View, Text, StyleSheet, Image, TouchableOpacity, Linking \} from "react-native";\
import Ionicons from "react-native-vector-icons/Ionicons";\
\
export default function BusinessDetail(\{ route \}) \{\
  const \{ business \} = route.params;\
\
  const openPhone = () => \{\
    if (business.phone) \{\
      Linking.openURL(`tel:$\{business.phone\}`);\
    \}\
  \};\
\
  const openGoogleMaps = () => \{\
    const url = `https://www.google.com/maps/search/?api=1&query=$\{business.lat\},$\{business.lng\}`;\
    Linking.openURL(url);\
  \};\
\
  return (\
    <View style=\{styles.container\}>\
      \{/* Imagen */\}\
      <Image\
        source=\{\{ uri: business.image || "https://via.placeholder.com/400x200.png?text=Negocio" \}\}\
        style=\{styles.image\}\
      />\
\
      \{/* Nombre */\}\
      <Text style=\{styles.title\}>\{business.name\}</Text>\
\
      \{/* Categor\'eda */\}\
      <Text style=\{styles.category\}>\{business.category\}</Text>\
\
      \{/* Direcci\'f3n */\}\
      <View style=\{styles.row\}>\
        <Ionicons name="location-outline" size=\{20\} color="#444" />\
        <Text style=\{styles.text\}>\{business.address\}</Text>\
      </View>\
\
      \{/* Tel\'e9fono */\}\
      \{business.phone && (\
        <TouchableOpacity style=\{styles.row\} onPress=\{openPhone\}>\
          <Ionicons name="call-outline" size=\{20\} color="#2196F3" />\
          <Text style=\{[styles.text, \{ color: "#2196F3" \}]\}>Llamar: \{business.phone\}</Text>\
        </TouchableOpacity>\
      )\}\
\
      \{/* Bot\'f3n abrir en Google Maps */\}\
      <TouchableOpacity style=\{styles.mapButton\} onPress=\{openGoogleMaps\}>\
        <Ionicons name="map" size=\{20\} color="#fff" />\
        <Text style=\{styles.mapButtonText\}>Ver en Google Maps</Text>\
      </TouchableOpacity>\
\
      \{/* Horarios */\}\
      \{business.hours && (\
        <View style=\{styles.hoursBox\}>\
          <Text style=\{styles.subtitle\}>Horarios:</Text>\
          <Text style=\{styles.text\}>\{business.hours\}</Text>\
        </View>\
      )\}\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    padding: 16,\
    backgroundColor: "#fff",\
  \},\
  image: \{\
    width: "100%",\
    height: 200,\
    borderRadius: 8,\
    marginBottom: 12,\
  \},\
  title: \{\
    fontSize: 22,\
    fontWeight: "bold",\
    marginBottom: 4,\
  \},\
  category: \{\
    fontSize: 16,\
    color: "gray",\
    marginBottom: 12,\
  \},\
  row: \{\
    flexDirection: "row",\
    alignItems: "center",\
    marginBottom: 8,\
  \},\
  text: \{\
    marginLeft: 8,\
    fontSize: 16,\
    color: "#444",\
  \},\
  mapButton: \{\
    flexDirection: "row",\
    alignItems: "center",\
    backgroundColor: "#2196F3",\
    padding: 12,\
    borderRadius: 8,\
    marginVertical: 12,\
    justifyContent: "center",\
  \},\
  mapButtonText: \{\
    color: "#fff",\
    fontSize: 16,\
    marginLeft: 8,\
    fontWeight: "600",\
  \},\
  hoursBox: \{\
    marginTop: 12,\
    padding: 10,\
    backgroundColor: "#f5f5f5",\
    borderRadius: 6,\
  \},\
  subtitle: \{\
    fontWeight: "600",\
    marginBottom: 4,\
  \},\
\});\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  Flujo Actual del MVP
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Pantalla Lista (HomeScreen)
\f1\b0 \cf2  \uc0\u8594  muestra negocios.\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Al hacer tap, manda:\
navigation.navigate("BusinessDetail", \{ business \});\
\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 2.	
\f2\b \cf2 Pantalla Mapa (MapScreen)
\f1\b0 \cf2  \uc0\u8594  muestra pines de negocios.\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Al tocar un pin \uc0\u8594  
\f5 \cf2 navigation.navigate("BusinessDetail", \{ business \});
\f1 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	3.	
\f2\b \cf2 Detalle (BusinessDetail)
\f1\b0 \cf2  \uc0\u8594  informaci\'f3n completa, llamar, ver en Google Maps, horarios.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que arme tambi\'e9n el 
\f2\b \cf2 MapScreen
\f1\b0 \cf2  con markers de negocios para cerrar ya el flujo completo (Lista 
\f7 \uc0\u8596 \u65039 
\f1  Mapa 
\f7 \uc0\u8596 \u65039 
\f1  Detalle)? Si\
\
\'a1Perfecto! 
\f7 \uc0\u55357 \u56960 
\f1  Vamos a armar el 
\f2\b \cf2 MapScreen.js
\f1\b0 \cf2  para mostrar todos los negocios en un mapa con pines. Cada pin abre el 
\f2\b \cf2 BusinessDetail
\f1\b0 \cf2  al tocarlo.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  screens/MapScreen.js\
\
import React from "react";\
import \{ View, StyleSheet \} from "react-native";\
import MapView, \{ Marker, Callout \} from "react-native-maps";\
import \{ useNavigation \} from "@react-navigation/native";\
\
export default function MapScreen(\{ route \}) \{\
  const \{ businesses \} = route.params; // viene desde HomeScreen\
  const navigation = useNavigation();\
\
  return (\
    <View style=\{styles.container\}>\
      <MapView\
        style=\{styles.map\}\
        initialRegion=\{\{\
          latitude: 20.9671,  // M\'e9rida Yucat\'e1n centro\
          longitude: -89.6237,\
          latitudeDelta: 0.1,\
          longitudeDelta: 0.1,\
        \}\}\
      >\
        \{businesses.map((business, index) => (\
          <Marker\
            key=\{index\}\
            coordinate=\{\{ latitude: business.lat, longitude: business.lng \}\}\
            title=\{business.name\}\
            description=\{business.category\}\
          >\
            <Callout\
              onPress=\{() => navigation.navigate("BusinessDetail", \{ business \})\}\
            >\
              <View style=\{styles.callout\}>\
                <View>\
                  <View>\
                    <Text style=\{styles.title\}>\{business.name\}</Text>\
                    <Text style=\{styles.subtitle\}>\{business.category\}</Text>\
                  </View>\
                </View>\
              </View>\
            </Callout>\
          </Marker>\
        ))\}\
      </MapView>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
  \},\
  map: \{\
    width: "100%",\
    height: "100%",\
  \},\
  callout: \{\
    width: 150,\
    padding: 4,\
  \},\
  title: \{\
    fontWeight: "bold",\
    fontSize: 14,\
  \},\
  subtitle: \{\
    color: "gray",\
    fontSize: 12,\
  \},\
\});\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  Flujo Completo del MVP hasta ahora
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 HomeScreen
\f1\b0 \cf2  \uc0\u8594  lista de negocios con bot\'f3n para abrir mapa.\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 \cf2 navigation.navigate("MapScreen", \{ businesses: seedData \});
\f1 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	2.	
\f2\b \cf2 MapScreen
\f1\b0 \cf2  \uc0\u8594  muestra todos los negocios en un mapa con pines.\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Tocas un pin \uc0\u8594  abre detalle.\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	3.	
\f2\b \cf2 BusinessDetail
\f1\b0 \cf2  \uc0\u8594  info completa con llamar 
\f7 \cf2 \uc0\u55357 \u56542 
\f1 \cf2 , Google Maps 
\f7 \cf2 \uc0\u55357 \u56826 \u65039 
\f1 \cf2  y horarios 
\f7 \cf2 \uc0\u9200 
\f1 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te arme tambi\'e9n la 
\f2\b \cf2 navegaci\'f3n principal (App.js con React Navigation Tab)
\f1\b0 \cf2  para que tengas 
\f2\b \cf2 Lista 
\f7\b0 \cf2 \uc0\u8596 \u65039 
\f2\b \cf2  Mapa
\f1\b0 \cf2  en tabs inferiores y acceso al detalle?\
\
\'a1Excelente! 
\f7 \uc0\u55357 \u56960 
\f1  Vamos a armar la 
\f2\b \cf2 navegaci\'f3n principal
\f1\b0 \cf2  con 
\f2\b \cf2 React Navigation (Bottom Tabs)
\f1\b0 \cf2  para que el usuario pueda alternar f\'e1cilmente entre la 
\f2\b \cf2 Lista de negocios
\f1\b0 \cf2  y el 
\f2\b \cf2 Mapa
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  App.js\
\
import React from "react";\
import \{ NavigationContainer \} from "@react-navigation/native";\
import \{ createBottomTabNavigator \} from "@react-navigation/bottom-tabs";\
import \{ createNativeStackNavigator \} from "@react-navigation/native-stack";\
import \{ Ionicons \} from "@expo/vector-icons";\
\
import HomeScreen from "./screens/HomeScreen";\
import MapScreen from "./screens/MapScreen";\
import BusinessDetail from "./screens/BusinessDetail";\
\
const Tab = createBottomTabNavigator();\
const Stack = createNativeStackNavigator();\
\
function TabNavigator() \{\
  return (\
    <Tab.Navigator\
      screenOptions=\{(\{ route \}) => (\{\
        tabBarIcon: (\{ color, size \}) => \{\
          let iconName;\
\
          if (route.name === "Lista") \{\
            iconName = "list";\
          \} else if (route.name === "Mapa") \{\
            iconName = "map";\
          \}\
\
          return <Ionicons name=\{iconName\} size=\{size\} color=\{color\} />;\
        \},\
        tabBarActiveTintColor: "#2f95dc",\
        tabBarInactiveTintColor: "gray",\
      \})\}\
    >\
      <Tab.Screen\
        name="Lista"\
        component=\{HomeScreen\}\
        options=\{\{ headerShown: false \}\}\
      />\
      <Tab.Screen\
        name="Mapa"\
        component=\{MapScreen\}\
        options=\{\{ headerShown: false \}\}\
      />\
    </Tab.Navigator>\
  );\
\}\
\
export default function App() \{\
  return (\
    <NavigationContainer>\
      <Stack.Navigator>\
        <Stack.Screen\
          name="Directorio"\
          component=\{TabNavigator\}\
          options=\{\{ headerShown: false \}\}\
        />\
        <Stack.Screen\
          name="BusinessDetail"\
          component=\{BusinessDetail\}\
          options=\{\{ title: "Detalles del negocio" \}\}\
        />\
      </Stack.Navigator>\
    </NavigationContainer>\
  );\
\}\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  Explicaci\'f3n
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Bottom Tabs
\f1\b0 :\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b \cf2 Lista
\f1\b0 \cf2  \uc0\u8594  
\f5 \cf2 HomeScreen
\f1 \cf2  (listado de negocios).\
	\'95	
\f2\b \cf2 Mapa
\f1\b0 \cf2  \uc0\u8594  
\f5 \cf2 MapScreen
\f1 \cf2  (pines interactivos).\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Stack Navigator
\f1\b0 :\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Encierra las tabs para permitir 
\f2\b \cf2 navegar al detalle
\f1\b0 \cf2  (
\f5 \cf2 BusinessDetail
\f1 \cf2 ) sin perder la barra inferior.\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Iconos
\f1\b0 : usamos 
\f5 Ionicons
\f1  (ya incluidos en Expo).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55356 \u57263 
\f4\b  Flujo
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	En 
\f2\b \cf2 App
\f1\b0 \cf2 , el usuario ve tabs:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f7 \uc0\u55357 \u56541 
\f1  Lista\
	\'95	
\f7 \uc0\u55357 \u56826 \u65039 
\f1  Mapa\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	2.	Desde cualquiera puede ir a 
\f2\b \cf2 BusinessDetail
\f1\b0 \cf2 .\

\f6 \cf2 	3.	El header del detalle muestra t\'edtulo \'93Detalles del negocio\'94.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te prepare un 
\f2\b \cf2 demo completo con seedData conectado a HomeScreen y MapScreen
\f1\b0 \cf2  ya listo para subir a GitHub como primer commit? Si\
\
\'a1Perfecto! 
\f7 \uc0\u55357 \u56960 
\f1  Vamos a dejarte un 
\f2\b \cf2 demo completo
\f1\b0 \cf2  ya listo para subir a GitHub con:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Seed Data
\f1\b0  de negocios en 
\f5 data/seedData.js
\f1 \
	\'95	
\f2\b HomeScreen
\f1\b0  con lista de negocios\
	\'95	
\f2\b MapScreen
\f1\b0  con pines en el mapa\
	\'95	
\f2\b BusinessDetail
\f1\b0  con datos del negocio\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  Estructura del proyecto\
\
yucatan-build-guide-app/\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  App.js\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  package.json\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  data/\
\uc0\u9474    
\f9 \uc0\u9492 \u9472 \u9472 
\f4  seedData.js\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  screens/\
\uc0\u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  HomeScreen.js\
\uc0\u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  MapScreen.js\
\uc0\u9474    
\f9 \uc0\u9492 \u9472 \u9472 
\f4  BusinessDetail.js\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  data/seedData.js\
\
export const businesses = [\
  \{\
    id: 1,\
    name: "Constructora Caucel",\
    category: "Constructoras",\
    phone: "+529991234567",\
    latitude: 20.96737,\
    longitude: -89.59259,\
    description: "Expertos en desarrollo habitacional en la zona de Caucel."\
  \},\
  \{\
    id: 2,\
    name: "Inmobiliaria Yucat\'e1n",\
    category: "Inmobiliarias",\
    phone: "+529991112233",\
    latitude: 20.975,\
    longitude: -89.610,\
    description: "Venta y renta de propiedades en M\'e9rida y Caucel."\
  \},\
  \{\
    id: 3,\
    name: "Arquitectos del Sureste",\
    category: "Arquitectura",\
    phone: "+529998889900",\
    latitude: 20.970,\
    longitude: -89.600,\
    description: "Despacho de arquitectura con proyectos modernos en Yucat\'e1n."\
  \}\
];\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  screens/HomeScreen.js\
\

\f0\b0 import
\f7  
\f0 React
\f7  
\f0 from
\f7  
\f0 "react";
\f7 \

\f0 import
\f7  
\f0 \{
\f7  
\f0 View,
\f7  
\f0 Text,
\f7  
\f0 FlatList,
\f7  
\f0 TouchableOpacity,
\f7  
\f0 StyleSheet
\f7  
\f0 \}
\f7  
\f0 from
\f7  
\f0 "react-native";
\f7 \

\f0 import
\f7  
\f0 \{
\f7  
\f0 businesses
\f7  
\f0 \}
\f7  
\f0 from
\f7  
\f0 "../data/seedData";
\f7 \
\

\f0 export
\f7  
\f0 default
\f7  
\f0 function
\f7  
\f0 HomeScreen(\{
\f7  
\f0 navigation
\f7  
\f0 \})
\f7  
\f0 \{
\f7 \
  
\f0 return
\f7  
\f0 (
\f7 \
    
\f0 <View
\f7  
\f0 style=\{styles.container\}>
\f7 \
      
\f0 <FlatList
\f7 \
        
\f0 data=\{businesses\}
\f7 \
        
\f0 keyExtractor=\{(item)
\f7  
\f0 =>
\f7  
\f0 item.id.toString()\}
\f7 \
        
\f0 renderItem=\{(\{
\f7  
\f0 item
\f7  
\f0 \})
\f7  
\f0 =>
\f7  
\f0 (
\f7 \
          
\f0 <TouchableOpacity
\f7 \
            
\f0 style=\{styles.card\}
\f7 \
            
\f0 onPress=\{()
\f7  
\f0 =>
\f7  
\f0 navigation.navigate("BusinessDetail",
\f7  
\f0 \{
\f7  
\f0 business:
\f7  
\f0 item
\f7  
\f0 \})\}
\f7 \
          
\f0 >
\f7 \
            
\f0 <Text
\f7  
\f0 style=\{styles.name\}>\{item.name\}</Text>
\f7 \
            
\f0 <Text
\f7  
\f0 style=\{styles.category\}>\{item.category\}</Text>
\f7 \
          
\f0 </TouchableOpacity>
\f7 \
        
\f0 )\}
\f7 \
      
\f0 />
\f7 \
    
\f0 </View>
\f7 \
  
\f0 );
\f7 \

\f0 \}
\f7 \
\

\f0 const
\f7  
\f0 styles
\f7  
\f0 =
\f7  
\f0 StyleSheet.create(\{
\f7 \
  
\f0 container:
\f7  
\f0 \{
\f7  
\f0 flex:
\f7  1
\f0 ,
\f7  
\f0 backgroundColor:
\f7  
\f0 "
\f7 #
\f0 fff"
\f7  
\f0 \},
\f7 \
  
\f0 card:
\f7  
\f0 \{
\f7 \
    
\f0 padding:
\f7  15
\f0 ,
\f7 \
    
\f0 borderBottomWidth:
\f7  1
\f0 ,
\f7 \
    
\f0 borderBottomColor:
\f7  
\f0 "
\f7 #
\f0 ddd"
\f7 \
  
\f0 \},
\f7 \
  
\f0 name:
\f7  
\f0 \{
\f7  
\f0 fontSize:
\f7  18
\f0 ,
\f7  
\f0 fontWeight:
\f7  
\f0 "bold"
\f7  
\f0 \},
\f7 \
  
\f0 category:
\f7  
\f0 \{
\f7  
\f0 color:
\f7  
\f0 "gray"
\f7  
\f0 \}
\f7 \

\f0 \});
\f7 \
\
\uc0\u55357 \u56524 
\f4\b  screens/MapScreen.js\
\
import React from "react";\
import \{ StyleSheet, Dimensions \} from "react-native";\
import MapView, \{ Marker \} from "react-native-maps";\
import \{ businesses \} from "../data/seedData";\
\
export default function MapScreen(\{ navigation \}) \{\
  return (\
    <MapView\
      style=\{styles.map\}\
      initialRegion=\{\{\
        latitude: 20.96737,\
        longitude: -89.59259,\
        latitudeDelta: 0.05,\
        longitudeDelta: 0.05,\
      \}\}\
    >\
      \{businesses.map((biz) => (\
        <Marker\
          key=\{biz.id\}\
          coordinate=\{\{ latitude: biz.latitude, longitude: biz.longitude \}\}\
          title=\{biz.name\}\
          description=\{biz.category\}\
          onPress=\{() => navigation.navigate("BusinessDetail", \{ business: biz \})\}\
        />\
      ))\}\
    </MapView>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  map: \{\
    width: Dimensions.get("window").width,\
    height: Dimensions.get("window").height,\
  \},\
\});\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  screens/BusinessDetail.js\
\
import React from "react";\
import \{ View, Text, StyleSheet, Linking, TouchableOpacity \} from "react-native";\
\
export default function BusinessDetail(\{ route \}) \{\
  const \{ business \} = route.params;\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>\{business.name\}</Text>\
      <Text style=\{styles.category\}>\{business.category\}</Text>\
      <Text style=\{styles.desc\}>\{business.description\}</Text>\
\
      <TouchableOpacity\
        style=\{styles.button\}\
        onPress=\{() => Linking.openURL(`tel:$\{business.phone\}`)\}\
      >\
        <Text style=\{styles.buttonText\}>
\f7\b0 \uc0\u55357 \u56542 
\f4\b  Llamar</Text>\
      </TouchableOpacity>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, padding: 20, backgroundColor: "#fff" \},\
  title: \{ fontSize: 24, fontWeight: "bold", marginBottom: 10 \},\
  category: \{ fontSize: 16, color: "gray", marginBottom: 10 \},\
  desc: \{ fontSize: 16, marginBottom: 20 \},\
  button: \{\
    backgroundColor: "#2f95dc",\
    padding: 15,\
    borderRadius: 8,\
    alignItems: "center",\
  \},\
  buttonText: \{ color: "#fff", fontSize: 16, fontWeight: "bold" \},\
\});\
\

\f7\b0 \uc0\u55357 \u56960 
\f4\b  Pr\'f3ximos pasos
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Crear el repo en GitHub:\
\
git init\
git add .\
git commit -m "MVP inicial: Home, Map, Detail con seedData"\
git branch -M main\
git remote add origin https://github.com/TU_USUARIO/yucatan-build-guide-app.git\
git push -u origin main\
\
	2.	Instalar dependencias en el proyecto:\
\
expo install react-native-maps\
npm install @react-navigation/native @react-navigation/native-stack @react-navigation/bottom-tabs react-native-screens react-native-safe-area-context react-native-gesture-handler react-native-reanimated react-native-vector-icons\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te arme tambi\'e9n el 
\f2\b \cf2 README.md inicial
\f1\b0 \cf2  con instrucciones claras de instalaci\'f3n y ejecuci\'f3n para tu GitHub? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  Aqu\'ed te dejo un 
\f2\b \cf2 README.md inicial
\f1\b0 \cf2  listo para tu repositorio en GitHub:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  README.md\
\
# 
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Yucat\'e1n Build Guide (MVP)\
\
Aplicaci\'f3n m\'f3vil en **React Native (Expo)** para explorar un directorio de **constructoras, inmobiliarias y desarrolladores en M\'e9rida, Yucat\'e1n**.  \
\
Incluye:  \
- 
\f7\b0 \uc0\u55357 \u56529 
\f4\b  **Lista de negocios** (constructoras, inmobiliarias, arquitectos)  \
- 
\f7\b0 \uc0\u55357 \u56826 \u65039 
\f4\b  **Mapa interactivo** con pines de cada negocio  \
- 
\f7\b0 \uc0\u55357 \u56562 
\f4\b  **Detalle de negocio** con opci\'f3n de llamada directa  \
\
---\
\
## 
\f7\b0 \uc0\u55357 \u56960 
\f4\b  Instalaci\'f3n\
\
1. Clona este repositorio:\
   ```bash\
   git clone https://github.com/TU_USUARIO/yucatan-build-guide-app.git\
   cd yucatan-build-guide-app\
\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6\b0\fs28 \cf2 	2.	Instala dependencias:\
\
npm install\
\
	3.	Instala paquetes de navegaci\'f3n y mapas:\
expo install react-native-maps\
npm install @react-navigation/native @react-navigation/native-stack @react-navigation/bottom-tabs react-native-screens react-native-safe-area-context react-native-gesture-handler react-native-reanimated react-native-vector-icons\
\
	4.	Inicia el proyecto con Expo:\
npx expo start\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  Estructura del proyecto\
\
yucatan-build-guide-app/\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  App.js\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  package.json\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  README.md\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  data/\
\uc0\u9474    
\f9 \uc0\u9492 \u9472 \u9472 
\f4  seedData.js\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  screens/\
\uc0\u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  HomeScreen.js\
\uc0\u9474    
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  MapScreen.js\
\uc0\u9474    
\f9 \uc0\u9492 \u9472 \u9472 
\f4  BusinessDetail.js\
\

\f7\b0 \uc0\u55357 \u57056 \u65039 
\f4\b  Tecnolog\'edas usadas
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b React Native (Expo)
\f1\b0 \
	\'95	
\f2\b React Navigation
\f1\b0 \
	\'95	
\f2\b React Native Maps
\f1\b0 \
	\'95	
\f2\b Seed Data (JSON local)
\f1\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56568 
\f4\b  Screenshots (MVP)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f11\i\b0\fs28 \cf2 (Agrega tus capturas de pantalla aqu\'ed cuando corras la app)
\f1\i0 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  Roadmap
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Integrar base de datos real (Firebase / Supabase / Strapi)\
	\'95	Filtros por categor\'eda y b\'fasqueda avanzada\
	\'95	Formulario para que constructoras se registren\
	\'95	Integrar login y perfiles de usuario\
	\'95	Publicaci\'f3n en Google Play & App Store\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55357 \u56424 \u8205 \u55357 \u56507 
\f4\b  Autor
\f1\b0\fs28 \cf2 \
\
Desarrollado por 
\f2\b \cf2 Miguel Cedillo (Comet Networks)
\f1\b0 \cf2  
\f7 \uc0\u55356 \u57104 
\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cometnetworks.com.mx"}}{\fldrslt \cf2 https://cometnetworks.com.mx}}\
\
---\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u55357 \u56393 
\f1  \'bfQuieres que tambi\'e9n te prepare el `App.js` ya armado con navegaci\'f3n (`BottomTabs`) para que tu proyecto corra sin errores desde el primer push a GitHub?\
Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  Aqu\'ed tienes un 
\f5 \cf2 App.js
\f1 \cf2  ya armado con 
\f2\b \cf2 React Navigation
\f1\b0 \cf2  y 
\f2\b \cf2 Bottom Tabs
\f1\b0 \cf2  (Home + Mapa). Est\'e1 listo para levantar con Expo sin errores:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  App.js\
import React from "react";\
import \{ NavigationContainer \} from "@react-navigation/native";\
import \{ createBottomTabNavigator \} from "@react-navigation/bottom-tabs";\
import \{ createNativeStackNavigator \} from "@react-navigation/native-stack";\
import Ionicons from "react-native-vector-icons/Ionicons";\
\
// Screens\
import HomeScreen from "./screens/HomeScreen";\
import MapScreen from "./screens/MapScreen";\
import BusinessDetail from "./screens/BusinessDetail";\
\
const Tab = createBottomTabNavigator();\
const Stack = createNativeStackNavigator();\
\
// 
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Stack para manejar Home \uc0\u8594  BusinessDetail\
function HomeStack() \{\
  return (\
    <Stack.Navigator>\
      <Stack.Screen name="Directorio" component=\{HomeScreen\} />\
      <Stack.Screen\
        name="DetalleNegocio"\
        component=\{BusinessDetail\}\
        options=\{\{ title: "Detalle del negocio" \}\}\
      />\
    </Stack.Navigator>\
  );\
\}\
\
// 
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Tabs principales\
export default function App() \{\
  return (\
    <NavigationContainer>\
      <Tab.Navigator\
        screenOptions=\{(\{ route \}) => (\{\
          headerShown: false,\
          tabBarIcon: (\{ color, size \}) => \{\
            let iconName;\
\
            if (route.name === "Inicio") \{\
              iconName = "home";\
            \} else if (route.name === "Mapa") \{\
              iconName = "map";\
            \}\
\
            return <Ionicons name=\{iconName\} size=\{size\} color=\{color\} />;\
          \},\
          tabBarActiveTintColor: "#007AFF",\
          tabBarInactiveTintColor: "gray",\
        \})\}\
      >\
        <Tab.Screen name="Inicio" component=\{HomeStack\} />\
        <Tab.Screen name="Mapa" component=\{MapScreen\} />\
      </Tab.Navigator>\
    </NavigationContainer>\
  );\
\}\
\

\f7\b0 \uc0\u55357 \u56514 
\f4\b  Pr\'f3ximos pasos
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Crear carpeta 
\f5 \cf2 screens/
\f1  con estos archivos vac\'edos (los llenamos despu\'e9s):\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 \cf2 screens/HomeScreen.js
\f1 \cf2 \
	\'95	
\f5 \cf2 screens/MapScreen.js
\f1 \cf2 \
	\'95	
\f5 \cf2 screens/BusinessDetail.js
\f1 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	2.	Crear carpeta 
\f5 \cf2 data/
\f1  con 
\f5 seedData.js
\f1  para cargar constructoras de ejemplo.\

\f6 \cf2 	3.	Correr la app con:\
npx expo start\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te arme ahora mismo los 
\f2\b \cf2 3 screens iniciales con un listado b\'e1sico de negocios + mapa con pines
\f1\b0 \cf2  para que ya veas el MVP funcionando?\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  vamos a armar los 
\f2\b \cf2 3 screens b\'e1sicos
\f1\b0 \cf2  para que el MVP ya funcione con negocios de prueba.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56514 
\f4\b  Estructura\
/screens\
   
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  HomeScreen.js\
   
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  MapScreen.js\
   
\f9 \uc0\u9492 \u9472 \u9472 
\f4  BusinessDetail.js\
/data\
   
\f9 \uc0\u9492 \u9472 \u9472 
\f4  seedData.js\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  data/seedData.js\
export const businesses = [\
  \{\
    id: 1,\
    name: "Peluquer\'eda Caucel",\
    category: "Peluquer\'eda",\
    address: "Calle 20 #123, Caucel",\
    phone: "9991234567",\
    latitude: 20.9955,\
    longitude: -89.7021,\
  \},\
  \{\
    id: 2,\
    name: "Pasteler\'eda Dulce Vida",\
    category: "Pasteler\'eda",\
    address: "Calle 21 #456, Caucel",\
    phone: "9997654321",\
    latitude: 20.9961,\
    longitude: -89.7032,\
  \},\
  \{\
    id: 3,\
    name: "Taller Mec\'e1nico El Rayo",\
    category: "Mec\'e1nico",\
    address: "Calle 19 #321, Caucel",\
    phone: "9992223344",\
    latitude: 20.9972,\
    longitude: -89.7045,\
  \},\
];\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  screens/HomeScreen.js\
import React from "react";\
import \{ View, Text, FlatList, TouchableOpacity, StyleSheet \} from "react-native";\
import \{ businesses \} from "../data/seedData";\
\
export default function HomeScreen(\{ navigation \}) \{\
  return (\
    <View style=\{styles.container\}>\
      <FlatList\
        data=\{businesses\}\
        keyExtractor=\{(item) => item.id.toString()\}\
        renderItem=\{(\{ item \}) => (\
          <TouchableOpacity\
            style=\{styles.card\}\
            onPress=\{() => navigation.navigate("DetalleNegocio", \{ business: item \})\}\
          >\
            <Text style=\{styles.name\}>\{item.name\}</Text>\
            <Text style=\{styles.category\}>\{item.category\}</Text>\
            <Text style=\{styles.address\}>\{item.address\}</Text>\
          </TouchableOpacity>\
        )\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, backgroundColor: "#fff", padding: 10 \},\
  card: \{\
    padding: 15,\
    marginBottom: 10,\
    borderRadius: 8,\
    backgroundColor: "#f8f8f8",\
    elevation: 2,\
  \},\
  name: \{ fontSize: 16, fontWeight: "bold" \},\
  category: \{ color: "gray" \},\
  address: \{ marginTop: 4, fontSize: 12 \},\
\});\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  screens/BusinessDetail.js\
import React from "react";\
import \{ View, Text, StyleSheet, Linking, Button \} from "react-native";\
\
export default function BusinessDetail(\{ route \}) \{\
  const \{ business \} = route.params;\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>\{business.name\}</Text>\
      <Text style=\{styles.info\}>Categor\'eda: \{business.category\}</Text>\
      <Text style=\{styles.info\}>Direcci\'f3n: \{business.address\}</Text>\
      <Text style=\{styles.info\}>Tel: \{business.phone\}</Text>\
\
      <Button\
        title="Llamar"\
        onPress=\{() => Linking.openURL(`tel:$\{business.phone\}`)\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, padding: 20 \},\
  title: \{ fontSize: 22, fontWeight: "bold", marginBottom: 10 \},\
  info: \{ fontSize: 16, marginBottom: 8 \},\
\});\
\

\f7\b0 \uc0\u55357 \u56524 
\f4\b  screens/MapScreen.js\
import React from "react";\
import \{ View, StyleSheet, Dimensions \} from "react-native";\
import MapView, \{ Marker \} from "react-native-maps";\
import \{ businesses \} from "../data/seedData";\
\
export default function MapScreen() \{\
  return (\
    <View style=\{styles.container\}>\
      <MapView\
        style=\{styles.map\}\
        initialRegion=\{\{\
          latitude: 20.996,\
          longitude: -89.703,\
          latitudeDelta: 0.01,\
          longitudeDelta: 0.01,\
        \}\}\
      >\
        \{businesses.map((b) => (\
          <Marker\
            key=\{b.id\}\
            coordinate=\{\{ latitude: b.latitude, longitude: b.longitude \}\}\
            title=\{b.name\}\
            description=\{b.category\}\
          />\
        ))\}\
      </MapView>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1 \},\
  map: \{ width: Dimensions.get("window").width, height: Dimensions.get("window").height \},\
\});\
\

\f7\b0\fs28 \cf2 \uc0\u9989 
\f1  Con esto ya tienes:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Pantalla de listado
\f1\b0  de negocios (con navegaci\'f3n al detalle).\
	\'95	
\f2\b Pantalla de detalle
\f1\b0  (con bot\'f3n para llamar).\
	\'95	
\f2\b Mapa interactivo
\f1\b0  con pines de negocios.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que te prepare tambi\'e9n el 
\f2\b \cf2 README.md con pasos de instalaci\'f3n y ejecuci\'f3n
\f1\b0 \cf2  para que lo subas directo a GitHub?\
Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  aqu\'ed tienes un 
\f2\b \cf2 README.md inicial
\f1\b0 \cf2  listo para tu repo de GitHub. Lo hice pensado en que cualquier persona pueda clonar el proyecto, instalar dependencias y correrlo en Expo sin complicaciones.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  README.md\
# 
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Directorio Local Caucel (MVP)\
\
Este es un prototipo de aplicaci\'f3n m\'f3vil en **React Native (Expo)** para un **directorio de negocios locales** en la zona de **Ciudad Caucel, M\'e9rida, Yucat\'e1n**.  \
El objetivo es que los usuarios puedan explorar comercios, verlos en un mapa y acceder a su informaci\'f3n de contacto de manera sencilla.\
\
---\
\
## 
\f7\b0 \uc0\u55357 \u56960 
\f4\b  Funcionalidades\
\
- 
\f7\b0 \uc0\u55357 \u56523 
\f4\b  Listado de negocios locales (ejemplo con datos de prueba).\
- 
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Mapa con pines que muestran la ubicaci\'f3n de cada negocio.\
- 
\f7\b0 \uc0\u55357 \u56542 
\f4\b  Detalle del negocio con bot\'f3n para realizar llamadas.\
- 
\f7\b0 \uc0\u55357 \u56826 \u65039 
\f4\b  Integraci\'f3n inicial con `react-native-maps`.\
\
---\
\
## 
\f7\b0 \uc0\u55357 \u56514 
\f4\b  Estructura del proyecto\
\

\f1\b0\fs28 \cf2 /screens\

\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  HomeScreen.js       # Listado de negocios\

\f10 \'84\'a5\'84\'9f\'84\'9f
\f1  MapScreen.js        # Mapa con markers\

\f0 \uc0\u9492 \u9472 \u9472 
\f1  BusinessDetail.js   # Detalle de un negocio\
/data\

\f0 \uc0\u9492 \u9472 \u9472 
\f1  seedData.js         # Datos de prueba (mock)\
App.js                     # Navegaci\'f3n principal\
\
---\
\
## 
\f7 \uc0\u55357 \u57056 \u65039 
\f1  Requisitos\
\
- [Node.js](https://nodejs.org/) (versi\'f3n LTS recomendada)\
- [Expo CLI](https://docs.expo.dev/get-started/installation/) (`npm install -g expo-cli`)\
\
---\
\
## 
\f7 \uc0\u55357 \u56550 
\f1  Instalaci\'f3n\
\
1. Clonar el repositorio:\
   ```bash\
   git clone https://github.com/TU_USUARIO/directorio-caucel.git\
   cd directorio-caucel\
\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	2.	Instalar dependencias:\
npm install\
	3.	Instalar librer\'edas adicionales:\
npx expo install react-native-maps\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u9654 \u65039 
\f4\b  Ejecuci\'f3n
\f1\b0\fs28 \cf2 \
\
Inicia el proyecto en modo desarrollo con:\
npx expo start\
Luego podr\'e1s:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Escanear el 
\f2\b QR
\f1\b0  con la app de Expo Go (iOS / Android).\
	\'95	Abrir en un emulador Android/iOS.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55356 \u57137 
\f4\b  Pr\'f3ximos pasos
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Integrar 
\f2\b API real
\f1\b0  con comercios de Caucel.\
	\'95	Agregar 
\f2\b b\'fasqueda y filtros
\f1\b0  (categor\'eda, cercan\'eda).\
	\'95	Implementar autenticaci\'f3n para due\'f1os de negocios.\
	\'95	Subir la app a 
\f2\b Google Play / App Store
\f1\b0 .\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55357 \u56424 \u8205 \u55357 \u56507 
\f4\b  Autor
\f1\b0\fs28 \cf2 \
\
Proyecto inicial creado por [Tu Nombre / Empresa].\
Inspirado en la idea de crear un directorio digital de Ciudad Caucel, M\'e9rida, Yucat\'e1n.\
\
---\
\
\'bfQuieres que adem\'e1s te prepare un **`.gitignore` optimizado para React Native/Expo** para que lo subas junto con el README?\
Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1  aqu\'ed tienes un 
\f2\b \cf2 .gitignore optimizado para proyectos Expo + React Native
\f1\b0 \cf2 , para que lo agregues a tu repo antes de subirlo a GitHub:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  .gitignore\
\
# Node modules\
node_modules/\
npm-debug.log*\
yarn-debug.log*\
yarn-error.log*\
\
# Expo\
.expo/\
.expo-shared/\
\
# Metro bundler\
.expo/*\
.expo-shared/*\
/.expo/*\
/.expo-shared/*\
\
# Logs\
*.log\
logs\
*.tmp\
*.swp\
*.swo\
*.lock\
\
# macOS\
.DS_Store\
\
# Android\
/android\
*.apk\
*.keystore\
\
# iOS\
/ios\
*.xcworkspace\
*.xcuserdata\
*.xcuserstate\
*.xcuserdatad\
*.xcsettings\
*.xcodeproj/*\
*.pbxuser\
*.mode1v3\
*.mode2v3\
*.perspectivev3\
\
# VSCode\
.vscode/\
\
# Environment variables\
.env\
.env.*\
\

\f1\b0\fs28 \cf2 Con esto tu repo estar\'e1 
\f2\b \cf2 limpio y ligero
\f1\b0 \cf2 , sin archivos basura ni credenciales sensibles 
\f7 \uc0\u55356 \u57263 
\f1 \
\

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te arme tambi\'e9n el 
\f2\b \cf2 primer commit inicial con README + .gitignore + estructura vac\'eda (screens/, data/)
\f1\b0 \cf2  listo para pushear a GitHub? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Te armo el 
\f2\b \cf2 primer commit inicial
\f1\b0 \cf2  con todo listo para que lo subas a GitHub.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56513 
\f4\b  Estructura inicial del proyecto\
\
caucel-directory-app/\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  .gitignore\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  README.md\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  App.js\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  package.json   (se genera al hacer npm init o npx create-expo-app)\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  screens/\
\uc0\u9474      
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  HomeScreen.js\
\uc0\u9474      
\f8 \'84\'a5\'84\'9f\'84\'9f
\f4  BusinessListScreen.js\
\uc0\u9474      
\f9 \uc0\u9492 \u9472 \u9472 
\f4  BusinessDetailScreen.js\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  components/\
\uc0\u9474      
\f9 \uc0\u9492 \u9472 \u9472 
\f4  BusinessCard.js\
\uc0\u9474 
\f9 \uc0\u9472 \u9472 
\f4  data/\
\uc0\u9474      
\f9 \uc0\u9492 \u9472 \u9472 
\f4  businesses.js   (datos de prueba seed)\
\

\f7\b0 \uc0\u55357 \u56516 
\f4\b  README.md\
\
# 
\f7\b0 \uc0\u55357 \u56530 
\f4\b  Caucel Directory App\
\
Aplicaci\'f3n estilo directorio zonal (tipo P\'e1ginas Amarillas) para dar visibilidad a peque\'f1os negocios de **Caucel, M\'e9rida Yucat\'e1n**.\
\
## 
\f7\b0 \uc0\u55357 \u56960 
\f4\b  Tecnolog\'edas\
- React Native + Expo\
- Compatible iOS / Android / Web\
- Mapa interactivo con filtrado por categor\'edas y distancia\
\
## 
\f7\b0 \uc0\u55357 \u56514 
\f4\b  Estructura\
- `screens/` \uc0\u8594  pantallas principales\
- `components/` \uc0\u8594  componentes reutilizables (tarjetas, botones, etc.)\
- `data/` \uc0\u8594  seed inicial de negocios\
\
## 
\f7\b0 \uc0\u55357 \u56550 
\f4\b  Instalaci\'f3n\
```bash\
git clone https://github.com/TU-USUARIO/caucel-directory-app.git\
cd caucel-directory-app\
npm install\
npx expo start\
\

\f7\b0 \uc0\u55356 \u57263 
\f4\b  Roadmap
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Seed inicial con negocios de prueba\
	2.	B\'fasqueda y filtrado por categor\'eda\
	3.	Integraci\'f3n con mapas\
	4.	Reclamo de negocio con OTP por SMS\
\
---\
\
## 
\f7 \cf2 \uc0\u55357 \u56516 
\f6 \cf2  `App.js` (base m\'ednima)\
\
```javascript\
import React from 'react';\
import \{ NavigationContainer \} from '@react-navigation/native';\
import \{ createStackNavigator \} from '@react-navigation/stack';\
import HomeScreen from './screens/HomeScreen';\
import BusinessListScreen from './screens/BusinessListScreen';\
import BusinessDetailScreen from './screens/BusinessDetailScreen';\
\
const Stack = createStackNavigator();\
\
export default function App() \{\
  return (\
    <NavigationContainer>\
      <Stack.Navigator initialRouteName="Home">\
        <Stack.Screen name="Inicio" component=\{HomeScreen\} />\
        <Stack.Screen name="Negocios" component=\{BusinessListScreen\} />\
        <Stack.Screen name="Detalle" component=\{BusinessDetailScreen\} />\
      </Stack.Navigator>\
    </NavigationContainer>\
  );\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55357 \u56516 
\f4\b  screens/HomeScreen.js\
import React from 'react';\
import \{ View, Text, Button, StyleSheet \} from 'react-native';\
\
export default function HomeScreen(\{ navigation \}) \{\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>Directorio Caucel 
\f7\b0 \uc0\u55357 \u56525 
\f4\b </Text>\
      <Button\
        title="Ver negocios"\
        onPress=\{() => navigation.navigate('Negocios')\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, justifyContent: 'center', alignItems: 'center' \},\
  title: \{ fontSize: 24, fontWeight: 'bold', marginBottom: 20 \},\
\});\
\

\f7\b0 \uc0\u55357 \u56516 
\f4\b  data/businesses.js (seed de prueba)\
export const businesses = [\
  \{\
    id: 1,\
    name: "Peluquer\'eda Estilo Caucel",\
    category: "Peluquer\'eda",\
    address: "Calle 20 #123, Caucel, M\'e9rida",\
    phone: "9991234567"\
  \},\
  \{\
    id: 2,\
    name: "Pasteler\'eda Dulce Sabor",\
    category: "Pasteler\'eda",\
    address: "Av. 31 #456, Caucel, M\'e9rida",\
    phone: "9999876543"\
  \},\
];\
\

\f7\b0\fs28 \cf2 \uc0\u55357 \u56393 
\f1  Con esto ya puedes hacer:\
git init\
git add .\
git commit -m "
\f7 \uc0\u55357 \u56960 
\f1  Commit inicial: estructura base + seed + navegaci\'f3n"\
git branch -M main\
git remote add origin https://github.com/TU-USUARIO/caucel-directory-app.git\
git push -u origin main\
\
\'bfQuieres que te prepare tambi\'e9n los 
\f2\b \cf2 screens BusinessListScreen y BusinessDetailScreen
\f1\b0 \cf2  conectados al 
\f5 \cf2 businesses.js
\f1 \cf2  para que veas la lista y el detalle funcionando en el primer push? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1 \
Te dejo los 
\f2\b \cf2 2 screens restantes
\f1\b0 \cf2  ya conectados al 
\f5 \cf2 businesses.js
\f1 \cf2  para que tu primer push quede con la navegaci\'f3n lista.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56516 
\f4\b  screens/BusinessListScreen.js\
import React from 'react';\
import \{ View, FlatList, TouchableOpacity, Text, StyleSheet \} from 'react-native';\
import \{ businesses \} from '../data/businesses';\
\
export default function BusinessListScreen(\{ navigation \}) \{\
  return (\
    <View style=\{styles.container\}>\
      <FlatList\
        data=\{businesses\}\
        keyExtractor=\{(item) => item.id.toString()\}\
        renderItem=\{(\{ item \}) => (\
          <TouchableOpacity\
            style=\{styles.card\}\
            onPress=\{() => navigation.navigate('Detalle', \{ business: item \})\}\
          >\
            <Text style=\{styles.name\}>\{item.name\}</Text>\
            <Text style=\{styles.category\}>\{item.category\}</Text>\
            <Text style=\{styles.address\}>\{item.address\}</Text>\
          </TouchableOpacity>\
        )\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, padding: 16, backgroundColor: '#fff' \},\
  card: \{\
    padding: 16,\
    marginBottom: 12,\
    borderRadius: 8,\
    backgroundColor: '#f5f5f5',\
  \},\
  name: \{ fontSize: 18, fontWeight: 'bold', color: '#333' \},\
  category: \{ fontSize: 14, color: '#666' \},\
  address: \{ fontSize: 12, color: '#999' \},\
\});\
\

\f7\b0 \uc0\u55357 \u56516 
\f4\b  screens/BusinessDetailScreen.js\
import React from 'react';\
import \{ View, Text, StyleSheet, Linking, Button \} from 'react-native';\
\
export default function BusinessDetailScreen(\{ route \}) \{\
  const \{ business \} = route.params;\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>\{business.name\}</Text>\
      <Text style=\{styles.text\}>Categor\'eda: \{business.category\}</Text>\
      <Text style=\{styles.text\}>Direcci\'f3n: \{business.address\}</Text>\
      <Text style=\{styles.text\}>Tel: \{business.phone\}</Text>\
\
      <Button\
        title="Llamar 
\f7\b0 \uc0\u55357 \u56542 
\f4\b "\
        onPress=\{() => Linking.openURL(`tel:$\{business.phone\}`)\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, padding: 20, backgroundColor: '#fff' \},\
  title: \{ fontSize: 24, fontWeight: 'bold', marginBottom: 16 \},\
  text: \{ fontSize: 16, marginBottom: 8 \},\
\});\
\

\f7\b0 \uc0\u55357 \u56960 
\f4\b  Ahora tu flujo completo queda as\'ed:
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 HomeScreen
\f1\b0 \cf2  \uc0\u8594  bot\'f3n \'93Ver negocios\'94\

\f6 \cf2 	2.	
\f2\b \cf2 BusinessListScreen
\f1\b0 \cf2  \uc0\u8594  lista de negocios desde 
\f5 data/businesses.js
\f1 \

\f6 \cf2 	3.	
\f2\b \cf2 BusinessDetailScreen
\f1\b0 \cf2  \uc0\u8594  detalle con bot\'f3n para llamar 
\f7 \cf2 \uc0\u55357 \u56542 
\f1 \cf2 \
\
Con esto ya tienes un 
\f2\b \cf2 MVP navegable y funcional
\f1\b0 \cf2 , listo para el primer push a GitHub.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te prepare tambi\'e9n un 
\f2\b \cf2 mock de mapa en el Home
\f1\b0 \cf2  (con marcador fijo en Caucel) para que ya aparezca como \'93versi\'f3n 0.2 con mapa\'94? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Te dejo un 
\f2\b \cf2 mock de mapa en el Home
\f1\b0 \cf2  usando 
\f5 \cf2 react-native-maps
\f1 \cf2  con un marcador fijo en 
\f2\b \cf2 Caucel, M\'e9rida Yucat\'e1n
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Instalar dependencia
\f1\b0\fs28 \cf2 \
\
En tu proyecto corre:\
npm install react-native-maps\
\
o con yarn:\
yarn add react-native-maps\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Modificar HomeScreen.js\
import React from 'react';\
import \{ View, Text, Button, StyleSheet, Dimensions \} from 'react-native';\
import MapView, \{ Marker \} from 'react-native-maps';\
\
export default function HomeScreen(\{ navigation \}) \{\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>Bienvenido al Directorio 
\f7\b0 \uc0\u55356 \u57303 \u65039 
\f4\b </Text>\
\
      \{/* 
\f7\b0 \uc0\u55357 \u56826 \u65039 
\f4\b  Mapa Mock con marcador en Caucel */\}\
      <MapView\
        style=\{styles.map\}\
        initialRegion=\{\{\
          latitude: 20.9951,   // Caucel M\'e9rida\
          longitude: -89.6930,\
          latitudeDelta: 0.05,\
          longitudeDelta: 0.05,\
        \}\}\
      >\
        <Marker\
          coordinate=\{\{ latitude: 20.9951, longitude: -89.6930 \}\}\
          title="Caucel"\
          description="Zona poniente de M\'e9rida"\
        />\
      </MapView>\
\
      <Button\
        title="Ver Negocios"\
        onPress=\{() => navigation.navigate('Negocios')\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, backgroundColor: '#fff', alignItems: 'center' \},\
  title: \{ fontSize: 22, fontWeight: 'bold', marginVertical: 16 \},\
  map: \{\
    width: Dimensions.get('window').width * 0.9,\
    height: 250,\
    marginBottom: 20,\
    borderRadius: 12,\
  \},\
\});\
\

\f7\b0\fs28 \cf2 \uc0\u9989 
\f1  Con esto tu 
\f2\b \cf2 Home
\f1\b0 \cf2  ahora tiene un 
\f2\b \cf2 mapa interactivo
\f1\b0 \cf2  con marcador en 
\f2\b \cf2 Caucel
\f1\b0 \cf2  y un bot\'f3n para ir a la lista de negocios.\
Ya ser\'eda tu 
\f2\b \cf2 versi\'f3n 0.2 con mapa integrado
\f1\b0 \cf2  
\f7 \uc0\u55357 \u56613 
\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que arme tambi\'e9n un 
\f2\b \cf2 marker din\'e1mico
\f1\b0 \cf2  para que al seleccionar un negocio en la lista se muestre en el mapa de Home (versi\'f3n 0.3)? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56613 
\f1  vamos a llevar el Home al 
\f2\b \cf2 nivel 0.3
\f1\b0 \cf2  con un 
\f2\b \cf2 marker din\'e1mico
\f1\b0 \cf2 .\
La idea es:\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Tenemos una 
\f2\b \cf2 lista de negocios
\f1\b0 \cf2  (mock).\

\f6 \cf2 	2.	Al seleccionar uno \uc0\u8594  lo mandamos al 
\f2\b \cf2 Home
\f1\b0 \cf2 , y el mapa muestra ese negocio con un marcador.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Actualizar NegociosScreen.js
\f1\b0\fs28 \cf2 \
\
Le damos un 
\f5 \cf2 onPress
\f1 \cf2  que navegue al 
\f2\b \cf2 Home
\f1\b0 \cf2  y le pase la ubicaci\'f3n seleccionada.\
import React from 'react';\
import \{ View, Text, FlatList, TouchableOpacity, StyleSheet \} from 'react-native';\
\
const negocios = [\
  \{ id: '1', nombre: 'Constructora Caucel', lat: 20.9951, lng: -89.6930 \},\
  \{ id: '2', nombre: 'Inmobiliaria Poniente', lat: 21.0025, lng: -89.7005 \},\
  \{ id: '3', nombre: 'Arquitectos del Mayab', lat: 20.9890, lng: -89.6882 \},\
];\
\
export default function NegociosScreen(\{ navigation \}) \{\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>Negocios en Caucel</Text>\
      <FlatList\
        data=\{negocios\}\
        keyExtractor=\{(item) => item.id\}\
        renderItem=\{(\{ item \}) => (\
          <TouchableOpacity\
            style=\{styles.item\}\
            onPress=\{() => navigation.navigate('Home', \{ negocio: item \})\}\
          >\
            <Text style=\{styles.itemText\}>\{item.nombre\}</Text>\
          </TouchableOpacity>\
        )\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, backgroundColor: '#fff', padding: 16 \},\
  title: \{ fontSize: 20, fontWeight: 'bold', marginBottom: 12 \},\
  item: \{ padding: 14, borderBottomWidth: 1, borderColor: '#eee' \},\
  itemText: \{ fontSize: 16 \},\
\});\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Actualizar HomeScreen.js
\f1\b0\fs28 \cf2 \
\
Ahora el mapa muestra el 
\f2\b \cf2 marker din\'e1mico
\f1\b0 \cf2  si el usuario viene desde la lista.\
\
import React from 'react';\
import \{ View, Text, Button, StyleSheet, Dimensions \} from 'react-native';\
import MapView, \{ Marker \} from 'react-native-maps';\
\
export default function HomeScreen(\{ navigation, route \}) \{\
  const negocio = route.params?.negocio;\
\
  // Regi\'f3n default en Caucel\
  const defaultRegion = \{\
    latitude: 20.9951,\
    longitude: -89.6930,\
    latitudeDelta: 0.05,\
    longitudeDelta: 0.05,\
  \};\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>Bienvenido al Directorio 
\f7 \uc0\u55356 \u57303 \u65039 
\f1 </Text>\
\
      <MapView\
        style=\{styles.map\}\
        initialRegion=\{negocio\
          ? \{ ...defaultRegion, latitude: negocio.lat, longitude: negocio.lng \}\
          : defaultRegion\}\
      >\
        \{negocio && (\
          <Marker\
            coordinate=\{\{ latitude: negocio.lat, longitude: negocio.lng \}\}\
            title=\{negocio.nombre\}\
            description="Negocio seleccionado"\
          />\
        )\}\
      </MapView>\
\
      <Button\
        title="Ver Negocios"\
        onPress=\{() => navigation.navigate('Negocios')\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, backgroundColor: '#fff', alignItems: 'center' \},\
  title: \{ fontSize: 22, fontWeight: 'bold', marginVertical: 16 \},\
  map: \{\
    width: Dimensions.get('window').width * 0.9,\
    height: 250,\
    marginBottom: 20,\
    borderRadius: 12,\
  \},\
\});\
\

\f7 \uc0\u9989 
\f1  Ahora el 
\f2\b \cf2 flujo es completo
\f1\b0 \cf2 :\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	En 
\f2\b \cf2 Negocios
\f1\b0 \cf2 , eliges uno.\

\f6 \cf2 	2.	El mapa en 
\f2\b \cf2 Home
\f1\b0 \cf2  se centra en ese negocio y muestra su 
\f2\b \cf2 marker
\f1\b0 \cf2 .\

\f6 \cf2 	3.	Si no hay selecci\'f3n \uc0\u8594  solo se ve 
\f2\b \cf2 Caucel default
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que arme ahora una 
\f2\b \cf2 versi\'f3n 0.4
\f1\b0 \cf2  donde en lugar de un solo marker se muestren 
\f2\b \cf2 todos los negocios en el mapa
\f1\b0 \cf2  con pins interactivos? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  vamos a llevar el 
\f2\b \cf2 Home a nivel 0.4
\f1\b0 \cf2  con 
\f2\b \cf2 todos los negocios en el mapa
\f1\b0 \cf2 .\
\
Esto hace que el Home funcione como un 
\f2\b \cf2 mini-directorio visual
\f1\b0 \cf2  
\f7 \uc0\u55357 \u56525 
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Definimos los negocios en un archivo data/negocios.js\
export const negocios = [\
  \{ id: '1', nombre: 'Constructora Caucel', lat: 20.9951, lng: -89.6930 \},\
  \{ id: '2', nombre: 'Inmobiliaria Poniente', lat: 21.0025, lng: -89.7005 \},\
  \{ id: '3', nombre: 'Arquitectos del Mayab', lat: 20.9890, lng: -89.6882 \},\
  \{ id: '4', nombre: 'Grupo Residencial Yucat\'e1n', lat: 20.9972, lng: -89.6905 \},\
  \{ id: '5', nombre: 'Desarrollos del Sur', lat: 20.9928, lng: -89.6958 \},\
];\
\

\f7\b0 2\uc0\u65039 \u8419 
\f4\b  Actualizar HomeScreen.js
\f1\b0\fs28 \cf2 \
\
Ahora se renderizan 
\f2\b \cf2 todos los negocios
\f1\b0 \cf2  como markers.\
Y si el usuario selecciona uno desde la lista \uc0\u8594  el mapa hace 
\f2\b \cf2 focus
\f1\b0 \cf2  en ese negocio.\
import React from 'react';\
import \{ View, Text, Button, StyleSheet, Dimensions \} from 'react-native';\
import MapView, \{ Marker \} from 'react-native-maps';\
import \{ negocios \} from '../data/negocios';\
\
export default function HomeScreen(\{ navigation, route \}) \{\
  const negocioSeleccionado = route.params?.negocio;\
\
  // Regi\'f3n default (Caucel)\
  const defaultRegion = \{\
    latitude: 20.9951,\
    longitude: -89.6930,\
    latitudeDelta: 0.05,\
    longitudeDelta: 0.05,\
  \};\
\
  const region = negocioSeleccionado\
    ? \{\
        latitude: negocioSeleccionado.lat,\
        longitude: negocioSeleccionado.lng,\
        latitudeDelta: 0.02,\
        longitudeDelta: 0.02,\
      \}\
    : defaultRegion;\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>Directorio Inmobiliario 
\f7 \uc0\u55357 \u56525 
\f1 </Text>\
\
      <MapView style=\{styles.map\} initialRegion=\{region\}>\
        \{negocios.map((n) => (\
          <Marker\
            key=\{n.id\}\
            coordinate=\{\{ latitude: n.lat, longitude: n.lng \}\}\
            title=\{n.nombre\}\
            description="Haz clic para m\'e1s info"\
          />\
        ))\}\
      </MapView>\
\
      <Button\
        title="Ver Lista de Negocios"\
        onPress=\{() => navigation.navigate('Negocios')\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, backgroundColor: '#fff', alignItems: 'center' \},\
  title: \{ fontSize: 22, fontWeight: 'bold', marginVertical: 16 \},\
  map: \{\
    width: Dimensions.get('window').width * 0.9,\
    height: 300,\
    marginBottom: 20,\
    borderRadius: 12,\
  \},\
\});\
\

\f7\fs34 \cf2 3\uc0\u65039 \u8419 
\f4\b  Flujo actualizado
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Home
\f1\b0  \uc0\u8594  muestra 
\f2\b todos los negocios en Caucel
\f1\b0  como markers.\
	\'95	
\f2\b Negocios
\f1\b0  \uc0\u8594  lista simple; si seleccionas uno, el Home se 
\f2\b centra en \'e9l
\f1\b0  pero 
\f2\b siguen apareciendo todos los markers
\f1\b0 .\
	\'95	As\'ed ya tienes un 
\f2\b mapa interactivo
\f1\b0  estilo directorio inmobiliario.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que en la 
\f2\b \cf2 versi\'f3n 0.5
\f1\b0 \cf2  los markers sean 
\f2\b \cf2 interactivos
\f1\b0 \cf2 , es decir, que al tocarlos abran un 
\f2\b \cf2 popup con bot\'f3n \'93Ver detalle\'94
\f1\b0 \cf2  que lleve a una pantalla de informaci\'f3n del negocio? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  entonces pasamos a la 
\f2\b \cf2 versi\'f3n 0.5
\f1\b0 \cf2  \uc0\u8594  donde los 
\f2\b \cf2 markers del mapa ya son interactivos
\f1\b0 \cf2 .\
\
Cuando el usuario toca un 
\f2\b \cf2 marker
\f1\b0 \cf2 , se abre un 
\f2\b \cf2 popup (callout)
\f1\b0 \cf2  con bot\'f3n para ir a la pantalla de detalle del negocio 
\f7 \uc0\u55356 \u57314 
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Actualizar HomeScreen.js\
import React from 'react';\
import \{ View, Text, Button, StyleSheet, Dimensions \} from 'react-native';\
import MapView, \{ Marker, Callout \} from 'react-native-maps';\
import \{ negocios \} from '../data/negocios';\
\
export default function HomeScreen(\{ navigation, route \}) \{\
  const negocioSeleccionado = route.params?.negocio;\
\
  const defaultRegion = \{\
    latitude: 20.9951,\
    longitude: -89.6930,\
    latitudeDelta: 0.05,\
    longitudeDelta: 0.05,\
  \};\
\
  const region = negocioSeleccionado\
    ? \{\
        latitude: negocioSeleccionado.lat,\
        longitude: negocioSeleccionado.lng,\
        latitudeDelta: 0.02,\
        longitudeDelta: 0.02,\
      \}\
    : defaultRegion;\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>Directorio Inmobiliario 
\f7\b0 \uc0\u55357 \u56525 
\f4\b </Text>\
\
      <MapView style=\{styles.map\} initialRegion=\{region\}>\
        \{negocios.map((n) => (\
          <Marker\
            key=\{n.id\}\
            coordinate=\{\{ latitude: n.lat, longitude: n.lng \}\}\
          >\
            <Callout\
              onPress=\{() => navigation.navigate('Detalle', \{ negocio: n \})\}\
            >\
              <View style=\{styles.callout\}>\
                <Text style=\{styles.calloutTitle\}>\{n.nombre\}</Text>\
                <Button\
                  title="Ver detalle"\
                  onPress=\{() => navigation.navigate('Detalle', \{ negocio: n \})\}\
                />\
              </View>\
            </Callout>\
          </Marker>\
        ))\}\
      </MapView>\
\
      <Button\
        title="Ver Lista de Negocios"\
        onPress=\{() => navigation.navigate('Negocios')\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, backgroundColor: '#fff', alignItems: 'center' \},\
  title: \{ fontSize: 22, fontWeight: 'bold', marginVertical: 16 \},\
  map: \{\
    width: Dimensions.get('window').width * 0.9,\
    height: 300,\
    marginBottom: 20,\
    borderRadius: 12,\
  \},\
  callout: \{ width: 200, alignItems: 'center' \},\
  calloutTitle: \{ fontSize: 16, fontWeight: 'bold', marginBottom: 8 \},\
\});\
\

\f7\b0 2\uc0\u65039 \u8419 
\f4\b  Nueva pantalla DetalleScreen.js\
import React from 'react';\
import \{ View, Text, StyleSheet \} from 'react-native';\
\
export default function DetalleScreen(\{ route \}) \{\
  const \{ negocio \} = route.params;\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>\{negocio.nombre\}</Text>\
      <Text style=\{styles.subtitle\}>Informaci\'f3n del negocio</Text>\
      <Text>
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Lat: \{negocio.lat\}</Text>\
      <Text>
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Lng: \{negocio.lng\}</Text>\
      <Text style=\{styles.info\}>Aqu\'ed puedes agregar m\'e1s datos: direcci\'f3n, contacto, fotos, etc.</Text>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, alignItems: 'center', justifyContent: 'center', padding: 20 \},\
  title: \{ fontSize: 24, fontWeight: 'bold', marginBottom: 12 \},\
  subtitle: \{ fontSize: 18, marginBottom: 8 \},\
  info: \{ marginTop: 16, fontStyle: 'italic', textAlign: 'center' \},\
\});\
\

\f7\b0 3\uc0\u65039 \u8419 
\f4\b  Agregar la nueva ruta en App.js\
import DetalleScreen from './screens/DetalleScreen';\
\
<Stack.Navigator>\
  <Stack.Screen name="Home" component=\{HomeScreen\} />\
  <Stack.Screen name="Negocios" component=\{NegociosScreen\} />\
  <Stack.Screen name="Detalle" component=\{DetalleScreen\} />\
</Stack.Navigator>\
\

\f7\b0\fs28 \cf2 \uc0\u9989 
\f1  Con esto:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	En el 
\f2\b mapa
\f1\b0 , si tocas un marker \uc0\u8594  se abre un popup.\
	\'95	Desde el popup, bot\'f3n 
\f2\b \'93Ver detalle\'94
\f1\b0  \uc0\u8594  lleva a la pantalla 
\f2\b Detalle
\f1\b0  del negocio.\
	\'95	Ya tienes el flujo 
\f2\b Mapa 
\f3 \uc0\u8594 
\f2  Popup 
\f3 \uc0\u8594 
\f2  Detalle
\f1\b0  funcionando.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que en la 
\f2\b \cf2 versi\'f3n 0.6
\f1\b0 \cf2  el detalle incluya 
\f2\b \cf2 imagen + direcci\'f3n + tel\'e9fono + bot\'f3n para abrir WhatsApp o Google Maps
\f1\b0 \cf2 ? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  entonces en la 
\f2\b \cf2 versi\'f3n 0.6
\f1\b0 \cf2  vamos a enriquecer la 
\f2\b \cf2 pantalla de detalle del negocio
\f1\b0 \cf2 .\
\
Le agregaremos:\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f7 \cf2 \uc0\u55357 \u56568 
\f6 \cf2  Imagen del negocio.\
	2.	
\f7 \cf2 \uc0\u55356 \u57312 
\f6 \cf2  Direcci\'f3n.\
	3.	
\f7 \cf2 \uc0\u55357 \u56542 
\f6 \cf2  Tel\'e9fono.\
	4.	
\f7 \cf2 \uc0\u55357 \u56599 
\f6 \cf2  Botones de acci\'f3n:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Abrir en 
\f2\b \cf2 WhatsApp
\f1\b0 \cf2 .\
	\'95	Abrir en 
\f2\b \cf2 Google Maps
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Actualizar data/negocios.js
\f1\b0\fs28 \cf2 \
\
Agregamos m\'e1s informaci\'f3n a cada negocio:\
export const negocios = [\
  \{\
    id: 1,\
    nombre: "Constructora M\'e9rida",\
    lat: 20.96737,\
    lng: -89.59259,\
    direccion: "Calle 60 #500, Centro, M\'e9rida, Yucat\'e1n",\
    telefono: "+529991234567",\
    imagen: "https://via.placeholder.com/300x200.png?text=Constructora+Merida"\
  \},\
  \{\
    id: 2,\
    nombre: "Desarrollos Yucat\'e1n",\
    lat: 20.99437,\
    lng: -89.70059,\
    direccion: "Av. Garc\'eda Lav\'edn #210, M\'e9rida, Yucat\'e1n",\
    telefono: "+529998765432",\
    imagen: "https://via.placeholder.com/300x200.png?text=Desarrollos+Yucatan"\
  \}\
];\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  Modificar DetalleScreen.js\
import React from 'react';\
import \{ View, Text, StyleSheet, Image, Button, Linking, ScrollView \} from 'react-native';\
\
export default function DetalleScreen(\{ route \}) \{\
  const \{ negocio \} = route.params;\
\
  const abrirWhatsApp = () => \{\
    const url = `https://wa.me/$\{negocio.telefono.replace('+', '')\}`;\
    Linking.openURL(url);\
  \};\
\
  const abrirGoogleMaps = () => \{\
    const url = `https://www.google.com/maps?q=$\{negocio.lat\},$\{negocio.lng\}`;\
    Linking.openURL(url);\
  \};\
\
  return (\
    <ScrollView contentContainerStyle=\{styles.container\}>\
      <Text style=\{styles.title\}>\{negocio.nombre\}</Text>\
\
      <Image source=\{\{ uri: negocio.imagen \}\} style=\{styles.imagen\} />\
\
      <Text style=\{styles.subtitle\}>
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Direcci\'f3n:</Text>\
      <Text style=\{styles.text\}>\{negocio.direccion\}</Text>\
\
      <Text style=\{styles.subtitle\}>
\f7\b0 \uc0\u55357 \u56542 
\f4\b  Tel\'e9fono:</Text>\
      <Text style=\{styles.text\}>\{negocio.telefono\}</Text>\
\
      <View style=\{styles.buttons\}>\
        <Button title="Enviar WhatsApp" onPress=\{abrirWhatsApp\} color="#25D366" />\
        <Button title="Abrir en Google Maps" onPress=\{abrirGoogleMaps\} color="#4285F4" />\
      </View>\
    </ScrollView>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flexGrow: 1, alignItems: 'center', padding: 20, backgroundColor: '#fff' \},\
  title: \{ fontSize: 24, fontWeight: 'bold', marginBottom: 12, textAlign: 'center' \},\
  imagen: \{ width: '100%', height: 200, borderRadius: 8, marginBottom: 16 \},\
  subtitle: \{ fontSize: 18, fontWeight: 'bold', marginTop: 10 \},\
  text: \{ fontSize: 16, marginBottom: 8, textAlign: 'center' \},\
  buttons: \{ width: '100%', marginTop: 20, gap: 12 \},\
\});\
\

\f7\b0 \uc0\u55357 \u56613 
\f4\b  Flujo ahora
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Desde el 
\f2\b mapa
\f1\b0 , seleccionas un negocio \uc0\u8594  bot\'f3n 
\f11\i \cf2 Ver detalle
\f1\i0 \cf2 .\
	\'95	En 
\f2\b Detalle
\f1\b0 , aparece:\

\f7 \uc0\u9989 
\f1  Foto\

\f7 \uc0\u9989 
\f1  Direcci\'f3n\

\f7 \uc0\u9989 
\f1  Tel\'e9fono\

\f7 \uc0\u9989 
\f1  Bot\'f3n de WhatsApp (abre chat con el n\'famero)\

\f7 \uc0\u9989 
\f1  Bot\'f3n de Google Maps (abre ubicaci\'f3n en Maps)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que la 
\f2\b \cf2 versi\'f3n 0.7
\f1\b0 \cf2  ya tenga un dise\'f1o m\'e1s pro tipo 
\f2\b \cf2 card UI
\f1\b0 \cf2  con Material Design / estilo moderno? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1  en la 
\f2\b \cf2 versi\'f3n 0.7
\f1\b0 \cf2  vamos a darle un 
\f2\b \cf2 look moderno
\f1\b0 \cf2  a la pantalla de detalle con un estilo tipo 
\f2\b \cf2 card UI
\f1\b0 \cf2 , sombras, mejor tipograf\'eda y botones m\'e1s atractivos.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Nuevo dise\'f1o DetalleScreen.js\
import React from 'react';\
import \{ View, Text, StyleSheet, Image, TouchableOpacity, Linking, ScrollView \} from 'react-native';\
\
export default function DetalleScreen(\{ route \}) \{\
  const \{ negocio \} = route.params;\
\
  const abrirWhatsApp = () => \{\
    const url = `https://wa.me/$\{negocio.telefono.replace('+', '')\}`;\
    Linking.openURL(url);\
  \};\
\
  const abrirGoogleMaps = () => \{\
    const url = `https://www.google.com/maps?q=$\{negocio.lat\},$\{negocio.lng\}`;\
    Linking.openURL(url);\
  \};\
\
  return (\
    <ScrollView contentContainerStyle=\{styles.container\}>\
      <View style=\{styles.card\}>\
        <Image source=\{\{ uri: negocio.imagen \}\} style=\{styles.imagen\} />\
        <Text style=\{styles.title\}>\{negocio.nombre\}</Text>\
\
        <View style=\{styles.infoBox\}>\
          <Text style=\{styles.subtitle\}>
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Direcci\'f3n</Text>\
          <Text style=\{styles.text\}>\{negocio.direccion\}</Text>\
        </View>\
\
        <View style=\{styles.infoBox\}>\
          <Text style=\{styles.subtitle\}>
\f7\b0 \uc0\u55357 \u56542 
\f4\b  Tel\'e9fono</Text>\
          <Text style=\{styles.text\}>\{negocio.telefono\}</Text>\
        </View>\
\
        <View style=\{styles.buttons\}>\
          <TouchableOpacity style=\{[styles.btn, \{ backgroundColor: '#25D366' \}]\} onPress=\{abrirWhatsApp\}>\
            <Text style=\{styles.btnText\}>WhatsApp</Text>\
          </TouchableOpacity>\
\
          <TouchableOpacity style=\{[styles.btn, \{ backgroundColor: '#4285F4' \}]\} onPress=\{abrirGoogleMaps\}>\
            <Text style=\{styles.btnText\}>Google Maps</Text>\
          </TouchableOpacity>\
        </View>\
      </View>\
    </ScrollView>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flexGrow: 1,\
    justifyContent: 'center',\
    alignItems: 'center',\
    padding: 20,\
    backgroundColor: '#f5f5f5'\
  \},\
  card: \{\
    backgroundColor: '#fff',\
    borderRadius: 12,\
    padding: 16,\
    width: '100%',\
    shadowColor: '#000',\
    shadowOffset: \{ width: 0, height: 3 \},\
    shadowOpacity: 0.2,\
    shadowRadius: 4,\
    elevation: 5,\
    alignItems: 'center'\
  \},\
  imagen: \{\
    width: '100%',\
    height: 200,\
    borderRadius: 12,\
    marginBottom: 16\
  \},\
  title: \{\
    fontSize: 22,\
    fontWeight: 'bold',\
    marginBottom: 16,\
    textAlign: 'center',\
    color: '#333'\
  \},\
  infoBox: \{\
    width: '100%',\
    marginBottom: 12,\
    padding: 10,\
    borderRadius: 8,\
    backgroundColor: '#fafafa'\
  \},\
  subtitle: \{\
    fontSize: 16,\
    fontWeight: '600',\
    marginBottom: 4,\
    color: '#666'\
  \},\
  text: \{\
    fontSize: 15,\
    color: '#444'\
  \},\
  buttons: \{\
    flexDirection: 'row',\
    justifyContent: 'space-between',\
    marginTop: 20,\
    width: '100%'\
  \},\
  btn: \{\
    flex: 1,\
    padding: 12,\
    marginHorizontal: 6,\
    borderRadius: 8,\
    alignItems: 'center'\
  \},\
  btnText: \{\
    color: '#fff',\
    fontSize: 16,\
    fontWeight: '600'\
  \}\
\});\
\

\f7\b0 \uc0\u55357 \u56960 
\f4\b  Cambios visuales
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Fondo gris claro 
\f7 \uc0\u55358 \u57014 
\f1 \
	\'95	Tarjeta blanca con 
\f2\b sombra
\f1\b0  (elevation en Android, shadow en iOS).\
	\'95	Imagen con bordes redondeados.\
	\'95	Bloques de info (direcci\'f3n y tel\'e9fono) como mini-cards.\
	\'95	Botones 
\f2\b estilo modernos
\f1\b0 , grandes y f\'e1ciles de usar.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que la 
\f2\b \cf2 versi\'f3n 0.8
\f1\b0 \cf2  ya tenga un 
\f2\b \cf2 mapa embebido en la pantalla de detalle
\f1\b0 \cf2  (mini Google Maps dentro de la card con un marcador)? Si\
\
Excelente 
\f7 \uc0\u55357 \u56960 
\f1  entonces la 
\f2\b \cf2 versi\'f3n 0.8
\f1\b0 \cf2  llevar\'e1 un 
\f2\b \cf2 mapa embebido
\f1\b0 \cf2  en la pantalla de detalle.\
\
Vamos a usar 
\f2\b \cf2 react-native-maps
\f1\b0 \cf2  para mostrar un mini mapa con el marcador de la ubicaci\'f3n del negocio.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Instalar dependencia
\f1\b0\fs28 \cf2 \
\
En tu proyecto corre:\
npm install react-native-maps\
\
Si usas 
\f2\b \cf2 Expo
\f1\b0 \cf2 , es a\'fan m\'e1s f\'e1cil:\
expo install react-native-maps\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  C\'f3digo actualizado de DetalleScreen.js\
import React from 'react';\
import \{ View, Text, StyleSheet, Image, TouchableOpacity, Linking, ScrollView \} from 'react-native';\
import MapView, \{ Marker \} from 'react-native-maps';\
\
export default function DetalleScreen(\{ route \}) \{\
  const \{ negocio \} = route.params;\
\
  const abrirWhatsApp = () => \{\
    const url = `https://wa.me/$\{negocio.telefono.replace('+', '')\}`;\
    Linking.openURL(url);\
  \};\
\
  const abrirGoogleMaps = () => \{\
    const url = `https://www.google.com/maps?q=$\{negocio.lat\},$\{negocio.lng\}`;\
    Linking.openURL(url);\
  \};\
\
  return (\
    <ScrollView contentContainerStyle=\{styles.container\}>\
      <View style=\{styles.card\}>\
        <Image source=\{\{ uri: negocio.imagen \}\} style=\{styles.imagen\} />\
        <Text style=\{styles.title\}>\{negocio.nombre\}</Text>\
\
        <View style=\{styles.infoBox\}>\
          <Text style=\{styles.subtitle\}>
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Direcci\'f3n</Text>\
          <Text style=\{styles.text\}>\{negocio.direccion\}</Text>\
        </View>\
\
        <View style=\{styles.mapContainer\}>\
          <MapView\
            style=\{styles.map\}\
            initialRegion=\{\{\
              latitude: negocio.lat,\
              longitude: negocio.lng,\
              latitudeDelta: 0.01,\
              longitudeDelta: 0.01,\
            \}\}\
          >\
            <Marker\
              coordinate=\{\{ latitude: negocio.lat, longitude: negocio.lng \}\}\
              title=\{negocio.nombre\}\
              description=\{negocio.direccion\}\
            />\
          </MapView>\
        </View>\
\
        <View style=\{styles.infoBox\}>\
          <Text style=\{styles.subtitle\}>
\f7\b0 \uc0\u55357 \u56542 
\f4\b  Tel\'e9fono</Text>\
          <Text style=\{styles.text\}>\{negocio.telefono\}</Text>\
        </View>\
\
        <View style=\{styles.buttons\}>\
          <TouchableOpacity style=\{[styles.btn, \{ backgroundColor: '#25D366' \}]\} onPress=\{abrirWhatsApp\}>\
            <Text style=\{styles.btnText\}>WhatsApp</Text>\
          </TouchableOpacity>\
\
          <TouchableOpacity style=\{[styles.btn, \{ backgroundColor: '#4285F4' \}]\} onPress=\{abrirGoogleMaps\}>\
            <Text style=\{styles.btnText\}>Google Maps</Text>\
          </TouchableOpacity>\
        </View>\
      </View>\
    </ScrollView>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flexGrow: 1,\
    justifyContent: 'center',\
    alignItems: 'center',\
    padding: 20,\
    backgroundColor: '#f5f5f5'\
  \},\
  card: \{\
    backgroundColor: '#fff',\
    borderRadius: 12,\
    padding: 16,\
    width: '100%',\
    shadowColor: '#000',\
    shadowOffset: \{ width: 0, height: 3 \},\
    shadowOpacity: 0.2,\
    shadowRadius: 4,\
    elevation: 5,\
    alignItems: 'center'\
  \},\
  imagen: \{\
    width: '100%',\
    height: 200,\
    borderRadius: 12,\
    marginBottom: 16\
  \},\
  title: \{\
    fontSize: 22,\
    fontWeight: 'bold',\
    marginBottom: 16,\
    textAlign: 'center',\
    color: '#333'\
  \},\
  infoBox: \{\
    width: '100%',\
    marginBottom: 12,\
    padding: 10,\
    borderRadius: 8,\
    backgroundColor: '#fafafa'\
  \},\
  subtitle: \{\
    fontSize: 16,\
    fontWeight: '600',\
    marginBottom: 4,\
    color: '#666'\
  \},\
  text: \{\
    fontSize: 15,\
    color: '#444'\
  \},\
  mapContainer: \{\
    width: '100%',\
    height: 200,\
    borderRadius: 12,\
    overflow: 'hidden',\
    marginBottom: 16\
  \},\
  map: \{\
    width: '100%',\
    height: '100%'\
  \},\
  buttons: \{\
    flexDirection: 'row',\
    justifyContent: 'space-between',\
    marginTop: 20,\
    width: '100%'\
  \},\
  btn: \{\
    flex: 1,\
    padding: 12,\
    marginHorizontal: 6,\
    borderRadius: 8,\
    alignItems: 'center'\
  \},\
  btnText: \{\
    color: '#fff',\
    fontSize: 16,\
    fontWeight: '600'\
  \}\
\});\
\

\f7\b0 \uc0\u55357 \u56960 
\f4\b  Ahora tu app
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Muestra 
\f2\b imagen + datos del negocio
\f1\b0 \
	\'95	Renderiza un 
\f2\b mini Google Maps embebido con marcador
\f1\b0 \
	\'95	Permite abrir 
\f2\b WhatsApp
\f1\b0  y 
\f2\b Google Maps nativo
\f1\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que la 
\f2\b \cf2 versi\'f3n 0.9
\f1\b0 \cf2  tenga un 
\f2\b \cf2 bot\'f3n flotante (FAB)
\f1\b0 \cf2  que siempre muestre acceso directo a WhatsApp y Google Maps, en lugar de solo los botones planos? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
En la 
\f2\b \cf2 versi\'f3n 0.9
\f1\b0 \cf2  vamos a a\'f1adir un 
\f2\b \cf2 FAB (Floating Action Button)
\f1\b0 \cf2 , estilo 
\f2\b \cf2 c\'edrculo flotante
\f1\b0 \cf2  en la esquina inferior derecha, que al presionarlo despliega dos accesos r\'e1pidos: 
\f2\b \cf2 WhatsApp
\f1\b0 \cf2  y 
\f2\b \cf2 Google Maps
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 1\uc0\u65039 \u8419 
\f4\b  Instalar librer\'eda de botones flotantes
\f1\b0\fs28 \cf2 \
\
Si usas 
\f2\b \cf2 Expo
\f1\b0 \cf2  o React Native puro, puedes instalar:\
npm install react-native-floating-action\
\
O con Expo:\
expo install react-native-floating-action\
\

\f7\fs34 \cf2 2\uc0\u65039 \u8419 
\f4\b  C\'f3digo actualizado DetalleScreen.js con FAB\
import React from 'react';\
import \{ View, Text, StyleSheet, Image, TouchableOpacity, Linking, ScrollView \} from 'react-native';\
import MapView, \{ Marker \} from 'react-native-maps';\
import \{ FloatingAction \} from "react-native-floating-action";\
\
export default function DetalleScreen(\{ route \}) \{\
  const \{ negocio \} = route.params;\
\
  const abrirWhatsApp = () => \{\
    const url = `https://wa.me/$\{negocio.telefono.replace('+', '')\}`;\
    Linking.openURL(url);\
  \};\
\
  const abrirGoogleMaps = () => \{\
    const url = `https://www.google.com/maps?q=$\{negocio.lat\},$\{negocio.lng\}`;\
    Linking.openURL(url);\
  \};\
\
  const actions = [\
    \{\
      text: "WhatsApp",\
      icon: require("../assets/whatsapp.png"), // agrega \'edcono a tu carpeta assets\
      name: "whatsapp",\
      position: 1,\
      color: "#25D366"\
    \},\
    \{\
      text: "Google Maps",\
      icon: require("../assets/maps.png"), // agrega \'edcono de Google Maps\
      name: "maps",\
      position: 2,\
      color: "#4285F4"\
    \}\
  ];\
\
  return (\
    <View style=\{\{ flex: 1 \}\}>\
      <ScrollView contentContainerStyle=\{styles.container\}>\
        <View style=\{styles.card\}>\
          <Image source=\{\{ uri: negocio.imagen \}\} style=\{styles.imagen\} />\
          <Text style=\{styles.title\}>\{negocio.nombre\}</Text>\
\
          <View style=\{styles.infoBox\}>\
            <Text style=\{styles.subtitle\}>
\f7\b0 \uc0\u55357 \u56525 
\f4\b  Direcci\'f3n</Text>\
            <Text style=\{styles.text\}>\{negocio.direccion\}</Text>\
          </View>\
\
          <View style=\{styles.mapContainer\}>\
            <MapView\
              style=\{styles.map\}\
              initialRegion=\{\{\
                latitude: negocio.lat,\
                longitude: negocio.lng,\
                latitudeDelta: 0.01,\
                longitudeDelta: 0.01,\
              \}\}\
            >\
              <Marker\
                coordinate=\{\{ latitude: negocio.lat, longitude: negocio.lng \}\}\
                title=\{negocio.nombre\}\
                description=\{negocio.direccion\}\
              />\
            </MapView>\
          </View>\
\
          <View style=\{styles.infoBox\}>\
            <Text style=\{styles.subtitle\}>
\f7\b0 \uc0\u55357 \u56542 
\f4\b  Tel\'e9fono</Text>\
            <Text style=\{styles.text\}>\{negocio.telefono\}</Text>\
          </View>\
        </View>\
      </ScrollView>\
\
      \{/* FAB flotante */\}\
      <FloatingAction\
        actions=\{actions\}\
        color="#ff6f00"\
        onPressItem=\{name => \{\
          if (name === "whatsapp") abrirWhatsApp();\
          if (name === "maps") abrirGoogleMaps();\
        \}\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flexGrow: 1,\
    alignItems: 'center',\
    padding: 20,\
    backgroundColor: '#f5f5f5'\
  \},\
  card: \{\
    backgroundColor: '#fff',\
    borderRadius: 12,\
    padding: 16,\
    width: '100%',\
    shadowColor: '#000',\
    shadowOffset: \{ width: 0, height: 3 \},\
    shadowOpacity: 0.2,\
    shadowRadius: 4,\
    elevation: 5,\
    alignItems: 'center'\
  \},\
  imagen: \{\
    width: '100%',\
    height: 200,\
    borderRadius: 12,\
    marginBottom: 16\
  \},\
  title: \{\
    fontSize: 22,\
    fontWeight: 'bold',\
    marginBottom: 16,\
    textAlign: 'center',\
    color: '#333'\
  \},\
  infoBox: \{\
    width: '100%',\
    marginBottom: 12,\
    padding: 10,\
    borderRadius: 8,\
    backgroundColor: '#fafafa'\
  \},\
  subtitle: \{\
    fontSize: 16,\
    fontWeight: '600',\
    marginBottom: 4,\
    color: '#666'\
  \},\
  text: \{\
    fontSize: 15,\
    color: '#444'\
  \},\
  mapContainer: \{\
    width: '100%',\
    height: 200,\
    borderRadius: 12,\
    overflow: 'hidden',\
    marginBottom: 16\
  \},\
  map: \{\
    width: '100%',\
    height: '100%'\
  \}\
\});\
\

\f7\b0\fs28 \cf2 \uc0\u9989 
\f1  Ahora tu app tiene un 
\f2\b \cf2 bot\'f3n flotante principal
\f1\b0 \cf2  que al tocarlo despliega 
\f2\b \cf2 dos accesos r\'e1pidos con \'edconos
\f1\b0 \cf2 :\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b WhatsApp
\f1\b0  \uc0\u8594  abre el chat con el negocio\
	\'95	
\f2\b Google Maps
\f1\b0  \uc0\u8594  abre la ubicaci\'f3n directamente\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que en la 
\f2\b \cf2 versi\'f3n 1.0
\f1\b0 \cf2  integremos un 
\f2\b \cf2 listado con buscador y filtros
\f1\b0 \cf2  (ej. categor\'eda de constructoras, inmobiliarias, desarrolladores) para que la app ya funcione como un mini-directorio profesional? Si\
\
Excelente 
\f7 \uc0\u55357 \u56613 
\f1  entonces en la 
\f2\b \cf2 versi\'f3n 1.0
\f1\b0 \cf2  vamos a darle un salto fuerte a tu directorio:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 \uc0\u9989 
\f4\b  Lo que agregaremos
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Pantalla de Listado de Negocios
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Mostrar\'e1 todas las constructoras, desarrolladores e inmobiliarias.\
	\'95	Cada \'edtem con logo, nombre y breve descripci\'f3n.\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	2.	
\f2\b \cf2 Buscador en tiempo real
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Filtra negocios por nombre.\
	\'95	Ejemplo: escribes \'93Lomas\'94 y solo aparece 
\f11\i \cf2 Constructora Lomas del Sur
\f1\i0 \cf2 .\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	3.	
\f2\b \cf2 Filtros por categor\'eda
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Botones (tags) para seleccionar: 
\f11\i \cf2 Constructoras, Desarrolladores, Inmobiliarias
\f1\i0 \cf2 .\
	\'95	Al tocar un filtro, se actualiza la lista.\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	4.	
\f2\b \cf2 Integraci\'f3n con DetalleScreen
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Al tocar un negocio, abre el detalle con mapa y FAB de WhatsApp / Google Maps (ya listo en v0.9 
\f7 \uc0\u55357 \u56960 
\f1 ).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 1\uc0\u65039 \u8419 
\f4\b  Crear archivo ListadoScreen.js\
import React, \{ useState \} from 'react';\
import \{ View, Text, StyleSheet, FlatList, TextInput, TouchableOpacity, Image \} from 'react-native';\
\
const negocios = [\
  \{\
    id: '1',\
    nombre: 'Constructora Lomas del Sur',\
    categoria: 'Constructora',\
    imagen: 'https://picsum.photos/200/200',\
    direccion: 'Av. Reforma 123, M\'e9rida',\
    telefono: '+529991234567',\
    lat: 20.967370,\
    lng: -89.592586\
  \},\
  \{\
    id: '2',\
    nombre: 'Desarrollos Riviera Maya',\
    categoria: 'Desarrollador',\
    imagen: 'https://picsum.photos/200/201',\
    direccion: 'Playa del Carmen',\
    telefono: '+529983334455',\
    lat: 20.6274,\
    lng: -87.0799\
  \},\
  \{\
    id: '3',\
    nombre: 'Luxury Inmobiliaria',\
    categoria: 'Inmobiliaria',\
    imagen: 'https://picsum.photos/200/202',\
    direccion: 'Puerto Canc\'fan',\
    telefono: '+529981112233',\
    lat: 21.1619,\
    lng: -86.8515\
  \}\
];\
\
export default function ListadoScreen(\{ navigation \}) \{\
  const [textoBusqueda, setTextoBusqueda] = useState('');\
  const [categoriaSeleccionada, setCategoriaSeleccionada] = useState('Todos');\
\
  const filtrarNegocios = () => \{\
    return negocios.filter(negocio => \{\
      const matchBusqueda = negocio.nombre.toLowerCase().includes(textoBusqueda.toLowerCase());\
      const matchCategoria = categoriaSeleccionada === 'Todos' || negocio.categoria === categoriaSeleccionada;\
      return matchBusqueda && matchCategoria;\
    \});\
  \};\
\
  const categorias = ['Todos', 'Constructora', 'Desarrollador', 'Inmobiliaria'];\
\
  return (\
    <View style=\{styles.container\}>\
      \{/* Buscador */\}\
      <TextInput\
        style=\{styles.searchBar\}\
        placeholder="
\f7\b0 \uc0\u55357 \u56589 
\f4\b  Buscar negocio..."\
        value=\{textoBusqueda\}\
        onChangeText=\{setTextoBusqueda\}\
      />\
\
      \{/* Filtros */\}\
      <View style=\{styles.filters\}>\
        \{categorias.map(cat => (\
          <TouchableOpacity\
            key=\{cat\}\
            style=\{[\
              styles.filterButton,\
              categoriaSeleccionada === cat && styles.filterSelected\
            ]\}\
            onPress=\{() => setCategoriaSeleccionada(cat)\}\
          >\
            <Text style=\{styles.filterText\}>\{cat\}</Text>\
          </TouchableOpacity>\
        ))\}\
      </View>\
\
      \{/* Lista de negocios */\}\
      <FlatList\
        data=\{filtrarNegocios()\}\
        keyExtractor=\{(item) => item.id\}\
        renderItem=\{(\{ item \}) => (\
          <TouchableOpacity\
            style=\{styles.card\}\
            onPress=\{() => navigation.navigate('Detalle', \{ negocio: item \})\}\
          >\
            <Image source=\{\{ uri: item.imagen \}\} style=\{styles.imagen\} />\
            <View style=\{styles.info\}>\
              <Text style=\{styles.nombre\}>\{item.nombre\}</Text>\
              <Text style=\{styles.categoria\}>\{item.categoria\}</Text>\
              <Text style=\{styles.direccion\}>\{item.direccion\}</Text>\
            </View>\
          </TouchableOpacity>\
        )\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, backgroundColor: '#f5f5f5', padding: 10 \},\
  searchBar: \{\
    backgroundColor: '#fff',\
    borderRadius: 8,\
    padding: 10,\
    marginBottom: 10,\
    fontSize: 16\
  \},\
  filters: \{\
    flexDirection: 'row',\
    marginBottom: 10,\
    justifyContent: 'space-around'\
  \},\
  filterButton: \{\
    paddingVertical: 6,\
    paddingHorizontal: 14,\
    borderRadius: 20,\
    backgroundColor: '#ddd'\
  \},\
  filterSelected: \{\
    backgroundColor: '#ff6f00'\
  \},\
  filterText: \{ color: '#fff', fontWeight: 'bold' \},\
  card: \{\
    flexDirection: 'row',\
    backgroundColor: '#fff',\
    marginBottom: 10,\
    padding: 12,\
    borderRadius: 10,\
    elevation: 3\
  \},\
  imagen: \{ width: 70, height: 70, borderRadius: 10, marginRight: 10 \},\
  info: \{ flex: 1, justifyContent: 'center' \},\
  nombre: \{ fontSize: 16, fontWeight: 'bold', color: '#333' \},\
  categoria: \{ fontSize: 14, color: '#ff6f00', marginVertical: 2 \},\
  direccion: \{ fontSize: 12, color: '#666' \}\
\});\
\

\f7\b0 2\uc0\u65039 \u8419 
\f4\b  Actualizar App.js para navegaci\'f3n entre pantallas\
import React from 'react';\
import \{ NavigationContainer \} from '@react-navigation/native';\
import \{ createStackNavigator \} from '@react-navigation/stack';\
import ListadoScreen from './screens/ListadoScreen';\
import DetalleScreen from './screens/DetalleScreen';\
\
const Stack = createStackNavigator();\
\
export default function App() \{\
  return (\
    <NavigationContainer>\
      <Stack.Navigator>\
        <Stack.Screen name="Directorio" component=\{ListadoScreen\} />\
        <Stack.Screen name="Detalle" component=\{DetalleScreen\} />\
      </Stack.Navigator>\
    </NavigationContainer>\
  );\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs28 \cf2 \uc0\u55357 \u56960 
\f1  Con esto ya tienes la 
\f2\b \cf2 versi\'f3n 1.0
\f1\b0 \cf2 :\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Inicio en 
\f2\b pantalla de listado con buscador y filtros
\f1\b0 .\
	\'95	Cada negocio abre el 
\f2\b detalle con mapa + bot\'f3n flotante (WhatsApp / Maps)
\f1\b0 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que en la 
\f2\b \cf2 versi\'f3n 1.1
\f1\b0 \cf2  preparemos un 
\f2\b \cf2 archivo data/negocios.json
\f1\b0 \cf2  para separar los datos y que luego lo podamos conectar a una 
\f2\b \cf2 API real
\f1\b0 \cf2 ? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56613 
\f1  entonces en la 
\f2\b \cf2 versi\'f3n 1.1
\f1\b0 \cf2  vamos a organizar los datos en un archivo aparte (
\f5 \cf2 data/negocios.json
\f1 \cf2 ) para que sea m\'e1s f\'e1cil crecer el proyecto y luego conectarlo a una API real.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 1\uc0\u65039 \u8419 
\f4\b  Crear carpeta y archivo de datos
\f1\b0\fs28 \cf2 \
\
Dentro de tu proyecto crea la carpeta 
\f5 \cf2 data/
\f1 \cf2  y dentro un archivo llamado:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u55357 \u56514 
\f1  
\f5 \cf2 data/negocios.json\
[\
  \{\
    "id": "1",\
    "nombre": "Constructora Lomas del Sur",\
    "categoria": "Constructora",\
    "imagen": "https://picsum.photos/200/200",\
    "direccion": "Av. Reforma 123, M\'e9rida",\
    "telefono": "+529991234567",\
    "lat": 20.96737,\
    "lng": -89.592586\
  \},\
  \{\
    "id": "2",\
    "nombre": "Desarrollos Riviera Maya",\
    "categoria": "Desarrollador",\
    "imagen": "https://picsum.photos/200/201",\
    "direccion": "Playa del Carmen",\
    "telefono": "+529983334455",\
    "lat": 20.6274,\
    "lng": -87.0799\
  \},\
  \{\
    "id": "3",\
    "nombre": "Luxury Inmobiliaria",\
    "categoria": "Inmobiliaria",\
    "imagen": "https://picsum.photos/200/202",\
    "direccion": "Puerto Canc\'fan",\
    "telefono": "+529981112233",\
    "lat": 21.1619,\
    "lng": -86.8515\
  \}\
]\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 2\uc0\u65039 \u8419 
\f4\b  Modificar ListadoScreen.js para usar el JSON\
import React, \{ useState \} from 'react';\
import \{ View, Text, StyleSheet, FlatList, TextInput, TouchableOpacity, Image \} from 'react-native';\
\
// Importamos datos desde el JSON\
import negocios from '../data/negocios.json';\
\
export default function ListadoScreen(\{ navigation \}) \{\
  const [textoBusqueda, setTextoBusqueda] = useState('');\
  const [categoriaSeleccionada, setCategoriaSeleccionada] = useState('Todos');\
\
  const filtrarNegocios = () => \{\
    return negocios.filter(negocio => \{\
      const matchBusqueda = negocio.nombre.toLowerCase().includes(textoBusqueda.toLowerCase());\
      const matchCategoria = categoriaSeleccionada === 'Todos' || negocio.categoria === categoriaSeleccionada;\
      return matchBusqueda && matchCategoria;\
    \});\
  \};\
\
  const categorias = ['Todos', 'Constructora', 'Desarrollador', 'Inmobiliaria'];\
\
  return (\
    <View style=\{styles.container\}>\
      \{/* Buscador */\}\
      <TextInput\
        style=\{styles.searchBar\}\
        placeholder="
\f7\b0 \uc0\u55357 \u56589 
\f4\b  Buscar negocio..."\
        value=\{textoBusqueda\}\
        onChangeText=\{setTextoBusqueda\}\
      />\
\
      \{/* Filtros */\}\
      <View style=\{styles.filters\}>\
        \{categorias.map(cat => (\
          <TouchableOpacity\
            key=\{cat\}\
            style=\{[\
              styles.filterButton,\
              categoriaSeleccionada === cat && styles.filterSelected\
            ]\}\
            onPress=\{() => setCategoriaSeleccionada(cat)\}\
          >\
            <Text style=\{styles.filterText\}>\{cat\}</Text>\
          </TouchableOpacity>\
        ))\}\
      </View>\
\
      \{/* Lista */\}\
      <FlatList\
        data=\{filtrarNegocios()\}\
        keyExtractor=\{(item) => item.id\}\
        renderItem=\{(\{ item \}) => (\
          <TouchableOpacity\
            style=\{styles.card\}\
            onPress=\{() => navigation.navigate('Detalle', \{ negocio: item \})\}\
          >\
            <Image source=\{\{ uri: item.imagen \}\} style=\{styles.imagen\} />\
            <View style=\{styles.info\}>\
              <Text style=\{styles.nombre\}>\{item.nombre\}</Text>\
              <Text style=\{styles.categoria\}>\{item.categoria\}</Text>\
              <Text style=\{styles.direccion\}>\{item.direccion\}</Text>\
            </View>\
          </TouchableOpacity>\
        )\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, backgroundColor: '#f5f5f5', padding: 10 \},\
  searchBar: \{\
    backgroundColor: '#fff',\
    borderRadius: 8,\
    padding: 10,\
    marginBottom: 10,\
    fontSize: 16\
  \},\
  filters: \{\
    flexDirection: 'row',\
    marginBottom: 10,\
    justifyContent: 'space-around'\
  \},\
  filterButton: \{\
    paddingVertical: 6,\
    paddingHorizontal: 14,\
    borderRadius: 20,\
    backgroundColor: '#ddd'\
  \},\
  filterSelected: \{\
    backgroundColor: '#ff6f00'\
  \},\
  filterText: \{ color: '#fff', fontWeight: 'bold' \},\
  card: \{\
    flexDirection: 'row',\
    backgroundColor: '#fff',\
    marginBottom: 10,\
    padding: 12,\
    borderRadius: 10,\
    elevation: 3\
  \},\
  imagen: \{ width: 70, height: 70, borderRadius: 10, marginRight: 10 \},\
  info: \{ flex: 1, justifyContent: 'center' \},\
  nombre: \{ fontSize: 16, fontWeight: 'bold', color: '#333' \},\
  categoria: \{ fontSize: 14, color: '#ff6f00', marginVertical: 2 \},\
  direccion: \{ fontSize: 12, color: '#666' \}\
\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs28 \cf2 \uc0\u9989 
\f1  Con esto ya tenemos la 
\f2\b \cf2 versi\'f3n 1.1
\f1\b0 \cf2 :\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Los negocios est\'e1n en un archivo separado (
\f5 negocios.json
\f1 ).\
	\'95	
\f5 ListadoScreen
\f1  carga y filtra desde ese archivo.\
	\'95	F\'e1cil de crecer o reemplazar por datos de una API en el futuro.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que en la 
\f2\b \cf2 versi\'f3n 1.2
\f1\b0 \cf2  preparemos una 
\f2\b \cf2 API local con json-server
\f1\b0 \cf2  para que el app ya consuma datos por HTTP en vez de archivo est\'e1tico? Si\
\
Buen\'edsimo 
\f7 \uc0\u55357 \u56960 
\f1 \
\
Entonces en la 
\f2\b \cf2 versi\'f3n 1.2
\f1\b0 \cf2  vamos a simular un backend con 
\f2\b \cf2 json-server
\f1\b0 \cf2 , para que tu app ya consuma datos por 
\f2\b \cf2 HTTP
\f1\b0 \cf2  (igual que lo har\'eda con una API real).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 1: Instalar json-server
\f1\b0\fs28 \cf2 \
\
En la ra\'edz de tu proyecto (fuera de 
\f5 \cf2 src/
\f1 \cf2 ), corre:\
npm install -g json-server\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f11\i \cf2 (si prefieres, tambi\'e9n se puede instalar como dependencia local del proyecto)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\i0\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 2: Crear archivo db.json
\f1\b0\fs28 \cf2 \
\
En la ra\'edz del proyecto, crea:\
\

\f7 \uc0\u55357 \u56514 
\f1  
\f5 \cf2 db.json\
\{\
  "negocios": [\
    \{\
      "id": "1",\
      "nombre": "Constructora Lomas del Sur",\
      "categoria": "Constructora",\
      "imagen": "https://picsum.photos/200/200",\
      "direccion": "Av. Reforma 123, M\'e9rida",\
      "telefono": "+529991234567",\
      "lat": 20.96737,\
      "lng": -89.592586\
    \},\
    \{\
      "id": "2",\
      "nombre": "Desarrollos Riviera Maya",\
      "categoria": "Desarrollador",\
      "imagen": "https://picsum.photos/200/201",\
      "direccion": "Playa del Carmen",\
      "telefono": "+529983334455",\
      "lat": 20.6274,\
      "lng": -87.0799\
    \},\
    \{\
      "id": "3",\
      "nombre": "Luxury Inmobiliaria",\
      "categoria": "Inmobiliaria",\
      "imagen": "https://picsum.photos/200/202",\
      "direccion": "Puerto Canc\'fan",\
      "telefono": "+529981112233",\
      "lat": 21.1619,\
      "lng": -86.8515\
    \}\
  ]\
\}\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 3: Levantar el servidor fake
\f1\b0\fs28 \cf2 \
\
En consola:\
json-server --watch db.json --port 3001\
\
Esto te da un endpoint REST listo para usar:\

\f7 \uc0\u55357 \u56393 
\f1  
\f5 \cf2 http://localhost:3001/negocios
\f1 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 4: Modificar ListadoScreen.js para consumir la API
\f1\b0\fs28 \cf2 \
\
Ahora el listado ya no importar\'e1 un JSON, sino que 
\f2\b \cf2 usar\'e1 fetch para traer datos del servidor
\f1\b0 \cf2 .\
\
import React, \{ useState, useEffect \} from 'react';\
import \{ View, Text, StyleSheet, FlatList, TextInput, TouchableOpacity, Image, ActivityIndicator \} from 'react-native';\
\
export default function ListadoScreen(\{ navigation \}) \{\
  const [negocios, setNegocios] = useState([]);\
  const [textoBusqueda, setTextoBusqueda] = useState('');\
  const [categoriaSeleccionada, setCategoriaSeleccionada] = useState('Todos');\
  const [loading, setLoading] = useState(true);\
\
  useEffect(() => \{\
    fetch('http://localhost:3001/negocios') // 
\f7 \uc0\u9888 \u65039 
\f1  Cambiar localhost por tu IP si pruebas en celular\
      .then(res => res.json())\
      .then(data => \{\
        setNegocios(data);\
        setLoading(false);\
      \})\
      .catch(err => \{\
        console.error(err);\
        setLoading(false);\
      \});\
  \}, []);\
\
  const filtrarNegocios = () => \{\
    return negocios.filter(negocio => \{\
      const matchBusqueda = negocio.nombre.toLowerCase().includes(textoBusqueda.toLowerCase());\
      const matchCategoria = categoriaSeleccionada === 'Todos' || negocio.categoria === categoriaSeleccionada;\
      return matchBusqueda && matchCategoria;\
    \});\
  \};\
\
  const categorias = ['Todos', 'Constructora', 'Desarrollador', 'Inmobiliaria'];\
\
  if (loading) \{\
    return (\
      <View style=\{styles.center\}>\
        <ActivityIndicator size="large" color="#ff6f00" />\
        <Text>Cargando negocios...</Text>\
      </View>\
    );\
  \}\
\
  return (\
    <View style=\{styles.container\}>\
      \{/* Buscador */\}\
      <TextInput\
        style=\{styles.searchBar\}\
        placeholder="
\f7 \uc0\u55357 \u56589 
\f1  Buscar negocio..."\
        value=\{textoBusqueda\}\
        onChangeText=\{setTextoBusqueda\}\
      />\
\
      \{/* Filtros */\}\
      <View style=\{styles.filters\}>\
        \{categorias.map(cat => (\
          <TouchableOpacity\
            key=\{cat\}\
            style=\{[\
              styles.filterButton,\
              categoriaSeleccionada === cat && styles.filterSelected\
            ]\}\
            onPress=\{() => setCategoriaSeleccionada(cat)\}\
          >\
            <Text style=\{styles.filterText\}>\{cat\}</Text>\
          </TouchableOpacity>\
        ))\}\
      </View>\
\
      \{/* Lista */\}\
      <FlatList\
        data=\{filtrarNegocios()\}\
        keyExtractor=\{(item) => item.id\}\
        renderItem=\{(\{ item \}) => (\
          <TouchableOpacity\
            style=\{styles.card\}\
            onPress=\{() => navigation.navigate('Detalle', \{ negocio: item \})\}\
          >\
            <Image source=\{\{ uri: item.imagen \}\} style=\{styles.imagen\} />\
            <View style=\{styles.info\}>\
              <Text style=\{styles.nombre\}>\{item.nombre\}</Text>\
              <Text style=\{styles.categoria\}>\{item.categoria\}</Text>\
              <Text style=\{styles.direccion\}>\{item.direccion\}</Text>\
            </View>\
          </TouchableOpacity>\
        )\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, backgroundColor: '#f5f5f5', padding: 10 \},\
  center: \{ flex: 1, justifyContent: 'center', alignItems: 'center' \},\
  searchBar: \{\
    backgroundColor: '#fff',\
    borderRadius: 8,\
    padding: 10,\
    marginBottom: 10,\
    fontSize: 16\
  \},\
  filters: \{\
    flexDirection: 'row',\
    marginBottom: 10,\
    justifyContent: 'space-around'\
  \},\
  filterButton: \{\
    paddingVertical: 6,\
    paddingHorizontal: 14,\
    borderRadius: 20,\
    backgroundColor: '#ddd'\
  \},\
  filterSelected: \{\
    backgroundColor: '#ff6f00'\
  \},\
  filterText: \{ color: '#fff', fontWeight: 'bold' \},\
  card: \{\
    flexDirection: 'row',\
    backgroundColor: '#fff',\
    marginBottom: 10,\
    padding: 12,\
    borderRadius: 10,\
    elevation: 3\
  \},\
  imagen: \{ width: 70, height: 70, borderRadius: 10, marginRight: 10 \},\
  info: \{ flex: 1, justifyContent: 'center' \},\
  nombre: \{ fontSize: 16, fontWeight: 'bold', color: '#333' \},\
  categoria: \{ fontSize: 14, color: '#ff6f00', marginVertical: 2 \},\
  direccion: \{ fontSize: 12, color: '#666' \}\
\});\
\

\f7\fs34 \cf2 \uc0\u9888 \u65039 
\f4\b  Importante
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Si pruebas en 
\f2\b emulador de Android
\f1\b0 : usa 
\f5 http://10.0.2.2:3001/negocios
\f1  en lugar de 
\f5 localhost
\f1 .\
	\'95	Si pruebas en 
\f2\b celular f\'edsico
\f1\b0 , pon la 
\f2\b IP local de tu PC
\f1\b0  (ejemplo 
\f5 http://192.168.1.50:3001/negocios
\f1 ).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que en la 
\f2\b \cf2 versi\'f3n 1.3
\f1\b0 \cf2  te prepare tambi\'e9n un 
\f2\b \cf2 endpoint de b\'fasqueda y filtros
\f1\b0 \cf2  en el 
\f5 \cf2 json-server
\f1 \cf2  para no filtrar todo en el cliente, sino desde la API? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
\
Entonces en la 
\f2\b \cf2 versi\'f3n 1.3
\f1\b0 \cf2  vamos a hacer que el 
\f2\b \cf2 servidor (json-server) maneje tambi\'e9n los filtros y b\'fasquedas
\f1\b0 \cf2 , de modo que la app ya no tenga que traer todos los negocios y filtrarlos en memoria, sino que pregunte a la API con par\'e1metros din\'e1micos.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 1: Usar queries nativas de json-server
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5 \cf2 json-server
\f1 \cf2  soporta 
\f2\b \cf2 query params
\f1\b0 \cf2  sin que tengas que programar nada extra:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 ?q=
\f1  \uc0\u8594  b\'fasqueda global en todos los campos de texto\
	\'95	
\f5 ?categoria=
\f1  \uc0\u8594  filtra por campo exacto (ej. Constructora)\
	\'95	
\f5 ?_sort=nombre&_order=asc
\f1  \uc0\u8594  ordenar resultados\
\
Ejemplo:\
http://localhost:3001/negocios?q=lomas&categoria=Constructora\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Esto devolver\'e1 s\'f3lo las 
\f2\b \cf2 constructoras
\f1\b0 \cf2  que incluyan \'93lomas\'94 en su nombre o direcci\'f3n.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 2: Actualizar ListadoScreen.js
\f1\b0\fs28 \cf2 \
\
Ahora la b\'fasqueda y los filtros se har\'e1n 
\f2\b \cf2 contra la API
\f1\b0 \cf2 , no en memoria.\
\
import React, \{ useState, useEffect \} from 'react';\
import \{ View, Text, StyleSheet, FlatList, TextInput, TouchableOpacity, Image, ActivityIndicator \} from 'react-native';\
\
export default function ListadoScreen(\{ navigation \}) \{\
  const [negocios, setNegocios] = useState([]);\
  const [textoBusqueda, setTextoBusqueda] = useState('');\
  const [categoriaSeleccionada, setCategoriaSeleccionada] = useState('Todos');\
  const [loading, setLoading] = useState(false);\
\
  const API_URL = "http://localhost:3001/negocios"; \
  // 
\f7 \uc0\u9888 \u65039 
\f1  Recuerda cambiar localhost por 10.0.2.2 o tu IP si usas Android/celular f\'edsico\
\
  const cargarNegocios = async () => \{\
    try \{\
      setLoading(true);\
\
      let url = `$\{API_URL\}?`;\
\
      if (textoBusqueda.trim() !== "") \{\
        url += `q=$\{encodeURIComponent(textoBusqueda)\}&`;\
      \}\
\
      if (categoriaSeleccionada !== 'Todos') \{\
        url += `categoria=$\{encodeURIComponent(categoriaSeleccionada)\}&`;\
      \}\
\
      url += `_sort=nombre&_order=asc`; // opcional, ordena alfab\'e9ticamente\
\
      const res = await fetch(url);\
      const data = await res.json();\
      setNegocios(data);\
    \} catch (error) \{\
      console.error("Error al cargar negocios:", error);\
    \} finally \{\
      setLoading(false);\
    \}\
  \};\
\
  useEffect(() => \{\
    cargarNegocios();\
  \}, [textoBusqueda, categoriaSeleccionada]);\
\
  const categorias = ['Todos', 'Constructora', 'Desarrollador', 'Inmobiliaria'];\
\
  return (\
    <View style=\{styles.container\}>\
      \{/* Buscador */\}\
      <TextInput\
        style=\{styles.searchBar\}\
        placeholder="
\f7 \uc0\u55357 \u56589 
\f1  Buscar negocio..."\
        value=\{textoBusqueda\}\
        onChangeText=\{setTextoBusqueda\}\
      />\
\
      \{/* Filtros */\}\
      <View style=\{styles.filters\}>\
        \{categorias.map(cat => (\
          <TouchableOpacity\
            key=\{cat\}\
            style=\{[\
              styles.filterButton,\
              categoriaSeleccionada === cat && styles.filterSelected\
            ]\}\
            onPress=\{() => setCategoriaSeleccionada(cat)\}\
          >\
            <Text style=\{styles.filterText\}>\{cat\}</Text>\
          </TouchableOpacity>\
        ))\}\
      </View>\
\
      \{/* Loader */\}\
      \{loading ? (\
        <View style=\{styles.center\}>\
          <ActivityIndicator size="large" color="#ff6f00" />\
          <Text>Cargando negocios...</Text>\
        </View>\
      ) : (\
        <FlatList\
          data=\{negocios\}\
          keyExtractor=\{(item) => item.id\}\
          renderItem=\{(\{ item \}) => (\
            <TouchableOpacity\
              style=\{styles.card\}\
              onPress=\{() => navigation.navigate('Detalle', \{ negocio: item \})\}\
            >\
              <Image source=\{\{ uri: item.imagen \}\} style=\{styles.imagen\} />\
              <View style=\{styles.info\}>\
                <Text style=\{styles.nombre\}>\{item.nombre\}</Text>\
                <Text style=\{styles.categoria\}>\{item.categoria\}</Text>\
                <Text style=\{styles.direccion\}>\{item.direccion\}</Text>\
              </View>\
            </TouchableOpacity>\
          )\}\
        />\
      )\}\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, backgroundColor: '#f5f5f5', padding: 10 \},\
  center: \{ flex: 1, justifyContent: 'center', alignItems: 'center' \},\
  searchBar: \{\
    backgroundColor: '#fff',\
    borderRadius: 8,\
    padding: 10,\
    marginBottom: 10,\
    fontSize: 16\
  \},\
  filters: \{\
    flexDirection: 'row',\
    marginBottom: 10,\
    justifyContent: 'space-around'\
  \},\
  filterButton: \{\
    paddingVertical: 6,\
    paddingHorizontal: 14,\
    borderRadius: 20,\
    backgroundColor: '#ddd'\
  \},\
  filterSelected: \{\
    backgroundColor: '#ff6f00'\
  \},\
  filterText: \{ color: '#fff', fontWeight: 'bold' \},\
  card: \{\
    flexDirection: 'row',\
    backgroundColor: '#fff',\
    marginBottom: 10,\
    padding: 12,\
    borderRadius: 10,\
    elevation: 3\
  \},\
  imagen: \{ width: 70, height: 70, borderRadius: 10, marginRight: 10 \},\
  info: \{ flex: 1, justifyContent: 'center' \},\
  nombre: \{ fontSize: 16, fontWeight: 'bold', color: '#333' \},\
  categoria: \{ fontSize: 14, color: '#ff6f00', marginVertical: 2 \},\
  direccion: \{ fontSize: 12, color: '#666' \}\
\});\
\

\f7 \uc0\u9989 
\f1  Con esto ya tienes:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	B\'fasqueda y filtros 
\f2\b directamente desde el backend fake
\f1\b0 \
	\'95	Resultados 
\f2\b ordenados autom\'e1ticamente
\f1\b0 \
	\'95	App lista para escalar a una API real sin tocar mucho c\'f3digo\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que en la 
\f2\b \cf2 versi\'f3n 1.4
\f1\b0 \cf2  agreguemos 
\f2\b \cf2 paginaci\'f3n y carga infinita
\f1\b0 \cf2  (scroll infinito) para que no traiga todos los negocios de golpe? Si\
\
Excelente 
\f7 \uc0\u55357 \u56960 
\f1 \
\
En la 
\f2\b \cf2 versi\'f3n 1.4
\f1\b0 \cf2  vamos a implementar 
\f2\b \cf2 paginaci\'f3n con scroll infinito
\f1\b0 \cf2  usando las capacidades de 
\f5 \cf2 json-server
\f1 \cf2  y 
\f5 \cf2 FlatList
\f1 \cf2  de React Native.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 1: Paginaci\'f3n con json-server
\f1\b0\fs28 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5 \cf2 json-server
\f1 \cf2  soporta par\'e1metros para paginar:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 ?_page=1&_limit=10
\f1  \uc0\u8594  p\'e1gina 1 con 10 resultados\
	\'95	
\f5 ?_page=2&_limit=10
\f1  \uc0\u8594  p\'e1gina 2 con 10 resultados\
	\'95	
\f5 ?_page=3&_limit=10
\f1  \uc0\u8594  y as\'ed sucesivamente\
\
Ejemplo:\
http://localhost:3001/negocios?_page=1&_limit=10\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 2: Modificar ListadoScreen.js
\f1\b0\fs28 \cf2 \
\
Integramos la 
\f2\b \cf2 paginaci\'f3n + scroll infinito
\f1\b0 \cf2  en el 
\f5 \cf2 FlatList
\f1 \cf2 .\
\
import React, \{ useState, useEffect \} from 'react';\
import \{ View, Text, StyleSheet, FlatList, TextInput, TouchableOpacity, Image, ActivityIndicator \} from 'react-native';\
\
export default function ListadoScreen(\{ navigation \}) \{\
  const [negocios, setNegocios] = useState([]);\
  const [textoBusqueda, setTextoBusqueda] = useState('');\
  const [categoriaSeleccionada, setCategoriaSeleccionada] = useState('Todos');\
  const [loading, setLoading] = useState(false);\
  const [page, setPage] = useState(1);\
  const [hasMore, setHasMore] = useState(true);\
\
  const API_URL = "http://localhost:3001/negocios"; \
  const PAGE_SIZE = 10; // cantidad de resultados por p\'e1gina\
\
  const cargarNegocios = async (reset = false) => \{\
    if (loading) return;\
    try \{\
      setLoading(true);\
\
      let url = `$\{API_URL\}?_page=$\{reset ? 1 : page\}&_limit=$\{PAGE_SIZE\}&`;\
\
      if (textoBusqueda.trim() !== "") \{\
        url += `q=$\{encodeURIComponent(textoBusqueda)\}&`;\
      \}\
\
      if (categoriaSeleccionada !== 'Todos') \{\
        url += `categoria=$\{encodeURIComponent(categoriaSeleccionada)\}&`;\
      \}\
\
      url += `_sort=nombre&_order=asc`;\
\
      const res = await fetch(url);\
      const data = await res.json();\
\
      if (reset) \{\
        setNegocios(data);\
        setPage(2);\
      \} else \{\
        setNegocios(prev => [...prev, ...data]);\
        setPage(prev => prev + 1);\
      \}\
\
      if (data.length < PAGE_SIZE) \{\
        setHasMore(false); // ya no hay m\'e1s datos\
      \} else \{\
        setHasMore(true);\
      \}\
\
    \} catch (error) \{\
      console.error("Error al cargar negocios:", error);\
    \} finally \{\
      setLoading(false);\
    \}\
  \};\
\
  useEffect(() => \{\
    cargarNegocios(true); // cada vez que cambia b\'fasqueda o categor\'eda reinicia\
  \}, [textoBusqueda, categoriaSeleccionada]);\
\
  const categorias = ['Todos', 'Constructora', 'Desarrollador', 'Inmobiliaria'];\
\
  return (\
    <View style=\{styles.container\}>\
      \{/* Buscador */\}\
      <TextInput\
        style=\{styles.searchBar\}\
        placeholder="
\f7 \uc0\u55357 \u56589 
\f1  Buscar negocio..."\
        value=\{textoBusqueda\}\
        onChangeText=\{setTextoBusqueda\}\
      />\
\
      \{/* Filtros */\}\
      <View style=\{styles.filters\}>\
        \{categorias.map(cat => (\
          <TouchableOpacity\
            key=\{cat\}\
            style=\{[\
              styles.filterButton,\
              categoriaSeleccionada === cat && styles.filterSelected\
            ]\}\
            onPress=\{() => setCategoriaSeleccionada(cat)\}\
          >\
            <Text style=\{styles.filterText\}>\{cat\}</Text>\
          </TouchableOpacity>\
        ))\}\
      </View>\
\
      \{/* Lista con scroll infinito */\}\
      <FlatList\
        data=\{negocios\}\
        keyExtractor=\{(item) => item.id\}\
        renderItem=\{(\{ item \}) => (\
          <TouchableOpacity\
            style=\{styles.card\}\
            onPress=\{() => navigation.navigate('Detalle', \{ negocio: item \})\}\
          >\
            <Image source=\{\{ uri: item.imagen \}\} style=\{styles.imagen\} />\
            <View style=\{styles.info\}>\
              <Text style=\{styles.nombre\}>\{item.nombre\}</Text>\
              <Text style=\{styles.categoria\}>\{item.categoria\}</Text>\
              <Text style=\{styles.direccion\}>\{item.direccion\}</Text>\
            </View>\
          </TouchableOpacity>\
        )\}\
        onEndReached=\{() => \{\
          if (hasMore && !loading) cargarNegocios();\
        \}\}\
        onEndReachedThreshold=\{0.5\}\
        ListFooterComponent=\{\
          loading ? (\
            <View style=\{styles.footer\}>\
              <ActivityIndicator size="small" color="#ff6f00" />\
              <Text>Cargando m\'e1s...</Text>\
            </View>\
          ) : null\
        \}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, backgroundColor: '#f5f5f5', padding: 10 \},\
  searchBar: \{\
    backgroundColor: '#fff',\
    borderRadius: 8,\
    padding: 10,\
    marginBottom: 10,\
    fontSize: 16\
  \},\
  filters: \{\
    flexDirection: 'row',\
    marginBottom: 10,\
    justifyContent: 'space-around'\
  \},\
  filterButton: \{\
    paddingVertical: 6,\
    paddingHorizontal: 14,\
    borderRadius: 20,\
    backgroundColor: '#ddd'\
  \},\
  filterSelected: \{\
    backgroundColor: '#ff6f00'\
  \},\
  filterText: \{ color: '#fff', fontWeight: 'bold' \},\
  card: \{\
    flexDirection: 'row',\
    backgroundColor: '#fff',\
    marginBottom: 10,\
    padding: 12,\
    borderRadius: 10,\
    elevation: 3\
  \},\
  imagen: \{ width: 70, height: 70, borderRadius: 10, marginRight: 10 \},\
  info: \{ flex: 1, justifyContent: 'center' \},\
  nombre: \{ fontSize: 16, fontWeight: 'bold', color: '#333' \},\
  categoria: \{ fontSize: 14, color: '#ff6f00', marginVertical: 2 \},\
  direccion: \{ fontSize: 12, color: '#666' \},\
  footer: \{ padding: 15, alignItems: 'center' \}\
\});\
\

\f7 \uc0\u9989 
\f1  Ahora tienes:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Paginaci\'f3n con 
\f5 json-server
\f1  (
\f5 _page
\f1  + 
\f5 _limit
\f1 ).\
	\'95	
\f2\b Scroll infinito
\f1\b0  en la lista.\
	\'95	Cada vez que cambias b\'fasqueda o filtro, reinicia desde p\'e1gina 1.\
	\'95	
\f5 FlatList
\f1  carga m\'e1s al llegar al final.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que en la 
\f2\b \cf2 versi\'f3n 1.5
\f1\b0 \cf2  agreguemos 
\f2\b \cf2 favoritos
\f1\b0 \cf2  (guardar negocios en una lista persistente con AsyncStorage)? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
\
En la 
\f2\b \cf2 versi\'f3n 1.5
\f1\b0 \cf2  vamos a agregar la funcionalidad de 
\f2\b \cf2 Favoritos
\f1\b0 \cf2 , de forma que un usuario pueda guardar negocios que le interesen y consultarlos despu\'e9s. Usaremos 
\f2\b \cf2 AsyncStorage
\f1\b0 \cf2  para que los favoritos se conserven aunque cierre la app.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 1: Instalar AsyncStorage
\f1\b0\fs28 \cf2 \
\
En tu proyecto React Native instala:\
npm install @react-native-async-storage/async-storage\
\
y luego corre 
\f5 \cf2 npx pod-install
\f1 \cf2  si est\'e1s en iOS.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 2: Crear un helper para manejar favoritos
\f1\b0\fs28 \cf2 \
\
Creamos un archivo 
\f5 \cf2 utils/favoritos.js
\f1 \cf2  para centralizar la l\'f3gica:\
import AsyncStorage from '@react-native-async-storage/async-storage';\
\
const FAVORITOS_KEY = 'favoritos_negocios';\
\
export const getFavoritos = async () => \{\
  try \{\
    const jsonValue = await AsyncStorage.getItem(FAVORITOS_KEY);\
    return jsonValue != null ? JSON.parse(jsonValue) : [];\
  \} catch (e) \{\
    console.error("Error al leer favoritos", e);\
    return [];\
  \}\
\};\
\
export const guardarFavorito = async (negocio) => \{\
  try \{\
    const favoritos = await getFavoritos();\
    const existe = favoritos.find(f => f.id === negocio.id);\
    if (!existe) \{\
      const nuevos = [...favoritos, negocio];\
      await AsyncStorage.setItem(FAVORITOS_KEY, JSON.stringify(nuevos));\
      return nuevos;\
    \}\
    return favoritos;\
  \} catch (e) \{\
    console.error("Error al guardar favorito", e);\
  \}\
\};\
\
export const eliminarFavorito = async (id) => \{\
  try \{\
    const favoritos = await getFavoritos();\
    const nuevos = favoritos.filter(f => f.id !== id);\
    await AsyncStorage.setItem(FAVORITOS_KEY, JSON.stringify(nuevos));\
    return nuevos;\
  \} catch (e) \{\
    console.error("Error al eliminar favorito", e);\
  \}\
\};\
\
export const esFavorito = async (id) => \{\
  const favoritos = await getFavoritos();\
  return favoritos.some(f => f.id === id);\
\};\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 3: Modificar DetalleScreen.js
\f1\b0\fs28 \cf2 \
\
Agregamos un bot\'f3n 
\f7 \uc0\u11088 
\f1  para 
\f2\b \cf2 a\'f1adir o quitar de favoritos
\f1\b0 \cf2 .\
import React, \{ useState, useEffect \} from 'react';\
import \{ View, Text, StyleSheet, Image, TouchableOpacity \} from 'react-native';\
import \{ guardarFavorito, eliminarFavorito, esFavorito \} from '../utils/favoritos';\
\
export default function DetalleScreen(\{ route \}) \{\
  const \{ negocio \} = route.params;\
  const [favorito, setFavorito] = useState(false);\
\
  useEffect(() => \{\
    const verificar = async () => \{\
      const fav = await esFavorito(negocio.id);\
      setFavorito(fav);\
    \};\
    verificar();\
  \}, []);\
\
  const toggleFavorito = async () => \{\
    if (favorito) \{\
      await eliminarFavorito(negocio.id);\
      setFavorito(false);\
    \} else \{\
      await guardarFavorito(negocio);\
      setFavorito(true);\
    \}\
  \};\
\
  return (\
    <View style=\{styles.container\}>\
      <Image source=\{\{ uri: negocio.imagen \}\} style=\{styles.imagen\} />\
      <Text style=\{styles.nombre\}>\{negocio.nombre\}</Text>\
      <Text style=\{styles.categoria\}>\{negocio.categoria\}</Text>\
      <Text style=\{styles.direccion\}>\{negocio.direccion\}</Text>\
\
      \{/* Bot\'f3n de favoritos */\}\
      <TouchableOpacity style=\{styles.btnFavorito\} onPress=\{toggleFavorito\}>\
        <Text style=\{styles.textoBtn\}>\
          \{favorito ? "\uc0\u9733  Quitar de Favoritos" : "\u9734  Agregar a Favoritos"\}\
        </Text>\
      </TouchableOpacity>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, padding: 20, alignItems: 'center', backgroundColor: '#fff' \},\
  imagen: \{ width: 200, height: 200, borderRadius: 15, marginBottom: 20 \},\
  nombre: \{ fontSize: 22, fontWeight: 'bold', color: '#333' \},\
  categoria: \{ fontSize: 16, color: '#ff6f00', marginVertical: 5 \},\
  direccion: \{ fontSize: 14, color: '#666' \},\
  btnFavorito: \{\
    marginTop: 20,\
    backgroundColor: '#ff6f00',\
    padding: 12,\
    borderRadius: 10\
  \},\
  textoBtn: \{ color: '#fff', fontSize: 16, fontWeight: 'bold' \}\
\});\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 4: Nueva pantalla \'93Favoritos\'94
\f1\b0\fs28 \cf2 \
\
Creamos 
\f5 \cf2 FavoritosScreen.js
\f1 \cf2  para mostrar la lista guardada:\
import React, \{ useEffect, useState \} from 'react';\
import \{ View, Text, FlatList, TouchableOpacity, Image, StyleSheet \} from 'react-native';\
import \{ getFavoritos \} from '../utils/favoritos';\
\
export default function FavoritosScreen(\{ navigation \}) \{\
  const [favoritos, setFavoritos] = useState([]);\
\
  useEffect(() => \{\
    const cargar = async () => \{\
      const data = await getFavoritos();\
      setFavoritos(data);\
    \};\
    const unsubscribe = navigation.addListener('focus', cargar); // refrescar cada vez que entras\
    return unsubscribe;\
  \}, [navigation]);\
\
  return (\
    <View style=\{styles.container\}>\
      <FlatList\
        data=\{favoritos\}\
        keyExtractor=\{(item) => item.id\}\
        renderItem=\{(\{ item \}) => (\
          <TouchableOpacity\
            style=\{styles.card\}\
            onPress=\{() => navigation.navigate('Detalle', \{ negocio: item \})\}\
          >\
            <Image source=\{\{ uri: item.imagen \}\} style=\{styles.imagen\} />\
            <View>\
              <Text style=\{styles.nombre\}>\{item.nombre\}</Text>\
              <Text style=\{styles.categoria\}>\{item.categoria\}</Text>\
            </View>\
          </TouchableOpacity>\
        )\}\
        ListEmptyComponent=\{<Text>No tienes favoritos a\'fan 
\f7 \uc0\u11088 
\f1 </Text>\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, padding: 15, backgroundColor: '#fff' \},\
  card: \{\
    flexDirection: 'row',\
    padding: 10,\
    backgroundColor: '#f5f5f5',\
    marginBottom: 10,\
    borderRadius: 8\
  \},\
  imagen: \{ width: 60, height: 60, borderRadius: 10, marginRight: 10 \},\
  nombre: \{ fontSize: 16, fontWeight: 'bold' \},\
  categoria: \{ fontSize: 14, color: '#ff6f00' \}\
\});\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 5: Agregar Favoritos al App.js
\f1\b0\fs28 \cf2 \
\
En tu 
\f2\b \cf2 stack/tab navigation
\f1\b0 \cf2 , agrega una pesta\'f1a para \'93Favoritos\'94:\
import FavoritosScreen from './screens/FavoritosScreen';\
\
<Tab.Screen name="Favoritos" component=\{FavoritosScreen\} />\
\

\f7 \uc0\u9989 
\f1  Con esto ya tienes:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Guardar/Quitar negocios de favoritos desde el detalle.\
	\'95	Persistencia en el almacenamiento local (AsyncStorage).\
	\'95	Una pantalla dedicada para ver todos los favoritos 
\f7 \uc0\u11088 
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que en la 
\f2\b \cf2 versi\'f3n 1.6
\f1\b0 \cf2  te preparemos un 
\f2\b \cf2 sistema de login b\'e1sico
\f1\b0 \cf2  (usuarios simulados con 
\f5 \cf2 json-server
\f1 \cf2  y guardado de sesi\'f3n con AsyncStorage)? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
\
En la 
\f2\b \cf2 versi\'f3n 1.6
\f1\b0 \cf2  vamos a implementar un 
\f2\b \cf2 sistema de login b\'e1sico
\f1\b0 \cf2  para tu directorio de negocios en caucel en M\'e9rida. Esto servir\'e1 para que cada usuario tenga su sesi\'f3n, sus favoritos propios y en un futuro incluso sus comentarios o rese\'f1as.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs44 \cf2 \uc0\u55357 \u56633 
\f4\b  Flujo de Autenticaci\'f3n B\'e1sica (v1.6)
\f1\b0\fs28 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	
\f2\b \cf2 Backend (json-server o API real)
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Guardamos una lista de usuarios en 
\f5 \cf2 db.json
\f1 \cf2  de 
\f5 \cf2 json-server
\f1 \cf2 .\
	\'95	Ejemplo 
\f5 \cf2 db.json
\f1 \cf2 :\
\{\
  "usuarios": [\
    \{ "id": 1, "email": "test@correo.com", "password": "123456", "nombre": "Miguel" \}\
  ]\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	2.	
\f2\b \cf2 Pantallas nuevas en React Native
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 \cf2 LoginScreen.js
\f1 \cf2 : para iniciar sesi\'f3n.\
	\'95	
\f5 \cf2 RegistroScreen.js
\f1 \cf2 : para crear usuario.\
	\'95	
\f5 \cf2 PerfilScreen.js
\f1 \cf2 : muestra los datos del usuario y un bot\'f3n de logout.\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	3.	
\f2\b \cf2 Almacenamiento de sesi\'f3n
\f1\b0 \cf2 \
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Usamos 
\f5 \cf2 AsyncStorage
\f1 \cf2  para guardar el usuario logueado y que no se cierre la sesi\'f3n al cerrar la app.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 1: Configurar Contexto de Autenticaci\'f3n
\f1\b0\fs28 \cf2 \
\
Creamos 
\f5 \cf2 context/AuthContext.js
\f1 \cf2 :import React, \{ createContext, useState, useEffect \} from 'react';\
import AsyncStorage from '@react-native-async-storage/async-storage';\
\
export const AuthContext = createContext();\
\
export const AuthProvider = (\{ children \}) => \{\
  const [usuario, setUsuario] = useState(null);\
\
  useEffect(() => \{\
    const cargarUsuario = async () => \{\
      const userData = await AsyncStorage.getItem('usuario');\
      if (userData) setUsuario(JSON.parse(userData));\
    \};\
    cargarUsuario();\
  \}, []);\
\
  const login = async (user) => \{\
    setUsuario(user);\
    await AsyncStorage.setItem('usuario', JSON.stringify(user));\
  \};\
\
  const logout = async () => \{\
    setUsuario(null);\
    await AsyncStorage.removeItem('usuario');\
  \};\
\
  return (\
    <AuthContext.Provider value=\{\{ usuario, login, logout \}\}>\
      \{children\}\
    </AuthContext.Provider>\
  );\
\};\
\

\f7\fs34 \cf2 \uc0\u55357 \u56633 
\f4\b  Paso 2: LoginScreen.js\
\
import React, \{ useState, useContext \} from 'react';\
import \{ View, Text, TextInput, TouchableOpacity, StyleSheet, Alert \} from 'react-native';\
import \{ AuthContext \} from '../context/AuthContext';\
\
export default function LoginScreen(\{ navigation \}) \{\
  const [email, setEmail] = useState('');\
  const [password, setPassword] = useState('');\
  const \{ login \} = useContext(AuthContext);\
\
  const handleLogin = async () => \{\
    try \{\
      const response = await fetch(`http://localhost:3000/usuarios?email=$\{email\}&password=$\{password\}`);\
      const data = await response.json();\
\
      if (data.length > 0) \{\
        login(data[0]); // guarda en contexto\
      \} else \{\
        Alert.alert("Error", "Usuario o contrase\'f1a incorrectos");\
      \}\
    \} catch (error) \{\
      console.error(error);\
      Alert.alert("Error", "No se pudo conectar con el servidor");\
    \}\
  \};\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>Iniciar Sesi\'f3n</Text>\
      <TextInput\
        placeholder="Correo"\
        style=\{styles.input\}\
        value=\{email\}\
        onChangeText=\{setEmail\}\
      />\
      <TextInput\
        placeholder="Contrase\'f1a"\
        secureTextEntry\
        style=\{styles.input\}\
        value=\{password\}\
        onChangeText=\{setPassword\}\
      />\
      <TouchableOpacity style=\{styles.btn\} onPress=\{handleLogin\}>\
        <Text style=\{styles.btnText\}>Entrar</Text>\
      </TouchableOpacity>\
\
      <TouchableOpacity onPress=\{() => navigation.navigate("Registro")\}>\
        <Text style=\{styles.link\}>\'bfNo tienes cuenta? Reg\'edstrate</Text>\
      </TouchableOpacity>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, justifyContent: "center", padding: 20 \},\
  title: \{ fontSize: 24, fontWeight: "bold", marginBottom: 20, textAlign: "center" \},\
  input: \{ borderWidth: 1, borderColor: "#ccc", borderRadius: 8, padding: 10, marginBottom: 15 \},\
  btn: \{ backgroundColor: "#ff6f00", padding: 15, borderRadius: 8 \},\
  btnText: \{ color: "#fff", textAlign: "center", fontSize: 16, fontWeight: "bold" \},\
  link: \{ color: "#ff6f00", marginTop: 15, textAlign: "center" \}\
\});\
\

\f7\b0 \uc0\u55357 \u56633 
\f4\b  Paso 3: RegistroScreen.js\
\
import React, \{ useState \} from 'react';\
import \{ View, Text, TextInput, TouchableOpacity, StyleSheet, Alert \} from 'react-native';\
\
export default function RegistroScreen(\{ navigation \}) \{\
  const [nombre, setNombre] = useState('');\
  const [email, setEmail] = useState('');\
  const [password, setPassword] = useState('');\
\
  const handleRegistro = async () => \{\
    try \{\
      const response = await fetch("http://localhost:3000/usuarios", \{\
        method: "POST",\
        headers: \{ "Content-Type": "application/json" \},\
        body: JSON.stringify(\{ nombre, email, password \})\
      \});\
\
      if (response.ok) \{\
        Alert.alert("\'c9xito", "Usuario registrado. Ahora inicia sesi\'f3n.");\
        navigation.goBack();\
      \} else \{\
        Alert.alert("Error", "No se pudo registrar");\
      \}\
    \} catch (error) \{\
      console.error(error);\
      Alert.alert("Error", "No se pudo conectar con el servidor");\
    \}\
  \};\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>Registro</Text>\
      <TextInput placeholder="Nombre" style=\{styles.input\} value=\{nombre\} onChangeText=\{setNombre\} />\
      <TextInput placeholder="Correo" style=\{styles.input\} value=\{email\} onChangeText=\{setEmail\} />\
      <TextInput placeholder="Contrase\'f1a" secureTextEntry style=\{styles.input\} value=\{password\} onChangeText=\{setPassword\} />\
      <TouchableOpacity style=\{styles.btn\} onPress=\{handleRegistro\}>\
        <Text style=\{styles.btnText\}>Registrarme</Text>\
      </TouchableOpacity>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, justifyContent: "center", padding: 20 \},\
  title: \{ fontSize: 24, fontWeight: "bold", marginBottom: 20, textAlign: "center" \},\
  input: \{ borderWidth: 1, borderColor: "#ccc", borderRadius: 8, padding: 10, marginBottom: 15 \},\
  btn: \{ backgroundColor: "#ff6f00", padding: 15, borderRadius: 8 \},\
  btnText: \{ color: "#fff", textAlign: "center", fontSize: 16, fontWeight: "bold" \}\
\});\
\

\f7\b0 \uc0\u55357 \u56633 
\f4\b  Paso 4: PerfilScreen.js\
\
import React, \{ useContext \} from 'react';\
import \{ View, Text, TouchableOpacity, StyleSheet \} from 'react-native';\
import \{ AuthContext \} from '../context/AuthContext';\
\
export default function PerfilScreen() \{\
  const \{ usuario, logout \} = useContext(AuthContext);\
\
  return (\
    <View style=\{styles.container\}>\
      \{usuario ? (\
        <>\
          <Text style=\{styles.title\}>Bienvenido, \{usuario.nombre\}</Text>\
          <Text>\{usuario.email\}</Text>\
\
          <TouchableOpacity style=\{styles.btn\} onPress=\{logout\}>\
            <Text style=\{styles.btnText\}>Cerrar Sesi\'f3n</Text>\
          </TouchableOpacity>\
        </>\
      ) : (\
        <Text>No has iniciado sesi\'f3n</Text>\
      )\}\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{ flex: 1, justifyContent: "center", alignItems: "center" \},\
  title: \{ fontSize: 22, fontWeight: "bold", marginBottom: 20 \},\
  btn: \{ backgroundColor: "#ff6f00", padding: 15, borderRadius: 8, marginTop: 20 \},\
  btnText: \{ color: "#fff", fontSize: 16, fontWeight: "bold" \}\
\});\
\

\f7\b0 \uc0\u55357 \u56633 
\f4\b  Paso 5: Integrar en App.js
\f1\b0\fs28 \cf2 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	Envu\'e9lvelo con 
\f5 AuthProvider
\f1 .\
	\'95	Agrega las nuevas pantallas (
\f5 Login
\f1 , 
\f5 Registro
\f1 , 
\f5 Perfil
\f1 ).\
	\'95	Puedes condicionar que si no hay sesi\'f3n activa, redirija a 
\f5 Login
\f1 .\
\
Ejemplo:\
import \{ AuthProvider, AuthContext \} from './context/AuthContext';\
\
// dentro del componente principal\
<AuthProvider>\
  <NavigationContainer>\
    <Stack.Navigator>\
      \{usuario ? (\
        <>\
          <Stack.Screen name="Home" component=\{HomeScreen\} />\
          <Stack.Screen name="Perfil" component=\{PerfilScreen\} />\
        </>\
      ) : (\
        <>\
          <Stack.Screen name="Login" component=\{LoginScreen\} />\
          <Stack.Screen name="Registro" component=\{RegistroScreen\} />\
        </>\
      )\}\
    </Stack.Navigator>\
  </NavigationContainer>\
</AuthProvider>\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u9989 
\f1  Con esto ya tienes un sistema de login y registro funcional, conectado a 
\f5 \cf2 json-server
\f1 \cf2 , con persistencia de sesi\'f3n en 
\f5 \cf2 AsyncStorage
\f1 \cf2 .\
\

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que en la 
\f2\b \cf2 versi\'f3n 1.7
\f1\b0 \cf2  preparemos el flujo para que 
\f2\b \cf2 los favoritos se guarden por usuario
\f1\b0 \cf2  en el backend (en lugar de solo localmente)?\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  ahora vamos a crear el 
\f2\b \cf2 App.js inicial
\f1\b0 \cf2  de tu proyecto Expo.\
\
Este archivo tendr\'e1:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Stack Navigator
\f1\b0  con 2 pantallas iniciales (
\f5 HomeScreen
\f1  y 
\f5 BusinessListScreen
\f1 )\
	\'95	
\f2\b Tema b\'e1sico UI
\f1\b0 \
	\'95	
\f2\b Estructura lista para ir sumando m\'e1s pantallas
\f1\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  App.js\
import React from 'react';\
import \{ NavigationContainer \} from '@react-navigation/native';\
import \{ createNativeStackNavigator \} from '@react-navigation/native-stack';\
\
// Screens\
import HomeScreen from './screens/HomeScreen';\
import BusinessListScreen from './screens/BusinessListScreen';\
\
const Stack = createNativeStackNavigator();\
\
export default function App() \{\
  return (\
    <NavigationContainer>\
      <Stack.Navigator\
        initialRouteName="Home"\
        screenOptions=\{\{\
          headerStyle: \{ backgroundColor: '#1E90FF' \},\
          headerTintColor: '#fff',\
          headerTitleStyle: \{ fontWeight: 'bold' \},\
        \}\}\
      >\
        <Stack.Screen\
          name="Home"\
          component=\{HomeScreen\}\
          options=\{\{ title: 'Directorio Caucel' \}\}\
        />\
        <Stack.Screen\
          name="BusinessList"\
          component=\{BusinessListScreen\}\
          options=\{\{ title: 'Negocios' \}\}\
        />\
      </Stack.Navigator>\
    </NavigationContainer>\
  );\
\}\
\

\f7\b0\fs28 \cf2 \uc0\u55357 \u56393 
\f1  Esto ya deja tu app navegable:\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f2\b Pantalla Home
\f1\b0  como bienvenida.\
	\'95	
\f2\b Pantalla BusinessList
\f1\b0  para mostrar el directorio de negocios.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\'bfQuieres que arme ahora el 
\f2\b \cf2 HomeScreen con un bot\'f3n que lleve a la lista de negocios
\f1\b0 \cf2  para que tengas el flujo inicial funcionando? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56613 
\f1  vamos a crear el 
\f2\b \cf2 HomeScreen.js
\f1\b0 \cf2  dentro de la carpeta 
\f5 \cf2 screens/
\f1 \cf2 .\
Ser\'e1 una pantalla simple de bienvenida con un bot\'f3n que lleve al 
\f2\b \cf2 BusinessList
\f1\b0 \cf2 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  screens/HomeScreen.js\
import React from 'react';\
import \{ View, Text, StyleSheet, TouchableOpacity \} from 'react-native';\
\
export default function HomeScreen(\{ navigation \}) \{\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>Bienvenido al Directorio Caucel</Text>\
      <Text style=\{styles.subtitle\}>Encuentra negocios y servicios en tu zona</Text>\
\
      <TouchableOpacity\
        style=\{styles.button\}\
        onPress=\{() => navigation.navigate('BusinessList')\}\
      >\
        <Text style=\{styles.buttonText\}>Ver Negocios</Text>\
      </TouchableOpacity>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    justifyContent: 'center',\
    alignItems: 'center',\
    backgroundColor: '#F8F9FA',\
    padding: 20,\
  \},\
  title: \{\
    fontSize: 26,\
    fontWeight: 'bold',\
    marginBottom: 10,\
    color: '#1E90FF',\
    textAlign: 'center',\
  \},\
  subtitle: \{\
    fontSize: 16,\
    color: '#555',\
    marginBottom: 30,\
    textAlign: 'center',\
  \},\
  button: \{\
    backgroundColor: '#1E90FF',\
    paddingVertical: 12,\
    paddingHorizontal: 24,\
    borderRadius: 8,\
    elevation: 3,\
  \},\
  buttonText: \{\
    color: '#fff',\
    fontSize: 18,\
    fontWeight: '600',\
  \},\
\});\
\

\f7\b0\fs28 \cf2 \uc0\u55357 \u56393 
\f1  Con esto, ya tienes un 
\f2\b \cf2 inicio bonito y funcional
\f1\b0 \cf2 .\
Cuando el usuario toque el bot\'f3n 
\f2\b \cf2 \'93Ver Negocios\'94
\f1\b0 \cf2 , lo llevar\'e1 a la pantalla 
\f2\b \cf2 BusinessList
\f1\b0 \cf2 .\
\
\'bfQuieres que prepare ahora el 
\f2\b \cf2 BusinessListScreen
\f1\b0 \cf2  con un 
\f2\b \cf2 FlatList de ejemplo
\f1\b0 \cf2  para que veas el directorio funcionando? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1  ahora vamos a crear la pantalla 
\f2\b \cf2 BusinessListScreen
\f1\b0 \cf2  dentro de 
\f5 \cf2 screens/
\f1 \cf2 .\
Ser\'e1 una lista de negocios 
\f2\b \cf2 mock
\f1\b0 \cf2  (datos de prueba) usando 
\f2\b \cf2 FlatList
\f1\b0 \cf2  para simular el directorio.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  screens/BusinessListScreen.js\
import React from 'react';\
import \{ View, Text, FlatList, TouchableOpacity, StyleSheet \} from 'react-native';\
\
const businesses = [\
  \{ id: '1', name: 'Tacos El G\'fcero', category: 'Comida', phone: '9991234567' \},\
  \{ id: '2', name: 'Farmacia Caucel', category: 'Salud', phone: '9997654321' \},\
  \{ id: '3', name: 'Papeler\'eda Express', category: 'Servicios', phone: '9991112233' \},\
  \{ id: '4', name: 'Panader\'eda La Tradicional', category: 'Alimentos', phone: '9994445566' \},\
];\
\
export default function BusinessListScreen(\{ navigation \}) \{\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.header\}>Directorio de Negocios</Text>\
\
      <FlatList\
        data=\{businesses\}\
        keyExtractor=\{(item) => item.id\}\
        renderItem=\{(\{ item \}) => (\
          <TouchableOpacity\
            style=\{styles.card\}\
            onPress=\{() => navigation.navigate('BusinessDetail', \{ business: item \})\}\
          >\
            <Text style=\{styles.name\}>\{item.name\}</Text>\
            <Text style=\{styles.category\}>\{item.category\}</Text>\
            <Text style=\{styles.phone\}>Tel: \{item.phone\}</Text>\
          </TouchableOpacity>\
        )\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    backgroundColor: '#F8F9FA',\
    padding: 16,\
  \},\
  header: \{\
    fontSize: 22,\
    fontWeight: 'bold',\
    marginBottom: 16,\
    textAlign: 'center',\
    color: '#1E90FF',\
  \},\
  card: \{\
    backgroundColor: '#fff',\
    padding: 16,\
    marginBottom: 12,\
    borderRadius: 10,\
    shadowColor: '#000',\
    shadowOpacity: 0.1,\
    shadowOffset: \{ width: 0, height: 2 \},\
    shadowRadius: 6,\
    elevation: 3,\
  \},\
  name: \{\
    fontSize: 18,\
    fontWeight: '600',\
    color: '#333',\
  \},\
  category: \{\
    fontSize: 14,\
    color: '#777',\
  \},\
  phone: \{\
    marginTop: 6,\
    fontSize: 14,\
    color: '#555',\
  \},\
\});\
\

\f7\b0\fs28 \cf2 \uc0\u55357 \u56393 
\f1  Este 
\f5 \cf2 FlatList
\f1 \cf2  muestra 
\f2\b \cf2 4 negocios de prueba
\f1\b0 \cf2 .\
Cuando el usuario toque un negocio, lo llevar\'e1 a la pantalla de 
\f2\b \cf2 BusinessDetail
\f1\b0 \cf2  (todav\'eda la vamos a crear).\
\
\'bfQuieres que arme ahora el 
\f2\b \cf2 BusinessDetailScreen
\f1\b0 \cf2  para ver la info completa de cada negocio? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1  ahora armemos la pantalla 
\f2\b \cf2 BusinessDetailScreen
\f1\b0 \cf2  que se mostrar\'e1 cuando el usuario toque un negocio en la lista.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  screens/BusinessDetailScreen.js\
import React from 'react';\
import \{ View, Text, StyleSheet, TouchableOpacity, Linking \} from 'react-native';\
\
export default function BusinessDetailScreen(\{ route \}) \{\
  const \{ business \} = route.params;\
\
  const handleCall = () => \{\
    Linking.openURL(`tel:$\{business.phone\}`);\
  \};\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.name\}>\{business.name\}</Text>\
      <Text style=\{styles.category\}>Categor\'eda: \{business.category\}</Text>\
      <Text style=\{styles.phone\}>Tel\'e9fono: \{business.phone\}</Text>\
\
      <TouchableOpacity style=\{styles.callButton\} onPress=\{handleCall\}>\
        <Text style=\{styles.callText\}>Llamar</Text>\
      </TouchableOpacity>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    backgroundColor: '#fff',\
    padding: 24,\
  \},\
  name: \{\
    fontSize: 26,\
    fontWeight: 'bold',\
    marginBottom: 10,\
    color: '#1E90FF',\
  \},\
  category: \{\
    fontSize: 18,\
    marginBottom: 6,\
    color: '#555',\
  \},\
  phone: \{\
    fontSize: 18,\
    marginBottom: 20,\
    color: '#555',\
  \},\
  callButton: \{\
    backgroundColor: '#1E90FF',\
    padding: 14,\
    borderRadius: 8,\
    alignItems: 'center',\
  \},\
  callText: \{\
    fontSize: 18,\
    fontWeight: 'bold',\
    color: '#fff',\
  \},\
\});\
\

\f7\b0\fs28 \cf2 \uc0\u55357 \u56562 
\f1  Con esto, cuando entres a un negocio desde la lista, podr\'e1s ver su informaci\'f3n y 
\f2\b \cf2 llamar directamente
\f1\b0 \cf2  tocando el bot\'f3n.\
\
\'bfQuieres que ahora preparemos tambi\'e9n la 
\f2\b \cf2 pantalla de b\'fasqueda (SearchScreen)
\f1\b0 \cf2  para que los usuarios encuentren negocios por nombre/categor\'eda? Si\
\
Excelente 
\f7 \uc0\u55357 \u56960 
\f1  vamos a armar la 
\f2\b \cf2 pantalla de b\'fasqueda (SearchScreen)
\f1\b0 \cf2  donde el usuario podr\'e1 escribir un nombre o categor\'eda y filtrar los negocios en tiempo real.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  screens/SearchScreen.js\
import React, \{ useState \} from 'react';\
import \{ View, Text, TextInput, FlatList, TouchableOpacity, StyleSheet \} from 'react-native';\
\
const businesses = [\
  \{ id: '1', name: 'Constructora Yucat\'e1n', category: 'Construcci\'f3n', phone: '9991234567' \},\
  \{ id: '2', name: 'Inmobiliaria Maya', category: 'Inmobiliaria', phone: '9997654321' \},\
  \{ id: '3', name: 'Desarrollos Kukulc\'e1n', category: 'Desarrollo', phone: '9994567890' \},\
  \{ id: '4', name: 'Arquitectura del Sur', category: 'Arquitectura', phone: '9999876543' \},\
];\
\
export default function SearchScreen(\{ navigation \}) \{\
  const [query, setQuery] = useState('');\
\
  const filteredBusinesses = businesses.filter(\
    (business) =>\
      business.name.toLowerCase().includes(query.toLowerCase()) ||\
      business.category.toLowerCase().includes(query.toLowerCase())\
  );\
\
  return (\
    <View style=\{styles.container\}>\
      <TextInput\
        style=\{styles.searchInput\}\
        placeholder="Buscar negocio o categor\'eda..."\
        value=\{query\}\
        onChangeText=\{setQuery\}\
      />\
\
      <FlatList\
        data=\{filteredBusinesses\}\
        keyExtractor=\{(item) => item.id\}\
        renderItem=\{(\{ item \}) => (\
          <TouchableOpacity\
            style=\{styles.card\}\
            onPress=\{() => navigation.navigate('BusinessDetail', \{ business: item \})\}\
          >\
            <Text style=\{styles.name\}>\{item.name\}</Text>\
            <Text style=\{styles.category\}>\{item.category\}</Text>\
          </TouchableOpacity>\
        )\}\
        ListEmptyComponent=\{<Text style=\{styles.emptyText\}>No se encontraron resultados</Text>\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    backgroundColor: '#fff',\
    padding: 16,\
  \},\
  searchInput: \{\
    backgroundColor: '#f1f1f1',\
    padding: 12,\
    borderRadius: 8,\
    marginBottom: 16,\
    fontSize: 16,\
  \},\
  card: \{\
    backgroundColor: '#f9f9f9',\
    padding: 16,\
    borderRadius: 8,\
    marginBottom: 12,\
    borderWidth: 1,\
    borderColor: '#ddd',\
  \},\
  name: \{\
    fontSize: 18,\
    fontWeight: 'bold',\
    color: '#1E90FF',\
  \},\
  category: \{\
    fontSize: 14,\
    color: '#555',\
  \},\
  emptyText: \{\
    textAlign: 'center',\
    marginTop: 20,\
    color: '#999',\
    fontSize: 16,\
  \},\
\});\
\

\f7\b0\fs28 \cf2 \uc0\u9989 
\f1  Ahora ya puedes buscar por 
\f2\b \cf2 nombre
\f1\b0 \cf2  o 
\f2\b \cf2 categor\'eda
\f1\b0 \cf2 , y al tocar un negocio te lleva a la 
\f2\b \cf2 pantalla de detalle
\f1\b0 \cf2 .\
\
\'bfQuieres que preparemos tambi\'e9n una 
\f2\b \cf2 pantalla de categor\'edas (CategoriesScreen)
\f1\b0 \cf2  para que el usuario pueda navegar por sector (Construcci\'f3n, Inmobiliaria, Arquitectura, etc.)? si\
\
Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 \
Vamos a crear la 
\f2\b \cf2 pantalla de categor\'edas (CategoriesScreen)
\f1\b0 \cf2  para que los usuarios naveguen f\'e1cilmente por los sectores principales (Construcci\'f3n, Inmobiliaria, Arquitectura, Desarrollo, etc.).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7\fs34 \cf2 \uc0\u55357 \u56524 
\f4\b  screens/CategoriesScreen.js\
import React from 'react';\
import \{ View, Text, TouchableOpacity, FlatList, StyleSheet \} from 'react-native';\
\
const categories = [\
  \{ id: '1', name: 'Construcci\'f3n' \},\
  \{ id: '2', name: 'Inmobiliaria' \},\
  \{ id: '3', name: 'Arquitectura' \},\
  \{ id: '4', name: 'Desarrollo' \},\
];\
\
export default function CategoriesScreen(\{ navigation \}) \{\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>Categor\'edas</Text>\
\
      <FlatList\
        data=\{categories\}\
        keyExtractor=\{(item) => item.id\}\
        renderItem=\{(\{ item \}) => (\
          <TouchableOpacity\
            style=\{styles.card\}\
            onPress=\{() => navigation.navigate('Search', \{ category: item.name \})\}\
          >\
            <Text style=\{styles.categoryText\}>\{item.name\}</Text>\
          </TouchableOpacity>\
        )\}\
        contentContainerStyle=\{\{ paddingBottom: 20 \}\}\
      />\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    backgroundColor: '#fff',\
    padding: 16,\
  \},\
  title: \{\
    fontSize: 22,\
    fontWeight: 'bold',\
    marginBottom: 20,\
    color: '#1E90FF',\
    textAlign: 'center',\
  \},\
  card: \{\
    backgroundColor: '#f9f9f9',\
    padding: 20,\
    borderRadius: 10,\
    marginBottom: 12,\
    borderWidth: 1,\
    borderColor: '#ddd',\
    alignItems: 'center',\
  \},\
  categoryText: \{\
    fontSize: 18,\
    fontWeight: '600',\
    color: '#333',\
  \},\
\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs30 \cf2 \uc0\u55357 \u56580 
\f4\b  Ajuste en SearchScreen para aceptar categor\'eda desde CategoriesScreen
\f1\b0\fs28 \cf2 \
\
En la 
\f2\b \cf2 parte superior de SearchScreen.js
\f1\b0 \cf2 , cambia la definici\'f3n de estado 
\f5 \cf2 query
\f1 \cf2  para que reciba la categor\'eda si llega como par\'e1metro:\
\
export default function SearchScreen(\{ route, navigation \}) \{\
  const [query, setQuery] = useState(route.params?.category || '');\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7 \cf2 \uc0\u9989 
\f1  Con esto ya puedes entrar a 
\f2\b \cf2 Categor\'edas
\f1\b0 \cf2 , elegir una y se abre 
\f2\b \cf2 SearchScreen
\f1\b0 \cf2  filtrada autom\'e1ticamente por esa categor\'eda.\
\
\'bfQuieres que preparemos tambi\'e9n la 
\f2\b \cf2 pantalla de inicio (HomeScreen)
\f1\b0 \cf2  para que el usuario elija entre 
\f2\b \cf2 Buscar, Categor\'edas y Favoritos
\f1\b0 \cf2  desde un solo lugar? Si\
\
\'a1Excelente! 
\f7 \uc0\u55357 \u56960 
\f1 \
Vamos a armar el 
\f2\b \cf2 HomeScreen.js
\f1\b0 \cf2  como punto de entrada principal, con tres accesos: 
\f2\b \cf2 Buscar
\f1\b0 \cf2 , 
\f2\b \cf2 Categor\'edas
\f1\b0 \cf2  y 
\f2\b \cf2 Favoritos
\f1\b0 \cf2 . Te lo dejo en formato limpio para que lo copies en tu proyecto.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 \uc0\u55357 \u56514 
\f4\b  screens/HomeScreen.js\
\
import React from "react";\
import \{ View, Text, TouchableOpacity, StyleSheet \} from "react-native";\
import \{ useNavigation \} from "@react-navigation/native";\
import \{ Ionicons \} from "@expo/vector-icons";\
\
export default function HomeScreen() \{\
  const navigation = useNavigation();\
\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.title\}>Directorio Caucel</Text>\
      <Text style=\{styles.subtitle\}>Encuentra negocios cerca de ti</Text>\
\
      <View style=\{styles.menuContainer\}>\
        \{/* Buscar */\}\
        <TouchableOpacity\
          style=\{styles.card\}\
          onPress=\{() => navigation.navigate("Search")\}\
        >\
          <Ionicons name="search" size=\{40\} color="#333" />\
          <Text style=\{styles.cardText\}>Buscar</Text>\
        </TouchableOpacity>\
\
        \{/* Categor\'edas */\}\
        <TouchableOpacity\
          style=\{styles.card\}\
          onPress=\{() => navigation.navigate("Categories")\}\
        >\
          <Ionicons name="apps" size=\{40\} color="#333" />\
          <Text style=\{styles.cardText\}>Categor\'edas</Text>\
        </TouchableOpacity>\
\
        \{/* Favoritos */\}\
        <TouchableOpacity\
          style=\{styles.card\}\
          onPress=\{() => navigation.navigate("Favorites")\}\
        >\
          <Ionicons name="star" size=\{40\} color="#333" />\
          <Text style=\{styles.cardText\}>Favoritos</Text>\
        </TouchableOpacity>\
      </View>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    backgroundColor: "#f9f9f9",\
    alignItems: "center",\
    justifyContent: "center",\
    padding: 20,\
  \},\
  title: \{\
    fontSize: 28,\
    fontWeight: "bold",\
    color: "#2a2a2a",\
    marginBottom: 10,\
  \},\
  subtitle: \{\
    fontSize: 16,\
    color: "#555",\
    marginBottom: 40,\
  \},\
  menuContainer: \{\
    width: "100%",\
    flexDirection: "row",\
    flexWrap: "wrap",\
    justifyContent: "space-around",\
  \},\
  card: \{\
    width: "40%",\
    height: 120,\
    backgroundColor: "#fff",\
    borderRadius: 15,\
    alignItems: "center",\
    justifyContent: "center",\
    marginVertical: 10,\
    shadowColor: "#000",\
    shadowOpacity: 0.1,\
    shadowOffset: \{ width: 0, height: 2 \},\
    shadowRadius: 6,\
    elevation: 3,\
  \},\
  cardText: \{\
    marginTop: 10,\
    fontSize: 18,\
    fontWeight: "600",\
    color: "#333",\
  \},\
\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs28 \cf2 \uc0\u55357 \u56524 
\f1  Para que funcione necesitas:\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f6 \cf2 	1.	Tener instalados los \'edconos \uc0\u8594 \
npm install @expo/vector-icons\
\
	2.	En tu 
\f5 \cf2 App.js
\f1 , ya deber\'edas tener el 
\f2\b \cf2 Stack Navigator
\f1\b0 \cf2  con las pantallas:\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\sb240\partightenfactor0
\cf2 	\'95	
\f5 \cf2 HomeScreen
\f1 \cf2 \
	\'95	
\f5 \cf2 SearchScreen
\f1 \cf2 \
	\'95	
\f5 \cf2 CategoriesScreen
\f1 \cf2 \
	\'95	
\f5 \cf2 FavoritesScreen
\f1 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \

\f7 \uc0\u55357 \u56393 
\f1  \'bfQuieres que te preparemos tambi\'e9n los 
\f2\b \cf2 archivos vac\'edos de Search, Categories y Favorites
\f1\b0 \cf2  para que la navegaci\'f3n ya no marque error y quede la base lista? Si\
\
Perfecto 
\f7 \uc0\u55357 \u56908 
\f1  te voy a dejar los 
\f2\b \cf2 3 archivos base
\f1\b0 \cf2  para que no te marque error al navegar desde el 
\f5 \cf2 HomeScreen
\f1 \cf2 .\
\
Cada pantalla tendr\'e1 un t\'edtulo sencillo que luego podemos ir llenando con la l\'f3gica que quieras (ej. lista de categor\'edas como papeler\'edas, helados, refaccionarias, etc.).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 \uc0\u55357 \u56514 
\f4\b  screens/SearchScreen.js\
import React from "react";\
import \{ View, Text, StyleSheet \} from "react-native";\
\
export default function SearchScreen() \{\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.text\}>
\f7\b0 \uc0\u55357 \u56589 
\f4\b  Aqu\'ed ir\'e1 el buscador de negocios</Text>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    alignItems: "center",\
    justifyContent: "center",\
    backgroundColor: "#f9f9f9",\
  \},\
  text: \{\
    fontSize: 18,\
    color: "#333",\
  \},\
\});\
\

\f7\b0 \uc0\u55357 \u56514 
\f4\b  screens/CategoriesScreen.js\
import React from "react";\
import \{ View, Text, StyleSheet \} from "react-native";\
\
export default function CategoriesScreen() \{\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.text\}>
\f7\b0 \uc0\u55357 \u56514 
\f4\b  Aqu\'ed estar\'e1n las categor\'edas de negocios</Text>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    alignItems: "center",\
    justifyContent: "center",\
    backgroundColor: "#f9f9f9",\
  \},\
  text: \{\
    fontSize: 18,\
    color: "#333",\
  \},\
\});\
\

\f7\b0 \uc0\u55357 \u56514 
\f4\b  screens/FavoritesScreen.js\
import React from "react";\
import \{ View, Text, StyleSheet \} from "react-native";\
\
export default function FavoritesScreen() \{\
  return (\
    <View style=\{styles.container\}>\
      <Text style=\{styles.text\}>
\f7\b0 \uc0\u11088 
\f4\b  Aqu\'ed aparecer\'e1n tus negocios favoritos</Text>\
    </View>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    flex: 1,\
    alignItems: "center",\
    justifyContent: "center",\
    backgroundColor: "#f9f9f9",\
  \},\
  text: \{\
    fontSize: 18,\
    color: "#333",\
  \},\
\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs28 \cf2 \uc0\u55357 \u56393 
\f1  Y en tu 
\f5 \cf2 App.js
\f1 \cf2 , aseg\'farate de importar y registrar estas pantallas:\
import HomeScreen from "./screens/HomeScreen";\
import SearchScreen from "./screens/SearchScreen";\
import CategoriesScreen from "./screens/CategoriesScreen";\
import FavoritesScreen from "./screens/FavoritesScreen";\
\
<Stack.Navigator>\
  <Stack.Screen name="Home" component=\{HomeScreen\} />\
  <Stack.Screen name="Search" component=\{SearchScreen\} />\
  <Stack.Screen name="Categories" component=\{CategoriesScreen\} />\
  <Stack.Screen name="Favorites" component=\{FavoritesScreen\} />\
</Stack.Navigator>\
\

\f7 \uc0\u55357 \u56524 
\f1  Con esto ya podr\'e1s entrar y salir de cada pantalla desde el men\'fa principal.\
\
\'bfQuieres que en la 
\f2\b \cf2 pantalla de Categor\'edas
\f1\b0 \cf2  ya te vaya poniendo botones/listado de ejemplo con negocios como 
\f11\i \cf2 Papeler\'edas, Helados, Refacciones, Tortiller\'edas, Carnicer\'edas, Poller\'edas
\f1\i0 \cf2 , etc., para que lo tengas interactivo de una vez? Si\
\
\'a1Perfecto 
\f7 \uc0\u55357 \u56960 
\f1 !\
Entonces vamos a armar la 
\f2\b \cf2 pantalla de Categor\'edas
\f1\b0 \cf2  con una lista de botones (ejemplo: 
\f11\i \cf2 Papeler\'edas, Helados, Refacciones, Tortiller\'edas, Carnicer\'edas, Poller\'edas, Lavander\'edas, Pasteler\'edas, Salones de belleza, Spas, Gimnasios, Verduler\'edas, Panader\'edas
\f1\i0 \cf2 ).\
\
Cada bot\'f3n por ahora solo mostrar\'e1 un 
\f5 \cf2 alert
\f1 \cf2  con el nombre, despu\'e9s lo podemos conectar a la lista real de negocios 
\f7 \uc0\u55357 \u56396 
\f1 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 \uc0\u11835 
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\fs30 \cf2 \uc0\u55357 \u56514 
\f4\b  screens/CategoriesScreen.js\
import React from "react";\
import \{ View, Text, StyleSheet, TouchableOpacity, ScrollView, Alert \} from "react-native";\
\
const categories = [\
  "Papeler\'edas",\
  "Helados",\
  "Refacciones",\
  "Tortiller\'edas",\
  "Carnicer\'edas",\
  "Poller\'edas",\
  "Lavander\'edas",\
  "Pasteler\'edas",\
  "Salones de belleza",\
  "Spas",\
  "Gimnasios",\
  "Verduler\'edas",\
  "Panader\'edas",\
];\
\
export default function CategoriesScreen() \{\
  const handlePress = (category) => \{\
    Alert.alert("Categor\'eda seleccionada", `Has elegido: $\{category\}`);\
  \};\
\
  return (\
    <ScrollView contentContainerStyle=\{styles.container\}>\
      <Text style=\{styles.title\}>Categor\'edas de negocios</Text>\
      \{categories.map((category, index) => (\
        <TouchableOpacity\
          key=\{index\}\
          style=\{styles.button\}\
          onPress=\{() => handlePress(category)\}\
        >\
          <Text style=\{styles.buttonText\}>\{category\}</Text>\
        </TouchableOpacity>\
      ))\}\
    </ScrollView>\
  );\
\}\
\
const styles = StyleSheet.create(\{\
  container: \{\
    padding: 20,\
    alignItems: "center",\
    backgroundColor: "#f9f9f9",\
  \},\
  title: \{\
    fontSize: 22,\
    fontWeight: "bold",\
    marginBottom: 20,\
    color: "#222",\
  \},\
  button: \{\
    width: "90%",\
    padding: 15,\
    marginVertical: 8,\
    backgroundColor: "#4CAF50",\
    borderRadius: 10,\
    alignItems: "center",\
    shadowColor: "#000",\
    shadowOffset: \{ width: 0, height: 2 \},\
    shadowOpacity: 0.2,\
    shadowRadius: 3,\
    elevation: 3,\
  \},\
  buttonText: \{\
    fontSize: 18,\
    color: "#fff",\
    fontWeight: "600",\
  \},\
\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f7\b0\fs28 \cf2 \uc0\u55357 \u56524 
\f1  Esto ya te va a mostrar una lista bonita de botones por categor\'eda, lista para crecer en el futuro.\
Si quieres, puedo hacer que al presionar una categor\'eda se navegue a una 
\f2\b \cf2 pantalla de listado de negocios
\f1\b0 \cf2  en lugar de solo mostrar un 
\f5 \cf2 alert
\f1 \cf2 .\
\
\'bfQuieres que preparemos tambi\'e9n esa pantalla de \'93Listado de negocios por categor\'eda\'94 para darle flujo completo? Si\
\

\f6 \cf2 \
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\sb240\partightenfactor0

\f1 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 \
\
\
\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 \
\
}